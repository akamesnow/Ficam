[POST_VERSION] #DO NOT MOVE OR ALTER THIS LINE# V23.00 P0 E1 W23.00 T1599482470 M23.00 I0 O0
# ---------------------------------------------------------------------------------------------------------
# -   POST PRO FRAISAGE 3 ET 4 AXES AUTOUR DE X OU Y                                                      -
# -   SOUS PROG EN Z en ABSOLUE et INCREMENTAL                                                            -
# ---------------------------------------------------------------------------------------------------------
# -   Version 2020 suite remise a jour majeur                                                                                          -
# ---------------------------------------------------------------------------------------------------------
# -   Affichage des Surep R et L et 3D                                                                    -
# -   Affichage des type de corections                                                                    -
# ---------------------------------------------------------------------------------------------------------
# -       MASTERCAM 2020         F.I.CAM                                                                -
# ---------------------------------------------------------------------------------------------------------
# - Realise le      : 25/09/08  Par : ED
# - Modif le        : 27/04/2020  Par : ED
# - Pour la societe : FICAM
# - Armoire CN      : FANUC
# - Nom MACHINE     :
# ---------------------------------------------------------------------------------------------------------
# -                                           -
# ---------------------------------------------------------------------------------------------------------
# -   DESCRIPTION DES MODIFICATIONS           -
# affichage du descripteur de fichier meme si pas question entete
# ajout de l'info groupe ou non
# mi10 utilise pour ajuster les avances sur les arc 0=NON 1=Ralentir 2=Accelerer 3=les Deux
# modification de la gestions des degagement machine en fonction des flag de reglage PST
# mi1 utilise pour ne pas degager en Z avant rotation plateau
# mi2 utilise pour ne pas bloquer le diviseur
# Workof (numero de Decalage) de 54 a 59  (0 pour 54 1 pour 55 etc...) et 54.1P1 P2 apres
# ecriture des parametres dans NCI et du fichier OPS (pour lire les infos de surep)
# creation des bloc pour afficher les surep
# creation de l'affichage des types de correction
# gestion du pmx en 4 axes
# lecture de la def armoire pour :
#                   l'extension de l'iso
#                   les arcs
#                   les commentaires
#                   la preparation de l'outil suivant
# Lecture de la def machine pour :
#                   Le nom de la machine
#                   Le nombre d'axes rotatif (1 seul supporte)
#                   Le sens de rotation de l'axe rotatif
#                   Le nom de l'axe rotatif (A ou B ou C)
#                   L'avance Maxi et Mini de la machine
# ---------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------
#            REGLAGES DU PST
#
#region personalisation post processeur

inc_degage  : 1       # degagement machine  1 en INCREMENTAL (G91) ou 0 en ABSOLUE (G90)
sdegageZ    : "Z-1"    # Degagement en Z pour appel outil et changement de position 4eme axe
sdegageY    : "Y0"    # Degagement en Y pour appel outil
sdegageX    : "X0"    # Degagement en X pour appel outil et changement de position 4eme axe
smodedeg    : "G28"   # Mode de degagement des axes G28 ou G53
sdeg_debut  : "ici ecrire le sous prog" # Macro de degagement debut prog
sdeg_outil  : "ici ecrire le sous prog" # Macro de degagement au changement outil
sdeg_4axe   : "ici ecrire le sous prog" # Macro de degagement au degagement 4 axe
sdeg_fin    : "ici ecrire le sous prog" # Macro de degagement a la fin du programme


deg_debut   : 5     # Degager aux debut de prog             0= non  1=Z  2=Z-X  3=Z-Y  4=Z-X-Y  5=Z-XY 6=Z-Y-X 7= Sous prog sdeg_debut
deg_outil   : 1     # Degager aux changement outil          0= non  1=Z  2=Z-X  3=Z-Y  4=Z-X-Y  5=Z-XY 6=Z-Y-X 7= Sous prog sdeg_outil
deg_4axe    : 1     # Degager aux changement position 4eme axe  0= non  1=Z  2=Z-X  3=Z-Y  4=Z-X-Y  5=Z-XY 6=Z-Y-X 7= Sous prog sdeg_4axe
deg_fin     : 1     # Degager en fin de programme           0= non  1=Z  2=Z-X  3=Z-Y  4=Z-X-Y  5=Z-XY 6=Z-Y-X 7= Sous prog sdeg_fin

numcoment   : 1     # Numeroter les lignes de commentaire 0 =  non 1 = oui
numsprog    : 1     # Numeroter les lignes de sous programme 0 =  non 1 = oui
info_corr   : 1     # afficher le type de correction
info_surep  : 1     # afficher les surepaisseurs xy et z
info_outil  : 1     # afficher les info sur l'outil
info_groupe : 1     # afficher les noms des groupe d'usinage
outil_apres : 0     # preparation outil suivant juste apres appel outil : 0  - preparation outil suivant avec premier placement : 1
entete      : 1     # Poser les question pour l'entete
tooltable$  : 1     # creation liste outil en entete
use_bloque  : 1     # pour ecrire M10 M11 (blocage diviseur)    :0 pour ne pas ecrire M10 M11
ges_oriusi  : 3        # Choix 1 – gestion G54-G59 mélange avec G54 Pxx, Choix 2 – que G54 a G59, Choix 3 – Que G54 et G54 Pxx


#endregion
#region Question a remplire
# A modifier si besoin
s_com_open : "("    # Caractere de DEBUT de commentaire
s_com_close : ")"    # Caractere de FIN de commentaire

# Questions UNIQUEMENT des STRINGS NON VIDES !!
s_text_question_1 : "CLIENT"
s_text_question_2 : "DESIGNATION PIECE"
s_text_question_3 : "NUMERO DU PLAN"
s_text_question_4 : "INDICE DU PLAN"
s_text_question_5 : "NUMERO D'OPERATION"
s_text_question_6 : "ORIGINE PIECE"
s_text_question_7 : "PHASE"
s_text_question_8 : "COMMENTAIRE"
s_text_question_9 : "X :"
s_text_question_10 : ""
s_text_question_11 : ""
s_text_question_12 : ""
s_text_question_13 : ""
s_text_question_14 : ""
s_text_question_15 : ""
s_text_question_16 : ""
s_text_question_17 : ""
s_text_question_18 : ""
s_text_question_19 : ""
s_text_question_20 : ""
#----
#region formatage variable question
svide2 : ""
s_question_1 : s_text_question_1
s_question_2 : s_text_question_2
s_question_3 : s_text_question_3
s_question_4 : s_text_question_4
s_question_5 : s_text_question_5
s_question_6 : s_text_question_6
s_question_7 : s_text_question_7
s_question_8 : s_text_question_8
s_question_9 : s_text_question_9
s_question_10 : s_text_question_10
s_question_11 : s_text_question_11
s_question_12 : s_text_question_12
s_question_13 : s_text_question_13
s_question_14 : s_text_question_14
s_question_15 : s_text_question_15
s_question_16 : s_text_question_16
s_question_17 : s_text_question_17
s_question_18 : s_text_question_18
s_question_19 : s_text_question_19
s_question_20 : s_text_question_20

#----
fq 1 s_question_1 "//s_text_question_1//"
fq 2 s_question_2 "//s_text_question_2//"
fq 3 s_question_3 "//s_text_question_3//"
fq 4 s_question_4 "//s_text_question_4//"
fq 5 s_question_5 "//s_text_question_5//"
fq 6 s_question_6 "//s_text_question_6//"
fq 7 s_question_7 "//s_text_question_7//"
fq 8 s_question_8 "//s_text_question_8//"
fq 9 s_question_9 "//s_text_question_9//"
fq 10 s_question_10 "//s_text_question_10//"
fq 11 s_question_11 "//s_text_question_11//"
fq 12 s_question_12 "//s_text_question_12//"
fq 13 s_question_13 "//s_text_question_13//"
fq 14 s_question_14 "//s_text_question_14//"
fq 15 s_question_15 "//s_text_question_15//"
fq 16 s_question_16 "//s_text_question_16//"
fq 17 s_question_17 "//s_text_question_17//"
fq 18 s_question_18 "//s_text_question_18//"
fq 19 s_question_19 "//s_text_question_19//"
fq 20 s_question_20 "//s_text_question_20//"
fq 21 vtol$ "TOLERANCE CORDALE POUR DEVELOPPE"
fq 22 progno$ "Numero de Prog SVP ?"


# Nombre de questions jusqu'a  25 maxi

p_questions_entete

        # A enrichir si besoin --> apres Q13
        if s_text_question_1 <> svide2, q1
        if s_text_question_2 <> svide2, q2
        if s_text_question_3 <> svide2, q3
        if s_text_question_4 <> svide2, q4
        if s_text_question_5 <> svide2, q5
        if s_text_question_6 <> svide2, q6
        if s_text_question_7 <> svide2, q7
        if s_text_question_8 <> svide2, q8
        if s_text_question_9 <> svide2, q9
        if s_text_question_10 <> svide2, q10
        if s_text_question_11 <> svide2, q11
        if s_text_question_12 <> svide2, q12
        if s_text_question_13 <> svide2, q13
        if s_text_question_14 <> svide2, q14
        if s_text_question_15 <> svide2, q15
        if s_text_question_16 <> svide2, q16
        if s_text_question_17 <> svide2, q17
        if s_text_question_18 <> svide2, q18
        if s_text_question_19 <> svide2, q19
        if s_text_question_20 <> svide2, q20

        s_question_1 = ucase(s_question_1)
        s_question_2 = ucase(s_question_2)
        s_question_3 = ucase(s_question_3)
        s_question_4 = ucase(s_question_4)
        s_question_5 = ucase(s_question_5)
        s_question_6 = ucase(s_question_6)
        s_question_7 = ucase(s_question_7)
        s_question_8 = ucase(s_question_8)
        s_question_9 = ucase(s_question_9)
        s_question_10 = ucase(s_question_10)
        s_question_11 = ucase(s_question_11)
        s_question_12 = ucase(s_question_12)
        s_question_13 = ucase(s_question_13)
        s_question_14 = ucase(s_question_14)
        s_question_15 = ucase(s_question_15)
        s_question_16 = ucase(s_question_16)
        s_question_17 = ucase(s_question_17)
        s_question_18 = ucase(s_question_18)
        s_question_19 = ucase(s_question_19)
        s_question_20 = ucase(s_question_20)

        spathnc$ = ucase(spathnc$)
          stck_matl$ = ucase(stck_matl$)
          snamenc$ = ucase(snamenc$)

        spaces$ = 0
        s_com_open, "DATE LE ", date$," A ", time$, s_com_close, e$
        s_com_open, "DESSIN MASTERCAM - ", smcname$, s_com_close, e$
        s_com_open, "NC FILE - ", *spathnc$, *snamenc$, *sextnc$, s_com_close, e$
        s_com_open, "MATIERE - ", *stck_matl$, s_com_close, e$
        s_com_open, "NOM DU PROGRAMME - ", sprogname$, s_com_close, e$
        " ", e$
        if s_text_question_1 <> s_question_1, s_com_open, s_text_question_1, " - ", s_question_1, s_com_close, e$
        if s_text_question_2 <> s_question_2, s_com_open, s_text_question_2, " - ", s_question_2, s_com_close, e$
        if s_text_question_3 <> s_question_3, s_com_open, s_text_question_3, " - ", s_question_3, s_com_close, e$
        if s_text_question_4 <> s_question_4, s_com_open, s_text_question_4, " - ", s_question_4, s_com_close, e$
        if s_text_question_5 <> s_question_5, s_com_open, s_text_question_5, " - ", s_question_5, s_com_close, e$
        if s_text_question_6 <> s_question_6, s_com_open, s_text_question_6, " - ", s_question_6, s_com_close, e$
        if s_text_question_7 <> s_question_7, s_com_open, s_text_question_7, " - ", s_question_7, s_com_close, e$
        if s_text_question_8 <> s_question_8, s_com_open, s_text_question_8, " - ", s_question_8, s_com_close, e$
        if s_text_question_9 <> s_question_9, s_com_open, s_text_question_9, " - ", s_question_9, s_com_close, e$
        if s_text_question_10 <> s_question_10, s_com_open, s_text_question_10, " - ", s_question_10, s_com_close, e$
        if s_text_question_11 <> s_question_11, s_com_open, s_text_question_11, " - ", s_question_11, s_com_close, e$
        if s_text_question_12 <> s_question_12, s_com_open, s_text_question_12, " - ", s_question_12, s_com_close, e$
        if s_text_question_13 <> s_question_13, s_com_open, s_text_question_13, " - ", s_question_13, s_com_close, e$
        if s_text_question_14 <> s_question_14, s_com_open, s_text_question_14, " - ", s_question_14, s_com_close, e$
        if s_text_question_15 <> s_question_15, s_com_open, s_text_question_15, " - ", s_question_15, s_com_close, e$
        if s_text_question_16 <> s_question_16, s_com_open, s_text_question_16, " - ", s_question_16, s_com_close, e$
        if s_text_question_17 <> s_question_17, s_com_open, s_text_question_17, " - ", s_question_17, s_com_close, e$
        if s_text_question_18 <> s_question_18, s_com_open, s_text_question_18, " - ", s_question_18, s_com_close, e$
        if s_text_question_19 <> s_question_19, s_com_open, s_text_question_19, " - ", s_question_19, s_com_close, e$
        if s_text_question_20 <> s_question_20, s_com_open, s_text_question_20, " - ", s_question_20, s_com_close, e$
        s_com_open, " ----------- ", s_com_close, e$
        " ", e$
        comment$        # pour sortie du descripteur de fichier
        entete = 0
        spaces$ = 0


#---------------------------------------------------------------------------
#endregion

#endregion
#region TOLERANCES POST PRO
linktolvar$    : 1  #Associer les variables de tolerance X metrique au variable english
cant_tlchng$   : 1  #Ignorer entree de texte programme au changement avec tlchng_aft?
newglobal$     : 1  #Activer la verification d'erreur pour les variables globales?
#endregion
#region FORMATS DES VARIABLES FS
#
fs  1  1.9lt    # Format avec toute la precision pour les variable internes de mp
fs  2  1.3      # format d'affichage a 3 chifres max pour les variables affichees
fs  3  1.3n     # idem mais non modale
fs  4  1 0      # 1 chiffre mini avant virgule  pas de virgule pas de chiffre apres
fs  5  1 0n     # idem mais non modale
fs  6  4 0ln    # 4 chiffres avant pas de virgule pas de chiffre apres non modal force 0 de tete
fs  7  1 3t     # 1 chiffre mini avant virgule  pas de virgule 3 apres force 0 de queue non modal.
fs  8  1.3ln    # 1 chiffre avant la vigule met . 3 chiffres apres virgule non modal force 0 de tete
fs  9  1 0n     # pour liste outil
fs  10 1.3n     # pour liste outil
fs  11 1.3i     # force 1 chiffre avant virgule met . 3 chiffres apres virgule en incremental
fs  12 1.3ni
fs  13 3 0ln

#endregion
#region AFFECTATION DES VARIABLES FLAG PERSONALISATION post-pro
#
fmt     4 numcoment     # flag pour Numeroter les lignes de commentaire
fmt     4 numsprog      # flag pour Numeroter les lignes de sous programme
fmt     1 texte         # flag pour textes
fmt     1 nbr_car       # nombre de carracteres maxi dans les connemtaires
fmt     1 old_comm_cnt  # nombre d'enregistrement dans buffeur commentaires
fmt     1 info_corr     # flag pour correction outil
fmt     1 info_outil    # flag pour info outil
fmt     1 info_surep    # flag pour surep
fmt     1 info_groupe   # flag pour le nom des groupes
fmt     1 old_spaces    # memo de spaces
fmt     1 old_omitseq   # memo de omiseq
fmt     1 old_linarc    # memo de la decomposition des arcs
fmt     4 entete        # Variable utilisee pour generer l'entete
fmt     4 numerote      # Variable numerote utilisee pour numeroter ou non les lignes
fmt     1 outil_apres   # flag pour la position d'appel de l'outil suivant
fmt     1 avance_arc    # flag pour gerer l'avance sur arc
#endregion
#REGION AFFECTATION DES VARIABLES MASTERCAM
fmt     1 gcode$        # Gcode pst
fmt     1 memo_gcode
fmt     1 x$        # XYZ pst
fmt     1 y$
fmt     1 z$
fmt     1 xr$       # XYZ rapide pst
fmt     1 yr$
fmt     1 zr$
fmt     1 i$        # IJK centre des arcs pst
fmt     1 j$
fmt     1 k$
fmt     1 arcrad$   # Valeur du rayon pst
fmt     1 linarc$   # couper les arcs
fmt     1 t$        # numero d'outil pst
fmt     1 next_tool$    # numero suivant pst
fmt     1 first_tool$   # numero du premier outil pst
fmt     1 tloffno$  # Correcteur de Diamentre pst
fmt     1 tlngno$   # Correcteur de Longueur pst
fmt     1 tldia$    # diametre outil pst
fmt     1 cc_computer$  # correction ordinateur
fmt     1 cc_pos$   # correction Armoire
fmt     1 fr$       # avance pst
fmt     1 fr_pos$   # AVANCE TRAVAIL au point pst
fmt     1 ss$       # vitesse de broche pst
fmt  "N" 4 n$       # numerotetion des blocs a chaque ligne
fmt  "O" 4 progno$  # Numero de programe pst
fmt  "G" 4 cc$      # valeur de la correction dans NCI
fmt     1 coolant$  # Lubrification 0 1 2 3 arret axe buse les deux
fmt     1 mi1$      # mi1 utilise pour degagement en Z avant rotation plateau
fmt     1 mi2$      # mi2 utilise pour ne pa rebloquer le plateau
fmt     1 op_id$    # Numero de l'operation du gestionaire PST
#------------------- PERCAGES ------------------------------------------
fmt    1 depth$     # profondeur percage pst
fmt    1 refht$     # Garde pour percage pst
fmt    1 initht$    # Plan de secu percage pst
fmt    1 frplunge$  # Avance percage pst
fmt    1 dwell$     # Tempo pour percage pst
fmt  "D" 3 peckclr$     # garde d'approche rapide dans les debourrage pst
fmt  "Q" 3 peck1$       # Pas Z du premier debourrage pst
fmt  "Q" 3 peck2$       # Pas Z des debourrages suivants
fmt  "Q" 3 shftdrl$     # valeur de retrait du grain de la barre d'allsage
fmt  "Q" 3 retr$        # valeur de remonte relative en rapide dans les debourages en G1 G0
#------------------- SOUS PROG ------------------------------------------
fmt     1 sub_prg_no$       # Numero de sous-programe interne en Z
fmt     1 main_prg_no$      # Numero de sous prog interne en transformation
fmt  "X" 1 sub_trnsx$       # decalage en X pour G52 en usinage transformer translation
fmt  "Y" 1 sub_trnsy$       # decalage en Y pour G52 en usinage transformer translation
fmt  "Z" 1 sub_trnsz$       # decalage en Z pour G52 en usinage transformer translation
sub_trnsx$   :  -99999
sub_trnsy$   :  -99999
sub_trnsz$   :  -99999
#------------------- 4 AXES ------------------------------------------
fmt    1 rotdia$            # diam de sbstitution
fmt    1 rotaxis$       # type de substitution
fmt  "v" 1 v$
fmt  "w" 1 w$
m7$        : 999
m8$        : 999
fmt  4  annee
fmt "" 4 workofs
fmt "" 4 force_4axes
force_4axes : 0

#ENDREGION
#region AFFECTATION DES VARIABLES NC
# attribution des fmt et initialisation)
#region ---- POSITIONS ----
fmt  "X" 2 xabs         # XYZ en Absolue pour NC
fmt  "Y" 2 yabs
fmt  "Z" 2 zabs

fmt  "X" 11 Xinc        # XYZ en incremental pour NC
fmt  "Y" 11 Yinc
fmt  "Z" 11 Zinc

fmt  "A" 2 axeA         # POSITION pour rotation plateau en ABS
fmt  "Ainc" 11 axeAi        # POSITION pour rotation plateau en INCREMENTAL

Xinc = xabs
Yinc = yabs
Zinc = zabs
axeAi = axeA            # A incremental

fmt "px" 2 old_x        # ancien XYZ du NC
fmt "py" 2 old_y
fmt "pz" 2 old_z

fmt  "I" 2 iabs         # IJK centre des arcs pour NC en G90
fmt  "J" 2 jabs
fmt  "K" 2 kabs

fmt  "I" 2 iinc         # ijk centre des arcs pour NC en G91
fmt  "J" 2 jinc
fmt  "K" 2 kinc
fmt  "R" 3 rayon        # valeur de rayon de l'arc pour NC
fmt      1 cor_arc      # compensation sur les arc autorisee
#endregion
#region ---- OPERATION ----
fmt      1 deg_debut
fmt      1 deg_outil
fmt      1 deg_4axe
fmt      1 deg_fin

fmt  "T" 5 outil        # numero d'outil appele pour NC
fmt  "T" 5 outil_suivant    # numero de l'outil suivant pour NC
fmt  "T" 5 memo_t
fmt  "D" 4 correcteur_D     # Correcteur de Diamentre pour NC
fmt  "H" 4 correcteur_H     # Correcteur de Longueur pour NC
fmt  "H" 4 old_correcteur_H

correcteur_D = tloffno$
correcteur_H = tlngno$

fmt  "DIAM " 2 diam_outil   # diametre outil pour NC
fmt  "F" 4 avance       # avance pour NC
fmt  "S" 4 ssa          # Vitesse de broche affiche

ssa = abs(ss$)          # vitesse de broche en valeur absolue

fmt  "S" 4 old_ss       # memo de la vitesse de broche precedente
fmt     4 lubrif        # gestion de la lubrification pour NC
fmt     3 type_comp     # type de correction
fmt "SUREP R " 8 surep          # Surep au rayon
fmt "SUREP Z " 8 surepl         # Surep en Z
fmt "SUREP 3D " 8 surep3d       # Surep en usinage 3D
surep3d = surep
fmt "R" 1 result        # resultat de calcul

fmt     5 prognosav     # Memo du Numero de programe
fmt     1 debut         # flag pour debut de programme
#endregion
#REGION ---- NUMEROTATION ----
fmt  "N" 4 num          # numero de bloc sur ligne appel outil si pas de numerotation des lignes
fmt    1 old_op_id      # Memo de l'operation
fmt    1 last_op_id     # Derniere operation
num : 0
num = num + 1
old_op_id : -99999
fmt  "OPERATION "  5 numop  # NUMERO D'OPERATION
#ENDREGION
#REGION ---- ORIGINES D'USINAGE ----
fmt  "G" 4 origine      # origine d'usinage G54 a G59 pour NC
fmt  "G54.1P"  4 originebis # origine d'usinage G60 a G9999 pour NC
fmt  "G" 4 old_origine      # Stocage de la valeur precedente de origine d'usinage
#ENDREGION
#REGION ---- SOUS PROG ----
fmt "inc" 1 incremental     # mode incremental ou Absolue
fmt     1 memo_incremental  # memeo du mode incremental ou Absolue
fmt     1 inc_degage        # degagement machine en INCREMENTAL ou en ABSOLUE

fmt  "O" 6 debsousprog      # Numero du premier sous programe
fmt  "#100="  4 nprincipal  # memo du numero de ligne du prog principal
fmt  "X" 3 decX         # decalage d'origine en X pour G52
fmt  "Y" 3 decY         # decalage d'origine en Y pour G52
fmt  "Z" 3 decZ         # decalage d'origine en Z pour G52
fmt  "old dec X" 3 old_decX         # decalage d'origine en X pour G52
fmt  "old dec Y" 3 old_decY         # decalage d'origine en Y pour G52
fmt  "old dec Z" 3 old_decZ         # decalage d'origine en Z pour G52

fmt  "P" 5 subprognum       # numero du sous-programe pour l'appel
fmt  "O" 6 numsubprog       # Numero entete de sous-programe
fmt     5 nomsubprog        # Numero n'entete de sous-programe

fmt  "DEC" 2 decalage       # flag pour savoir si on a ecrit un G52
fmt      1 sous_prog_type   # type de merge des sous prog (0 apres prog principal 1 avant)
incremental : 0         # init en Absolue
decalage : 0

fmt  "transform" 2 transform
#ENDREGION
#region ---- PERCAGES ----
fmt  "Z" 2 profabs  # profondeur de percage en ABS
fmt  "Z" 2 profi    # profondeur de percage en INC
fmt  "R" 2 gardeabs # Garde pour percage en ABS
fmt  "R" 2 gardei   # Garde pour percage en INC
fmt  "F" 3 pas      # valeur calculee du pas pour taraudage rigide
fmt     2 typcycle  # variable mise a 1 lors des percage pour afficher l'intitule du cycle
fmt  "Q" 2 incrementQ#increment de debourrage ou brise copeaux
fmt  "D" 2 remonteD # remonte en brise copeaux
fmt  "Q" 3 retrait  # valeur de retrait du grain de la barre d'allsage
fmt  "P" 2 tempo
tempo = dwell$
#endregion
#region ---- 4 em Axe ----
fmt  3 useaxe           # flag pour utiliser le 4eme axe
fmt  "S" 2 sens         # pour inverser le sens de l'axe
fmt     1 bloque        # pour gestion M10 M11
fmt     1 use_bloque
fmt     1 old_rotaxis       # memo de rotaxis$
fmt "A"  2 old_axeA     # memo de l ancien A
fmt "Sens" 2 sensA      # sens de rotation de A
fmt  "A" 2 epsi         # Delta de rotation de l'axe A
fmt  "Ntour" 2 nbrtour      # nombre de tour realise
fmt     3 tolquestion       # flag utilise pour poser la question de tolerance de developpe q'une fois


fmt  "vx" 1 vx
fmt  "vy" 1 vy
fmt  "vz" 1 vz
fmt  "A" 1 axeA1
fmt  "A" 1 axeA2

fmt  "A" 1 delta_axeA1
fmt  "A" 1 axeA1_dep
fmt  "A" 1 old_axeA1
fmt     1 debutpmx  # flag debut prog pmx
srot_label : ""

axeA1_dep :  -999999



axeA     : 999              # Inint de A
old_axeA : 0.9999999        # Inint de old_axeA
nbrtour : 0                  # Inint du nombre de tour realise
tolquestion : 0               # Inint de tolquestion
#vtol$      : 0.01
#endregion
#region ---- Parametres de DEF MACHINE ---

fmt    1 type_composant     # type de composant
fmt    1 compt_axes_rot     # compteur d'axes rotatif
fmt    3 erreur                # numero d'erreur
fmt    3 testerreur4        # flag pour erreur 4
fmt    1 diviseur           # Axe de l'axe rotatif
fmt    1 old_syncaxis       # memo du numero de combinaison d'axes
fmt    1 nbr_combi          # Nombre de combinaison d'axes
fmt    1 palette            # flag pour machine avec palette



write_ops    : 0     #Write NC operation information (True/False)
erreur : 0
nbr_combi : 0
compt_axes_rot : 0
palette : 0
#endregion
#region ---- Liste des OUTILS ---

fmt "T" 5 paramT1       # NÂ° outil
fmt   5 paramT2         # Type d'outil
fmt   5 paramT3         # Matiere de l'outil 1=Rapide 2=carbure 3=carbure revetu 4=cermet 5=borzon
fmt   5 paramT4         # Type de rayon de bout 0=aucun 1=torique 2=spherique
fmt "DIAM=" 3 paramT5   # Diametre
fmt "R=" 3 paramT6      # Rayon de bout
fmt   3 paramT7         # Nombre de filet par mm
fmt "A=" 3 paramT8  # Angle de bout
fmt   5 paramT9         # NÂ° de correcteur de rayon
fmt   5 paramT10    # NÂ° de correcteur de longeur
fmt   3 paramT11    # Avance travail
fmt   3 paramT12    # Avance plongee
fmt   3 paramT13    # Avance retraction
fmt   5 paramT14    # Vitesse de broche
fmt   5 paramT15    # Type de lubrification 0=arret 1=eau 2=air 3=broche 4=les 2
fmt   5 paramT16    " DENTS" # Nombre de dents

#endregion
#endregion
#region ZONE de FORMULES initial  si : uniquement au dedut si = mise a jour systematique
#

tlchng_aft$ : 1     # Delay the tool change call until the first motion is read on all the NCI Gcode 1000, 1001, 1002 tool changes.
get_1004$   : 1     # Find gcode 1004 with getnextop?
rpd_typ_v7$ : 0     # Use Version 7 style contour flags?
getnextop$  : 1     # autorise la commande nextop nextccomp etc
strtool_v7$ : 2     # autorise la lecture des commentaires de la bibiotheque outil
skp_lead_flgs$  : 0 # Do NOT use v9 style contour flags
ncldr$      : 20    # nbr de zero de queue utilises pour la fonction "fleader"
ldrcode$    : 65
nobrk$      : no$   # ne pas decomposer en xy pui z les mouvements en rapid
cc_1013$    : 1     # pour connaitre cc dans appel outil
opcode$     : 1
gcode$      : -1
progname$   : 1     # force le nom du nci en majuscule
workofs$   : -1     # pour 4 axes on doit util. workof$=0
#endregion
#region DEFINITION DES STRING
#

#region ---- STRING GENERAL ----
svide : ""           # STRING Vide utilisee pour faire des comparaisons
space : " "       # STRING pour forcer un espace
sdcom   : "("         # STRING de debut de commentaire
sfcom   : ")"     # STRING de fin de commentaire
sg43 : "G43"      # STRING de prise de correction en Z
snomgroupe_op : ""       # STRING du nom du groupe d'operation
snomgroupe_op_old : ""   # STRING de l'ancien nom du groupe d'operation
smachine : ""        # STRING du nom de la machine
spalette : "PALETTE"  # STRING du nom palette
scomentsprog : ""        # STRING du commentaire pour le titre du sous prog
snom_nc : ""         # STRING de stockage du non du NC complet avec chemin et extesion style c:\cfao\prog-cn\TOTO.NC
snom_numero : ""     # STRING de stockage du non du NC sous forme O0123.nc avec chemin et extesion style c:\cfao\prog-cn\ous forme O0123.NC
spoint : "."      # STRING du POINT pour l'extesion (.NC)
stringo : ""         # STRING du O pour le non (O0123) en nom du Numero PRG
seditor : "notepad.exe"   # STRING du non de l'editeur pour les prog en nom du Numero PRG (avec chemenin complet si pas dans Windows)
sfileops : ""        # STRING du nom du fichier OPS
sops : ".ops"     # STRING de l'extention des fichier OPS
sfmax : "FMAX"        # STRING de la vitesse rapide
serreur2 : ""
#endregion
#region ----  MESSAGE ERREURE ----
serr0   : "err0"
serr1   : "ERREUR - LA FONCTION Ecriture de l'information CN d'operation DOIT ETRE VALIDE DANS LA DEFINITION D'ARMOIRE"
serr2   : "ERREUR - CE POST PRO NE SUPPORTE Q'UN SEUL AXE ROTATIF - VERIFIEZ LA DEF MACHINE ET LA COMBINAISON D'AXE"
serr3   : "ERREUR - CE POST PRO NE SUPPORTE Q'UNE SEULE COMBINAISON D'AXE PAR PROGRAMME - VERIFIEZ LA COMBINAISON D'AXE DES OPERATIONS"
serr4   : "CORRECTION SUR ARC DETECTEE - Verifiez les entrees/sorties de l'operation "
serr5   : "ERREUR - ORIGINE SUPERIEUR A 59 - Veuillez entrer une origine correct a votre plan"
serr6   : "ERREUR - ORIGINE DOIT ETRE DE 0 A 5 OU DE 54 A 59 - Veuillez entrer une origine correct a votre plan"
serr7   : "ERREUR - ORIGINE SUPERIEUR A 48 - Veuillez entrer une origine correct a votre plan"
serr8   : "ERREUR - UN PLAN N'EST PAS ALIGNE SUR X VEUILLEZ LE REDRESSER"
serr9     : "ERREUR - UN PLAN N'EST PAS ALIGNE SUR Y VEUILLEZ LE REDRESSER"
serreur : ""
fstrsel serr0 erreur serreur 10 -1

#endregion
#endregion
#region DEFINITION DES TABLEAUX DE CORRESPONDANCE fstrsel
# Gestion des string en mode fstrsel
#region --- Mode Absolue ou incremental ---
sinc00  : "G90"       # Mode Absolue
sinc01  : "G91"       # Mode incremental
sinc02     : ""
sinc_abs : ""
fstrsel sinc00 incremental sinc_abs 3 -1
#endregion

#region --- correction outil G41 G42 ---
sc00    : "G40"
sc01    : "G41"
sc02    : "G42"
scord : ""
fstrsel  sc00 cc_pos$ scord 3 -1
#endregion

#region ---G0 a G3 dans sgcode en fonction du GCODE --
sg00    : "G0"       # Rapide
sg01    : "G1"       # travail
sg02    : "G2"       # arc horaire
sg03    : "G3"       # arc trigo
sq04    : "G4"       # tempo
sg05    : "G80"          # annulation Cycle Fixes
sgcode : ""

fstrsel  sg00 gcode$ sgcode 6 -1
#endregion

#region ---- Affectation des plans d'usinage pour ---
spl00    : "G17"     # plan XY
spl01    : "G19"     # plan YZ
spl02    : "G18"     # plan XZ
spl03 : ""
splcode : ""

fstrsel  spl00 plane$ splcode 4 -1

#endregion
#region ----  Blocage deblocage 4 ieme Axe ----
sblo0 : ""          # pour pas de blocage ni deblocage
sblo1 : "M10"       # blocage axe A
sblo2 : "M11"       # deblocage axe A
sblo3 : ""            # pour Frein axe A
sbloque : ""

fstrsel sblo0 bloque sbloque 4 -1
#endregion

#region --- Rotation broche ---
sm00    : "M4"
sm01    : "M5"
sm02    : "M3"
sm03    : "M14"
sm04    : "M15"
sm05    : "M13"
sm06    : "M24"
sm07    : "M25"
sm08    : "M23"
sm09    : "M34"
sm10    : "M35"
sm11    : "M33"
spdlon : ""

spdlsel = fsg3(ss$)
#spdlsel = fsg3(ss)+(coolant*3)

fstrsel  sm00 spdlsel spdlon 12 -1
#endregion

#region ---   Types d'outils ---
stypT00 : "RIEN"
stypT01 : "FORET A CENTRER"
stypT02 : "FORET A NOYER"
stypT03 : "FORET"
stypT04 : "TARAUD A DROITE"
stypT05 : "TARAUD A GAUCHE"
stypT06 : "ALESOIR"
stypT07 : "BARRE D'ALESAGE"
stypT08 : "FRAISE A LAMER"
stypT09 : "FRAISE A EBAVURER"
stypT10 : "FRAISE 2 TAILLES"
stypT11 : "FRAISE BOULE"
stypT12 : "FRAISE A CHANFREINER"
stypT13 : "TOURTEAU"
stypT14 : "FRAISE 3 TAILLES"
stypT15 : "FRAISE A RAYON"
stypT16 : "FRAISE QUEUE D'ARONDE"
stypT17 : "FRAISE CONIQUE"
stypT18 : "FRAISE SPHERIQUE"
stypT19 : "FRAISE TORIQUE"
stypT20 : "SPECIAL"
stypT21 : "FRAISE A GRAVER"
stypT22 : "FORET A BOIS"
stypT23 : "FRAISE UGV"
stypT24 : "FRAISE A FILLETER"
stypT25 : "FRAISE TONNEAU"
stypT26 : "FRAISE DEPOUILLE"
stypT27 : "FRAISE LENTILLE"
stypT28 : "FRAISE LENTILLE TONNEAU"
stypT29 : "DIVERS"
stypeT : ""
fstrsel stypT00 paramT2 stypeT 30 -1

#   Matiere des outils
smatT0  : "ARS"
smatT1  : "ARS"
smatT2  : "CARBURE"
smatT3  : "CARBURE PLAQUETTES"
smatT4  : "CERAMIQUE"
smatT5  : "BORZON"
smatT6  : "BORZON"
smatT7  : "BORZON"
smatT8  : "BORZON"
smatT9  : "BORZON"
smatT10 : "INCONNU"
smatT : ""
fstrsel smatT0 paramT3 smatT 11 -1

#endregion

#region --- Table de l'affichage du type de corection ---

stc0   : "CORRECTION AUCUNE"
stc1   : "CORRECTION ARMOIRE DROITE"
stc2   : "CORRECTION ARMOIRE GAUCHE"
stc3   : "CORRECTION ORDINATEUR DROITE"
stc4   : "CORRECTION ORDINATEUR GAUCHE"
stc5   : "CORRECTION USURE DROITE"
stc6   : "CORRECTION USURE GAUCHE"
stc7   : "CORRECTION USURE INVERSE DROITE"
stc8   : "CORRECTION USURE INVERSE GAUCHE"

stype_comp : ""

fstrsel  stc0 type_comp stype_comp 9 -1
#endregion
#endregion
#region Tables de parametres
#
fprmtbl 2    1          # lecture des parametres de surep pour surfacage
        12068  surepl       # surep en Z

fprmtbl 1    2          # lecture des parametres de surep pour contour et 3D
        10010    surep      # surep R
        10068    surepl     # surep Z

fprmtbl 18000   4           # Lecture des Param de def armoire
        18171   write_ops   # Autoriser l'ecriture de l'information CN d'operation
        18458   texte       # Nombre de caracteres pour les commentaires
        18713   sous_prog_type  # type de merge des sous prog (0 apres prog principal 1 avant)
        18705   cor_arc     # compesation sur les arcs autorisee
#endregion
#region BLOCS DE PRE TRAITEMENT POST PRO


pinfos      # affichage d'infos

        #*tlchng_aft$, "--------------", e$
        #*workofs$, e$
        #*sub_trnstyp$, e$
        #*sub_trnmthd$, e$
        #*usecandrill$, e$
        #*usecanpeck$, e$
        #*usecanchip$, e$
        #*usecantap$, e$
        #*usecanbore1$, e$
        #*usecanbore2$, e$
        #*usecanmisc1$, e$
        #*usecanmisc2$, e$
        #*sous_prog_type, "----", e$


#
pprep$      # affectation des variables avant debut traitememt post pro

    #pdebug     # pour activer les infos de debug pst


    #seqmax$ = seqmax$ - 200        #  se reserver les 200 dernier numero de ligne pour faire les sous prog
    #debsousprog = seqmax$          # memo du num de premier sous prog
    rd_mch_ent_no$ = 0          # pour lire les infos de base de la machine
    rd_cd$                  # lire le control definition

    if write_ops = 0, erreur = 1        # Write NC Operation information MUST be enabled in CD
      !erreur
      !serreur

    if erreur <> 0,
      [
       result = mprint(serreur, 2)
       exitpost$
      ]
#endregion
#region BLOCS DE DEF MACHINE ET DEF ARMOIRE
#  Lecture des informations pour attribution de variable

pmachineinfo$    # lecture des parametre de def armoire et def machine
    #"-------------------pmachineinfo$", e$
    #~prmcode$, "=", sparameter$, e$        # pour afficher tous les parametres
    #if prmcode$ = 18171, *prmcode$, "ecriture ops =", sparameter$, e$
    #if prmcode$ = 18458, "nombre de caracteres de commentaire",  sparameter$, e$
    #if prmcode$ = 19958, *prmcode$, "type de composant", "=", sparameter$, e$  # type de composant 5 = axe rotatif
    #if prmcode$ = 17399, *prmcode$, "AXE DE L'AXE ROTATIF", "=", sparameter$, e$   # AXE ROTATIF - +X=1,+Y=2,+Z=3,-X=7,-Y=8,-Z=9
    #if prmcode$ = 17402, *prmcode$, "sens de laxe", "=", sparameter$, e$       # sens de l'axe rotatif 0=trigo 1=horaire
    #if prmcode$ = 17401, *prmcode$, "position 0", "=", sparameter$, e$         # Position angle 0 deg  +X=1,+Y=2,+Z=3,-X=7,-Y=8,-Z=9
    #if prmcode$ = 17398, *prmcode$, "=", sparameter$, e$
    #if prmcode$ = 17201, *prmcode$, "nom de l'element =", sparameter$, e$
    #if prmcode$ = 17696, *prmcode$, "nom de la combinaison =", sparameter$, e$
    #if prmcode$ = 17063, fmaxi = rpar(sparameter$, 1)           # avance maxi en G1
    #if prmcode$ = 17062, fmini = rpar(sparameter$, 1)           # avance mini en G1
    if prmcode$ >= 18000 & prmcode$ < 19000, result = fprm(18000)   #Lecture de la table de parametre Control Definition
    if prmcode$ = 17012, smachine = sparameter$                     # Nom de la machine
    if prmcode$ = 17201,    # nom du composant
      [
       if ucase(sparameter$) = spalette, palette = 1       # si c'est une palette, activer la gestion de palette
      ]
    if prmcode$ = 19958,    # type de composant pour voir si on a un axes rotatif
      [
       type_composant = rpar(sparameter$, 1)
       if type_composant = 5,    # si c'est un axe rotatif
         [
          useaxe = 1
          compt_axes_rot  = compt_axes_rot + 1            # compter le nombre d'axes rotatif
         ]
      ]
    if prmcode$ = 17399,    #AXE ROTATIF - +X=1,+Y=2,+Z=3,-X=7,-Y=8,-Z=9
      [
       diviseur = rpar(sparameter$, 1)
       if diviseur > 3, diviseur = diviseur - 6        #ne garder que x y z
      ]
    if prmcode$ = 17402,    # sens de l'axe rotatif 0=trigo 1=horaire
      [
       sens = rpar(sparameter$, 1)
       if sens = 0, sens = 1                   # variable sens pour le post pro
        else, sens = -1
      ]
    #if prmcode$ = 17598,     # nombre d'outils du changeur de la def machine
     # [
     #  nbroutil = rpar(sparameter$, 1)
     # ]
    if prmcode$ = 17397,      # Nom de l'axe rotatif (ABC)
      [
       srot_label = sparameter$
      ]

plireaxes    # Lecture des parametres de la combinaison d'axes uniquement
    #"plireaxes", syncaxis$, e$
    if syncaxis$ <> old_syncaxis,
      [
       compt_axes_rot = 0
       erreur = 0
      ]
    rd_mch_ent_no$ = syncaxis$      # pour avoir les infos de la conbinaison d'axe utilisee
    #rd_mch_ent_no$ = -2            # forcer la lecture de toute la def machine -1 que la combinaison d'axe -2 que la base machine 0
    #rd_cd$                 # lecture de la def armoire
    rd_md$                  # lecture de la def machine
    result = nwadrs(srot_label, axeA)   # affectation du nom de l'axe rotatif en ABS
    result = nwadrs(srot_label, axeAi)  # affectation du nom de l'axe rotatif en INC
    ptestmachine
    old_syncaxis = syncaxis$

#endregion
#region BLOCS DE LECTURE DES PARAMETRES
#
pparameter$  # lecture des parametres d'operation
    #"------------------------------------------------pparameter$", e$
    #~prmcode$, "=", sparameter$, e$                # pour afficher tous les parametres

    if opcode$ <> 19, result = fprm (1)                 # lecture des parametres de surep pour surfacage
    if opcode$ = 19, result = fprm (2)                  # lecture des parametres de surep pour contour et 3D

    if prmcode$ = 20004, paramT1 = rpar(sparameter$, 16)        # lecture des parametres d'outil
    if prmcode$ = 20018, snomgroupe_op = ucase (sparameter$)    # Lecture du nom de groupe d'usinage
    if prmcode$ = 15166, num_origine =  rpar(sparameter$,1)         # Lecture de l'origine
    #if prmcode$ = 15166,  "--------------15166--------------", sparameter$, e$
    #if prmcode$ = 15181,  "--------------15181--------------", sparameter$, e$
    #if prmcode$ = 15370,  "--------------15370--------------", sparameter$, e$
    #if prmcode$ = 15239, sparameter$, e$
    #workofs, e$

fmt "Nb origine" 5 nb_ori
fmt "old_num_origine" 5 old_num_origine
old_num_origine : 0
nb_ori : 0


pwrttparam$  # lecture des parametres d'outils
    #*nbr_combi, "-------------pwrttparam--------", e$
    if syncaxis$ <> old_syncaxis, nbr_combi = nbr_combi + 1
    old_syncaxis = syncaxis$
    if prmcode$ = 15166, num_origine =  rpar(sparameter$,1)  # Lecture origine
    if num_origine <> old_num_origine, nb_ori = nb_ori + 1
    old_num_origine = num_origine




    #~prmcode$, "=", sparameter$, e$        # pour afficher tous les parametres
    #workofs, e$
    if prmcode$ = 20004, paramT1 = rpar(sparameter$, 16)

#endregion
#region BLOCS DE TRAITEMENT DES SOUS PROGRAME

#region --- sous prog en Z ---
psub_call_s$       # appel sous prog en Z

    #"--------appel sous prog en Z---------", *sub_sec_no$, e$
    !sub_prg_no$                # mise a jour du numero interne de sous prog en Z
    subprognum = debsousprog + sub_prg_no$  # affectation du numero de sous prog en Z
    nprincipal = n$  + seqinc$      # memo du numero de ligne pour le rappel dans le sous-programme
    # if sub_sec_no$ > 1 | sub_sec_no$ < 1,   [    # call suivant
    #*nprincipal, e$            # affecation du parametre CN pour memo du numero de ligne
    n$, "M98", subprognum, e$       # appel du sous prog
    #  ]
    nprincipal = n$             # memo du numero de ligne pour le prog principal

psub_st_s$    # ecriture de l'entete de sous prog en Z

    !sub_prg_no$                # mise a jour du numero interne de sous prog en Z
    numsubprog = debsousprog + sub_prg_no$  # affectation du numero de sous prog en Z
    nomsubprog = numsubprog                 # affectation du nom de sous prog en Z
    memo_incremental = incremental          # memorisation du mode ABS INC Actuel
    incremental = sub_inc$                    # Sous prog en incremental ou absolue
    if incremental = 1, p_casse_modalite    # casser la modalite xyz pour les sous prog en relatif
    p_casse_modalite_avance                    # casser la modalite le l'avance pour les sous prog
    if numsprog = 0, omitseq$ = 1       # pas du numero de ligne pour les sous prog
      if texte <> 0,           # entete avec commentaires
        [
         if scomentsprog <> svide, *numsubprog, sdcom, spaces$ = 0, scomentsprog, sfcom, spaces$ = old_spaces, e$
          else, *numsubprog, e$
        ]
       else,       # entete sans commentaires
         [
          *numsubprog,  e$
         ]
      n$, *sinc_abs, e$                 # ecrire si sous prog en ABS ou INC
      gcode$ = 5      # pour forcer l'ecriture de code G du premier bloc du sous prog
      !gcode$

psub_end_s$    # fin sous prog en Z

    incremental = 0             # rappel du mode INC ABS precedent
    n$, *sinc_abs, e$
    #n, "M99", "P#100", e$      # fermeture de sous prog
    n$, "M99", e$               # fermeture de sous prog
    space, e$                   # sauter une ligne
    # omitseq$ = old_omitseq
    n$ = nprincipal             # recuperation du numero de ligne pour prog principal

#endregion

#region ---DES SOUS PROG EN TRANSFORMER ---

pmirroir    # pour usinage transformer en mirroir
            "Mirroir"
protation    # pour usinage transformer en rotation
            "rotation"
pechelle    # pour usinage transformer en echelle
            "Echelle"

ptranslation    # pour usinage transformer en translation

    #n$, "-------------------------------------", *sub_trnmthd$, e$
    if sub_trnmthd$ = 2,    # translation en coordonnees
      [
       n$, "(translate  coordinate)", e$
       prapid$
      ]
    if sub_trnmthd$ = 1,    # translation de l'origine du plan uniquement
      [
       n$, "(translate tool plane origine only)", e$
       memo_incremental = incremental
       incremental = 0
       decX = sub_trnsx$
       decY = sub_trnsy$
       decZ = sub_trnsz$
       if decX <> 0 | decY <> 0 | decZ <> 0,
         [
          if decalage = 1, panulldecalageg52              # annuler les decalages d'origine
          decX = sub_trnsx$
          decY = sub_trnsy$
          decZ = sub_trnsz$
          n$, sinc_abs, "G52", *decX, *decY, *decZ, e$            # ecriture des valeur de decalage d'origine
          decalage = 1                            # memo de mise en place de decalage pour l'annuler
          p_casse_modalite                # pour forcer le rappel des coordonees apres changement d'origine
          prapid$
         ]
       incremental= memo_incremental
       n$, sinc_abs, e$
      ]
    if sub_trnmthd$ = 0,
      [              # translation du plan d'usinage uniquement
       n$, "(translate tool plane ----> must use new workofs$)", e$
       poriusi
       #p_casse_modalite               # pour forcer le rappel des coordonees apres changement d'origine
       prapid$
      ]

psub_call_mm$     # appel sous prog en transformation pour outils multiples

    #"appel sous prog en transformation pour outils multiples", e
    !main_prg_no$                    # mise a jour du numero interne de sous prog en transformation pour outils multiples
    subprognum = debsousprog + main_prg_no$ +100   # affectation du numero de sous prog
    if sub_trnstyp$ = 0, pmirroir       # si on fait du mirroir
    if sub_trnstyp$ = 1, protation      # si on fait de la rotation
    if sub_trnstyp$ = 2, pechelle       # si on fait de l'echelle
    if sub_trnstyp$ = 3, ptranslation       # si on fait de la translation aller avant dans bloc ecriture decalage orignie
    nprincipal = n$  + seqinc$      # memo du numero de ligne pour le rappel dans le sous-programme
    #*nprincipal, e$            # affecation du parametre CN pour memo du numero de ligne
    n$, "M98", subprognum, e$       # appel du sous prog
    nprincipal = n$             # memo du numero de ligne pour le prog principal
    # n, "(PASSE ", sub_sec_no, "SUR ", sub_totl_no, ")", e
    #  "Subprogram number ", sub_op_id, e
    #  "Actual operation ID", sub_grp_id, e
    #  "Transform/non-transform indicator", sub_ref_id, e
    #  "Iteration counter", sub_sec_no, e
    #  "Total number of instances", sub_totl_no, e

psub_call_m$   # appel sous prog en transformation pour outil unique

    # "appel sous prog en transformation pour outil unique", e$
    #main_prg_no$, sub_prg_no$, sub_ref_id$, sub_op_id$, sub_grp_id$, sub_trns_id$, sub_sec_no$, sub_totl_no$, sub_chn_no$, sub_inc$, e
    #*main_prg_no$, e
    !main_prg_no$               # mise a jour du numero interne de sous prog en transformation pour outils multiples
    subprognum = debsousprog + main_prg_no$ +100   # affectation du numero de sous prog
    if sub_trnstyp$ = 0, pmirroir       # si on fait du mirroir
    if sub_trnstyp$ = 1, protation      # si on fait de la rotation
    if sub_trnstyp$ = 2, pechelle       # si on fait de l'echelle
    if sub_trnstyp$ = 3, ptranslation   # si on fait de la translation aller avant dans bloc ecriture decalage orignie
    nprincipal = n$  + seqinc$      # memo du numero de ligne pour le rappel dans le sous-programme
    #*nprincipal, e$            # affecation du parametre CN pour memo du numero de ligne
    n$, "M98", subprognum, e$       # appel du sous prog
    nprincipal = n$             # memo du numero de ligne pour le prog principal
    # n, "(PASSE ", sub_sec_no, "SUR ", sub_totl_no, ")", e
    #  "Subprogram number ", sub_op_id, e
    #  "Actual operation ID", sub_grp_id, e
    #  "Transform/non-transform indicator", sub_ref_id, e
    #  "Iteration counter", sub_sec_no, e
    #  "Total number of instances", sub_totl_no, e

psub_end_m_r$    # bloc system non explique dans doc des PST (a voir)

    #"-------------------------------------------", "psub_end_m_r$", "******",*incremental, e$ e$

psub_st_m$    # entete sous prog en transformation

    !main_prg_no$                   # mise a jour du numero interne de sous prog en transformation pour outils multiples
    numsubprog = debsousprog + main_prg_no$ +100    # affectation du numero de sous prog
    nomsubprog = numsubprog                 # affectation du nom de sous prog en Z
    memo_incremental = incremental          # memorisation du mode ABS INC Actuel
    incremental = sub_inc$          # Sous prog en incremental ou absolue
    if incremental = 1, p_casse_modalite    # casser la modalite pour les sous prog en relatif
    p_casse_modalite_avance         # casser la modalite le l'avance pour les sous prog
    if numsprog = 0, omitseq$ = 1       # pas du numero de ligne pour les sous prog
    if texte <> 0,   # entete avec commentaires
      [
       if scomentsprog <> svide, *numsubprog, sdcom, spaces$ = 0, scomentsprog, sfcom, spaces$ = old_spaces, e$
        else, *numsubprog, e$
      ]
    else,       # entete sans commentaires
      [
       *numsubprog,  e$
      ]
    n$, *sinc_abs, e$           # ecrire si sous prog en ABS ou INC
    gcode$ = 5              # pour forcer l'ecriture de code G du premier bloc du sous prog
    !gcode$
    #sub_op_id, sub_prg_no, e

psub_end_m$   # fin sous prog en transformation

    incremental = 0         # rappel du mode INC ABS precedent
    n$, *sinc_abs, e$
    #n, "M99", "P#100", e$              # fermeture de sous prog
    n$, "M99", e$                   # fermeture de sous prog
    space, e$                   # sauter une ligne
    omitseq$ = old_omitseq
    n$ = nprincipal                 # recuperation du numero de ligne pour prog principal

#endregion
#endregion
#region GESTION DES COMMENTAIRES
#
pcomment$   # Gestion des commentaires dans le prog

    if entete = 0, pcomment2   # commentaires des usinages
    else, pcomment3             # commentaires d'entete de prog

pcomment_end$   # post traitement des commentaires

    if entete = 1, comm_cnt$ = old_comm_cnt         # pour pouvoir relire les commentaires apres appel de comment dans pheader

pcomment2       #Affichage des commentaire des usinages

    scomm$ = ucase (scomm$)                             # focer en majuscules
    scomentsprog = svide                                # mise a zero du commentaire de sous prog
    if texte <> 0,
      [
       if numcoment = 0, omitseq$ = 1                      # si pas de numero de bloc pour commentaires enlever les numeros de bloc
       if debut = 1,
         [
          # if gcode$ = 1051, n$, sdcom, spaces$ = 0, scomm$, sfcom, spaces$ = old_spaces, e$         # Nom Machine
          if gcode$ = 1053, n$, sdcom, spaces$ = 0, scomm$, sfcom, spaces$ = old_spaces, e$               # Nom du Groupe Machine
          if gcode$ = 1052, n$, sdcom, spaces$ = 0, scomm$, sfcom, spaces$ = old_spaces, e$               # Commentaire de groupe Machine
          # if gcode$ = 1054, n$, sdcom, spaces$ = 0, scomm$, sfcom, spaces$ = old_spaces, e$              # Descripteur de fichier
         ]
       if gcode$ = 1005, n$, sdcom, spaces$ = 0, scomm$, sfcom, spaces$ = old_spaces, e$               # Usinage commentaire - en commentaire
       if gcode$ = 1007, n$, sdcom, spaces$ = 0, scomm$, sfcom, spaces$ = old_spaces               # Entree Manuelle - en commentaire avec le mouvement sans e$
       if gcode$ = 1008, n$, sdcom, spaces$ = 0, scomm$, sfcom, spaces$ = old_spaces, e$               # Commentaire d'operation
       if gcode$ = 1008, scomentsprog = scomm$
       omitseq$ = old_omitseq                          # rappel des numero de bloc
      ]
    if gcode$ = 1006, n$, scomm$, e$                        # Usinage commentaire - en code
    if gcode$ = 1026, scomm$                            # Entree Manuelle - en code avec le mouvement sans e$

pcomment3   # Affichage des commentaires d'entete de prog

    if gcode$ = 1054,
      [
       scomm$ = ucase (scomm$)
       n$, sdcom, spaces$ = 0, scomm$, sfcom, spaces$ = old_spaces, e$                 # Descripteur de fichier
      ]
    old_comm_cnt = comm_cnt$

pnomgroupe  # Affichage du nom du groupe d'operation

    if snomgroupe_op <> svide & texte <> 0 & snomgroupe_op <> snomgroupe_op_old & info_groupe = 1,
      [
       if numcoment = 0, omitseq$ = 1                      # si pas de numero de bloc pour commentaires enlever les numeros de bloc
       n$, sdcom, spaces$ = 0, "*", snomgroupe_op, "*", sfcom, spaces$ = old_spaces, e$                # nom du groupe d'operation
       space, e$
       omitseq$ = old_omitseq                          # rappel des numero de bloc
       snomgroupe_op_old = snomgroupe_op                   # memo du nom du groupe d'operation
      ]

pnumop      # numerotation des operations post-processees

    if op_id$ <> old_op_id, numop = numop + 1

#endregion
#region 4 axes
#region --- 4 Axes continue en fonctions 5 Axes ---
#
paxeA        # Affichage de l'axe A
    nbrtour = int (axeA / 360) * sens
    if incremental = 0, axeA, !axeAi
    if incremental = 1, !axeA, axeAi
    old_axeA = axeA

pcalculpmx      # Calcul de l'axe A x y z

    vx = u$ - x$
    vy = v$ - y$
    vz = w$ - z$
    if diviseur = 1, axeA1 = atan2(vy,vz) # on tourne autour de x
    if diviseur = 2, axeA1 = atan2(vx,vz) # on tourne autour de Y
    if axeA1 >  180, axeA2 = 360 - axeA1
    if axeA1 <= 180, axeA2 = axeA1 * -1
    delta_axeA1 = axeA1 - old_axeA1
    if delta_axeA1 >  180, delta_axeA1 = delta_axeA1 - 360
    if delta_axeA1 <  -180,delta_axeA1 = delta_axeA1 + 360
    axeA1_dep = axeA1_dep + delta_axeA1
    old_axeA1 = axeA1
    axeA = axeA1_dep * sens
    if diviseur = 1,      # on tourne autour de x
      [
       xabs = x$
       yabs = z$*sin(axeA2) + y$*cos(axeA2)
       zabs = z$*cos(axeA2) - y$*sin(axeA2)
      ]
    if diviseur = 2,      # on tourne autour de Y
      [
       xabs = z$*sin(axeA2) + x$*cos(axeA2)
       yabs = y$
       zabs = z$*cos(axeA2) - x$*sin(axeA2)
      ]

pmx0$       # pre output pmx

    if fr$ = -2, gcode$ = 0
    else, gcode$ = 1
    pcalculpmx

pmx$        # Gestion 4 axes continue avec fonction 5 axes

       #" pmx1 mouvement 5axes"
    # premier mouvement
    if debutpmx = 1, pmx_2
    # corp de l'iso
    if debutpmx = 0,
      [
       if gcode$ = 1,
         [
          @xabs, @yabs, @old_x, @old_y, @axeA, @old_axeA
          if cc_pos$ <> 0, n$, correcteur_D, e$
          if xabs <> old_x | yabs <> old_y | axeA <> old_axeA, n$, sinc_abs, poriusinul, pcord, sgcode, pxyz, paxeA, pfr, e$
          else, n$, sinc_abs, poriusinul, sgcode, pxyz, paxeA, pfr, e$
         ]
       if gcode$ = 0, n$, sinc_abs, sgcode, pxyz, paxeA, pfr, e$
      ]
    old_x = xabs
    old_y = yabs
    old_z = zabs

pmx_2

    #" pmx2", e$
    if debutpmx = 1,
      [
       bloque = 2
       if use_bloque = 0, bloque = 0
       n$, sbloque, e$
       gcode$ = 0
       n$, sinc_abs, *sgcode, poriusi, *xabs, *yabs, paxeA, e$
       n$, sinc_abs, sgcode, sg43, *zabs, *correcteur_H, plubrifon, e$
       !x$, !y$, !z$, !xr$, !yr$, !zr$
       p_modal
       old_correcteur_H = correcteur_H     # memo du correcteur de longeur
       debutpmx = 0
      ]

pmx_end$

#endregion
#region --- 4 Axes continue en substitution d'axe ---

plinarc  # Convertir les G2 G3 en G1

    linarc$ = 1
    if tolquestion <> 1, q21
    tolquestion = 1

p_Apos  # calcul de l'axe A en substitution

    @x$, @y$
    if diviseur = 1, axeA = (y$ * 360 / (pi$ * rotdia$)) * sens   # pour 4eme axe autour de X (substituer Y)
    if diviseur = 2, axeA = (x$ * 360 / (pi$ * rotdia$)) * sens   # pour 4eme axe autour de Y (substituer X)
    p_zdev          # calcul du Z en substitution

p_zdev  # calcul du Z en substitution

    @z$, @rotdia$
    zabs  = z$ +(rotdia$ /2)    # Z pour continue substitutuion en ABS

p_Apos_affiche  # affichage de l'angle au chg outil nul pour continue

    if useaxe <> 0,
      [
       @old_axeA, @axeA
       epsi = old_axeA - axeA
       epsi = abs(epsi)
       #"---------p_Apos_affiche-------", eÂ£
       if epsi <> 0,
         [
          pdegage4axes, e$
          bloque = 2
          if use_bloque = 0, bloque = 0
          n$, sbloque, e$
          if incremental = 0, n$, sgcode, sinc_abs, poriusi, *axeA, !axeAi, sbloque, e$
          else, n$, sgcode, sinc_abs, poriusi, !axeA, *axeAi, sbloque, e$
         ]
      ]
    old_axeA = axeA

#endregion
#region ---- 4 Axes positionne ----
prot$    # gcode ou on affiche la matrice 1014
prot1   # calcul de l'axe A en positionne
        #" voir la matrice:", *m1$,*m2$,*m3$,*m4$,*m5$,*m6$,*m7$,*m8$,*m9$,e$

    @old_axeA, @nbrtour
    if diviseur = 1, axeA = atan2(m8$,m9$) + (360 * nbrtour)    # pour diviseur tourne autour de X
    if diviseur = 2, axeA = atan2(m7$,m9$) + (360 * nbrtour)    # pour diviseur tourne autour de Y
    if diviseur = 1 & m1$ <> 1 , erreur = 8, perreur
    if diviseur = 2 & m5$ <> 1 , erreur = 9, perreur


    axeA = axeA * sens                      # prise en compte du sens de rotation
    epsi = axeA - old_axeA                      # variation angulaire
    sensA = 0
    if epsi > 0, sensA = 1                      # sens de la variation
    if epsi < 0, sensA =  -1
    epsi = abs(epsi)
    @epsi, @sensA                           # mise a jour
    if epsi > 180,      # optimisation de l'angle
      [
       axeA = axeA - (360 * sensA)
       epsi = axeA - old_axeA
       sensA = 0
       if epsi > 0, sensA = 1
       if epsi < 0, sensA = -1
      ]
    nbrtour = int (axeA / 360)                  # Calcul du nombre de tour
    #"----prot1-----valeur corigee------", *diviseur, *old_axeA, *axeA,*epsi,*sensA,*nbrtour,  e

prot2   # affichage de l'angle au chg outil pour positionne

    if useaxe <> 0,     # afficher les angle que si machine avec Axe A
      [
       @old_axeA, @axeA        # mise a jour
       epsi = old_axeA - axeA  # regarder si on tourne
       epsi = abs(epsi)
       if epsi <> 0,    # si ca tourne
         [
          bloque = 2          # deblocage de l'axe A
          if use_bloque = 0, bloque = 0
          n$, sbloque, e$
          if mi2$ = 0, bloque = 1         # preparer le blocage de l'axe A
          if use_bloque = 0, bloque = 0
          if incremental = 0, n$, sgcode, sinc_abs, poriusi, *axeA, !axeAi, e$
          else, n$, sgcode, sinc_abs, poriusi, !axeA, *axeAi, e$
          n$, sbloque, e$     # bloquer l'axe A
          ]
      ]
    old_axeA = axeA         # memo de la position de l'axe A affiche

prot3   # affichage de l'angle au chg outil nul pour positionne

    gcode$ = 0
    if useaxe <> 0,     # afficher les angle que si machine avec Axe A
      [
       @old_axeA, @axeA               # mise a jour
       epsi = old_axeA - axeA  # regarder si on tourne
       epsi = abs(epsi)
       if epsi <> 0,    # si ca tourne
         [
          xabs = x$           # reprendre les positions xyz avant le degagement
          yabs = y$
          zabs = z$
          pdegage4axes        # Degagement machine avant la rotation de l'axe A
          bloque = 2          # deblocage de l'axe A
          if use_bloque = 0, bloque = 0
          n$, sbloque, e$
          if mi2$ = 0, bloque = 1         # preparer le blocage de l'axe A
          if use_bloque = 0, bloque = 0
          if incremental = 0, n$, sgcode, sinc_abs, poriusinul, *axeA, !axeAi, e$
          else, n$, sgcode, sinc_abs, poriusinul, !axeA, *axeAi, e$
          n$, sbloque, e$     # bloquer l'axe A
          if incremental = 0,      # Rappel des positions XYZ avant le degagement
            [
             n$, sgcode, sinc_abs, xabs, yabs, e$
             n$, sgcode, zabs, e$
            ]
         ]
      ]
    old_axeA = axeA         # memo de la position de l'axe A affiche

#endregion
#endregion
#region Gestion de la valeur de l'avance
#
pfr     # avance travail
    if gcode$ <> 0, # Avance travail
      [
       avance = fr_pos$    # affectation de l'avance
       avance
       ]
    if gcode$ = 0,  # Avance rapide
      [
       # Avance rapide
      ]

pavanceperce    # Avance en percage
    p_casse_modalite_avance             # pour forcer l'affichage de l'avance
    pfr                     # Affichage de l'avance

#endregion
#region STOP et STOP OPTION
sstop : "M00 : STOP "
sstop_option : "M01  : STOP OPTIONNEL "


pstop #  Gestion des M0 ou M01
    if cstop$ , n$, sstop, e$
    if cgstop$ , n$, sstop_option, e$
#endregion
#region Gestion de la correction outil et du numero de corecteur
#
pcorh       # Correction de longueur

    if correcteur_H <> old_correcteur_H, sg43, *correcteur_H
    old_correcteur_H = correcteur_H

pcord_old

    if opcode$ < 16 | opcode$ > 18,
      [
       if cc$ = 140, cc$ = 40
       if cc$ <> 0, scord
      ]
    else,
      [
       if cend$ = 1 & cc_pos$ <> 0, cc$ = 40
       if cc$ <> 0, scord
       cc$ = 0
      ]

pcord  #   Gestion de la correction outil G41 et G42 et du numero de correcteur D

    if opcode$ < 16 | opcode$ > 18,
      [   # pour 3 axes
       if cc$ = 140, cc$ = 40
       if cc$ <> 0, scord
      ]
    else,
      [                 # pour 4 axes pmx
       if cend$ = 1 & cc_pos$ <> 0, cc$ = 40
       if cc$ <> 0, scord
       cc$ = 0
      ]
    if cc$ <> 0, if gcode$ = 2 | gcode$ =3, if cor_arc = 0, erreur = 4, perreur

pcancelcc$  # Annulation de correction de rayon

#endregion
#region Gestion lubriffication
#Lubification classique
plubrifon

    if cant_val1$ <> 0, e$,  plubrifon_VX_select # on est en mode complexe
    else, # on est en mode classique
        [
        lubrif = coolant$
        if lubrif = 1, "M8"
        if lubrif = 2, "M8"
        if lubrif = 3, "M8"
        ]

plubrifoff
    if lubrif_complex_on = 1, plubrifon_VX_off   # on arrette tout les arrosages
    if lubrif > 0, n$, "M9"

#Lubrification complexe

fmt "Valeur cant=" 5 cant_val1$
fmt "Valeur cant=" 5 cant_val2$
fmt "Valeur cant=" 5 cant_val3$
fmt "Valeur cant=" 5 cant_val4$
fmt "Valeur cant=" 5 cant_val5$
fmt "Valeur cant=" 5 cant_val6$
fmt "Valeur cant=" 5 cant_val7$
fmt "Valeur cant=" 5 cant_val8$
fmt "Valeur cant=" 5 cant_val9$
fmt "Valeur cant=" 5 cant_val10$


fmt "lubrif_complex_on =" 5 lubrif_complex_on
fmt "Valeur lub comp=" 5 lubrif_complex

fmt "lubrif_50=" 5 lubrif_50
fmt "lubrif_51=" 5 lubrif_51
fmt "lubrif_52=" 5 lubrif_52
fmt "lubrif_53=" 5 lubrif_53
fmt "lubrif_54=" 5 lubrif_54
fmt "lubrif_55=" 5 lubrif_55
fmt "lubrif_56=" 5 lubrif_56
fmt "lubrif_57=" 5 lubrif_57
fmt "lubrif_58=" 5 lubrif_58
fmt "lubrif_59=" 5 lubrif_59
fmt "lubrif_60=" 5 lubrif_60
fmt "lubrif_61=" 5 lubrif_61
fmt "lubrif_62=" 5 lubrif_62
fmt "lubrif_63=" 5 lubrif_63
fmt "lubrif_64=" 5 lubrif_64
fmt "lubrif_65=" 5 lubrif_65
fmt "lubrif_66=" 5 lubrif_66
fmt "lubrif_67=" 5 lubrif_67
fmt "lubrif_68=" 5 lubrif_68
fmt "lubrif_69=" 5 lubrif_69


#Zone pour ecrire les correspondance marche arret des arrosage
slubrif_50 : "M8"
slubrif_51 : "M9"
slubrif_52 : "M7"
slubrif_53 : "M9"
slubrif_54 : "M51"
slubrif_55 : "M52"
slubrif_56 : "M53"
slubrif_57 : "M54"
slubrif_58 : "M102"
slubrif_59 : "M103"
slubrif_60 : " on option 6"
slubrif_61 : " off option 6"
slubrif_62 : " on option 7"
slubrif_63 : " off option 7"
slubrif_64 : " on option 8"
slubrif_65 : " off option 8"
slubrif_66 : " on option 9"
slubrif_67 : " off option 9"
slubrif_68 : " on option 10"
slubrif_69 : " off option 10"


plubrifon_VX   # gestion des commande complexe
                # ecriture premiere valeur
                if lubrif_complex = 50, lubrif_50 = 1, n$, slubrif_50, e$
                if lubrif_complex = 51, lubrif_51 = 1, n$, slubrif_51, e$ , lubrif_50 = 0
                if lubrif_complex = 52, lubrif_52 = 1, n$, slubrif_52, e$
                if lubrif_complex = 53, lubrif_53 = 1, n$, slubrif_53, e$ , lubrif_52 = 0
                if lubrif_complex = 54, lubrif_54 = 1, n$, slubrif_54, e$
                if lubrif_complex = 55, lubrif_55 = 1, n$, slubrif_55, e$ , lubrif_54 = 0
                if lubrif_complex = 56, lubrif_56 = 1, n$, slubrif_56, e$
                if lubrif_complex = 57, lubrif_57 = 1, n$, slubrif_57, e$ , lubrif_56 = 0
                if lubrif_complex = 58, lubrif_58 = 1, n$, slubrif_58, e$
                if lubrif_complex = 59, lubrif_59 = 1, n$, slubrif_59, e$ , lubrif_58 = 0
                if lubrif_complex = 60, lubrif_60 = 1, n$, slubrif_60, e$
                if lubrif_complex = 61, lubrif_61 = 1, n$, slubrif_61, e$ , lubrif_60 = 0
                if lubrif_complex = 62, lubrif_62 = 1, n$, slubrif_62, e$
                if lubrif_complex = 63, lubrif_63 = 1, n$, slubrif_63, e$ , lubrif_62 = 0
                if lubrif_complex = 64, lubrif_64 = 1, n$, slubrif_64, e$
                if lubrif_complex = 65, lubrif_65 = 1, n$, slubrif_65, e$ , lubrif_64 = 0
                if lubrif_complex = 66, lubrif_66 = 1, n$, slubrif_66, e$
                if lubrif_complex = 67, lubrif_67 = 1, n$, slubrif_67, e$ , lubrif_66 = 0
                if lubrif_complex = 68, lubrif_68 = 1, n$, slubrif_68, e$
                if lubrif_complex = 69, lubrif_69 = 1, n$, slubrif_69, e$ , lubrif_68 = 0
                lubrif_complex_on = 1


plubrifon_VX_select   # gestion des commande complexe
                if cant_val1$, lubrif_complex = cant_val1$, plubrifon_VX
                if cant_val2$, lubrif_complex = cant_val2$, plubrifon_VX
                if cant_val3$, lubrif_complex = cant_val3$, plubrifon_VX
                if cant_val4$, lubrif_complex = cant_val4$, plubrifon_VX
                if cant_val5$, lubrif_complex = cant_val5$, plubrifon_VX
                if cant_val6$, lubrif_complex = cant_val6$, plubrifon_VX
                if cant_val7$, lubrif_complex = cant_val7$, plubrifon_VX
                if cant_val8$, lubrif_complex = cant_val8$, plubrifon_VX
                if cant_val9$, lubrif_complex = cant_val9$, plubrifon_VX
                if cant_val10$, lubrif_complex = cant_val10$, plubrifon_VX


plubrifon_VX_off       # on arrete les arrosages
                # ajouter les lubrif_xx a razer commun en plus sur les lignes
                if lubrif_50 = 1, n$, slubrif_51, e$ , lubrif_50 = 0, lubrif_52 = 0
                if lubrif_52 = 1, n$, slubrif_53, e$ , lubrif_52 = 0, lubrif_50 = 0
                if lubrif_54 = 1, n$, slubrif_55, e$ , lubrif_54 = 0
                if lubrif_56 = 1, n$, slubrif_57, e$ , lubrif_56 = 0
                if lubrif_58 = 1, n$, slubrif_59, e$ , lubrif_58 = 0
                if lubrif_60 = 1, n$, slubrif_61, e$ , lubrif_60 = 0
                if lubrif_62 = 1, n$, slubrif_63, e$ , lubrif_62 = 0
                if lubrif_64 = 1, n$, slubrif_65, e$ , lubrif_64 = 0
                if lubrif_66 = 1, n$, slubrif_67, e$ , lubrif_66 = 0
                if lubrif_68 = 1, n$, slubrif_69, e$ , lubrif_68 = 0
                lubrif_complex_on = 0


#endregion
#region Initialisation de la machine
pintcn  #   Initialisation de la machine

    gcode$ = 0
    n$, *sgcode, *sinc_abs, "G40", "G80", "G98", "G17", e$      # init CN
    space, e$                           # Sauter une ligne

#endregion
#region Gestion des degagements
#region ---- Degagement au debut ----
pdegage_debut       #   Gestion du degagement de la machine au debut de prog

    if deg_debut <> 0,
      [
       memo_gcode = gcode$         # memo du gcode precedent
       gcode$ = 0              # Degagement en Rapide
       @incremental
       memo_incremental = incremental      # memo du mode actuel G90 G91
       incremental = inc_degage        # passage en mode 90 ou 91 pour degagement
       if deg_debut >= 1,
         [
          # si degager en Z choix 1
          if sdegageZ <> svide, n$, sgcode, sinc_abs, smodedeg, sdegageZ, e$  # degager en Z
         ]

       if deg_debut = 2 | deg_debut = 4,
         [
          # si degager en Z et X choix 2 et 4
          if sdegageX <> svide, n$, sgcode, sinc_abs, smodedeg, sdegageX, e$  # degager en X
         ]

       if deg_debut = 3 | deg_debut = 4,
         [
          # si degager en Z et Y
          if sdegageY <> svide, n$, sgcode, sinc_abs, smodedeg, sdegageY, e$  # degager en Y
         ]

       if deg_debut = 5,
         [
          # si degager en Z et XY
          if sdegageX <> svide & sdegageY <> svide, n$, sgcode, sinc_abs, smodedeg, sdegageX, sdegageY, e$    # degager en X Y
         ]
       if deg_debut = 6,
         [
          # si degager en Z et Y et X
          if sdegageY <> svide, n$, sgcode, sinc_abs, smodedeg, sdegageY, e$  # degager en Y
          if sdegageX <> svide, n$, sgcode, sinc_abs, smodedeg, sdegageX, e$  # degager en X
         ]
      if deg_debut = 7,
         [
          # si macro de degagement
          if sdeg_debut <> svide, n$, sdeg_debut, e$
         ]

       gcode$ = memo_gcode         # rappel du gcode precedent
       incremental = memo_incremental                                                                  # Rappel du mode actuel G90 G91
       # @incremental                                                                                   # mise a jour
       # if sdegageZ <> svide | sdegageX <> svide | sdegageY <> svide, n$, sinc_abs, e$
       # !incremental
      ]
#endregion
#region ---- Degagement avant appel outil ---
#
pdegage     #   Gestion du degagement de la machine avant appel outil

    if deg_outil <> 0,
      [
       memo_gcode = gcode$         # memo du gcode precedent
       gcode$ = 0              # Degagement en Rapide
       @incremental
       memo_incremental = incremental      # memo du mode actuel G90 G91
       incremental = inc_degage        # passage en mode 90 ou 90 pour degagement
       if deg_outil >= 1,
         [
          # si degager en Z
          if sdegageZ <> svide, n$, sgcode, sinc_abs, smodedeg, sdegageZ, e$  # degager en Z
         ]
       if deg_outil = 2 | deg_outil = 4,
         [
          # si degager en Z et X
          if sdegageX <> svide, n$, sgcode, sinc_abs, smodedeg, sdegageX, e$  # degager en X
         ]
       if deg_outil = 3 | deg_outil = 4,
         [
          # si degager en Z et Y
          if sdegageX <> svide, n$, sgcode, sinc_abs, smodedeg, sdegageY, e$  # degager en Y
         ]
       if deg_outil = 5,
         [
          # si degager en Z etXY
          if sdegageX <> svide & sdegageY <> svide, n$, sgcode, sinc_abs, smodedeg, sdegageX, sdegageY, e$
          # degager en X Y
         ]
       if deg_outil = 6,
         [
          # si degager en Z et Y et X
          if sdegageY <> svide, n$, sgcode, sinc_abs, smodedeg, sdegageY, e$  # degager en Y
          if sdegageX <> svide, n$, sgcode, sinc_abs, smodedeg, sdegageX, e$  # degager en X
         ]
      if deg_outil = 7,
         [
          # si macro de degagement
          if sdeg_outil <> svide, n$, sdeg_outil, e$
         ]
       gcode$ = memo_gcode         # rappel du gcode precedent
       incremental = memo_incremental                                                                  # Rappel du mode actuel G90 G91
       #@incremental                                                                                   # mise a jour
       #if sdegageZ <> svide | sdegageX <> svide | sdegageY <> svide, n$, sinc_abs, e$
       #!incremental
      ]

#endregion
#region ---- Degagement fin de prog ----
#
pdegage_fin #   Gestion du degagement de la machine fin de prog

    if deg_fin <> 0,
      [
       memo_gcode = gcode$         # memo du gcode precedent
       gcode$ = 0              # Degagement en Rapide
       @incremental                # mise a jour
       memo_incremental = incremental          # memo du mode actuel G90 G91
       incremental = inc_degage        # passage en mode 90 ou 90 pour degagement
       if deg_fin >= 1 & deg_fin < 6,     # si degager en Z
         [
          if sdegageZ <> svide, n$, sgcode, sinc_abs, smodedeg, sdegageZ, e$  # degager en Z
         ]
       if deg_fin = 2 | deg_fin = 4,     # si degager en Z et X
         [
          if sdegageX <> svide, n$, sgcode, sinc_abs, smodedeg, sdegageX, e$  # degager en X
         ]
       if deg_fin = 3 | deg_fin = 4 | deg_fin = 6,     # si degager en Z et Y
         [
          if sdegageY <> svide, n$, sgcode, sinc_abs, smodedeg, sdegageY, e$  # degager en Y
         ]
       if deg_fin = 5,         # si degager en Z etXY
         [
          if sdegageX <> svide & sdegageY <> svide, n$, sgcode, sinc_abs, smodedeg, sdegageX, sdegageY, e$    # degager en X Y
         ]
       if deg_fin = 6,
         [
          # si degager en Z et Y et X
          if sdegageY <> svide, n$, sgcode, sinc_abs, smodedeg, sdegageY, e$  # degager en Y
          if sdegageX <> svide, n$, sgcode, sinc_abs, smodedeg, sdegageX, e$  # degager en X
         ]
       if deg_fin = 7,
         [
          # si macro de degagement
          if sdeg_fin <> svide, n$, sdeg_fin, e$
         ]

       gcode$ = memo_gcode         # rappel du gcode precedent
       incremental = memo_incremental                                                                  # Rappel du mode actuel G90 G91
       @incremental                                                                                    # mise a jour
       if sdegageZ <> svide | sdegageX <> svide | sdegageY <> svide, n$, sinc_abs, e$
       !incremental
      ]

#endregion
#region ---- Degagement avant rotation 4 axes ---
#
pdegage4axes        #   Gestion du degagement de la machine avant rotation plateau

    if deg_4axe <> 0,
      [
       if mi1$ = 0,
         [
          memo_gcode = gcode$         # memo du gcode precedent
          gcode$ = 0              # Degagement en Rapide
          @incremental
          memo_incremental = incremental          # memo du mode actuel G90 G91
          incremental = inc_degage            # passage en mode 90 ou 90 pour degagement
          p_casse_modalite            # casser la modalite pour rappel des XYZ
          if deg_4axe >= 1,     # si degager en Z
            [
             if sdegageZ <> svide, n$, sgcode, sinc_abs, smodedeg, sdegageZ, e$  # degager en Z
            ]
          if deg_4axe = 2 | deg_4axe = 4,     # si degager en Z et X
            [
             if sdegageX <> svide, n$, sgcode, sinc_abs, smodedeg, sdegageX, e$  # degager en X
            ]
          if deg_4axe = 3 | deg_4axe = 4,     # si degager en Z et Y
            [
             if sdegageY <> svide, n$, sgcode, sinc_abs, smodedeg, sdegageY, e$  # degager en Y
            ]
          if deg_4axe = 5,         # si degager en Z etXY
            [
             if sdegageX <> svide & sdegageY <> svide, n$, sgcode, sinc_abs, smodedeg, sdegageX, sdegageY, e$    # degager en X Y
            ]
          if deg_4axe = 6,
            [
          # si degager en Z et Y et X
          if sdegageY <> svide, n$, sgcode, sinc_abs, smodedeg, sdegageY, e$  # degager en Y
          if sdegageX <> svide, n$, sgcode, sinc_abs, smodedeg, sdegageX, e$  # degager en X
            ]
          if deg_4axe = 7,
            [
          # si macro de degagement
          if sdeg_4axe <> svide, n$, sdeg_4axe, e$
            ]
          gcode$ = memo_gcode         # rappel du gcode precedent
          incremental = memo_incremental          # Rappel du mode actuel G90 G91
          @incremental                # mise a jour
          n$, sinc_abs, e$
         ]
      ]

#endregion
#endregion
#region Gestion des Origine d'usinages G54 a G59
#

fmt "G" 5 num_origine
num_origine : 9999

poriusi     # Gestion des origine d'usinage au changement outil
            #"voir origine workof$=", *workofs$ ,e$
            #"Voir origine ecrite =",  *num_origine , e$
            # origine est l'ecriture du G54 a G59
            # originebis pour ecrire le G54 P

    if ges_oriusi = 1, # Choix 1 – gestion G54-G59 mélange avec G54 Pxx
      [
      if num_origine < 1 , origine = 54, origine, p_casse_modalite_originebis
      if num_origine > 0 & num_origine < 6, origine = 54 + num_origine, origine, p_casse_modalite_originebis
      if num_origine > 5 & num_origine < 54, originebis = num_origine - 5, originebis, p_casse_modalite_origine
      if num_origine > 53 & num_origine < 60, origine = num_origine, origine, p_casse_modalite_originebis
      if num_origine > 59, erreur = 5, perreur # " Origine sup à 59 impossible ", e$ , exitpost$
      ]
    if ges_oriusi = 2, # Choix 2 – que G54 a G59
      [
      if num_origine < 1 , origine = 54, origine
      if num_origine > 0 & num_origine < 6, origine = 54 + num_origine, origine
      if num_origine > 53 & num_origine < 60, origine = num_origine, origine
      if (num_origine > 5 & num_origine < 54) | num_origine > 59, erreur = 6, perreur # " Origine sup à 59 impossible ", e$ , exitpost$
      ]
    if ges_oriusi = 3, # Choix 3 – Que G54 si workofs$ =-1 et G54.1Pxx si autre ( workofs =4 alors G54.1P4 )
      [
      if num_origine < 1 , origine = 54, origine, p_casse_modalite_originebis
      if num_origine > 0 & num_origine < 49,  originebis = num_origine, originebis, p_casse_modalite_origine  # nicolas
      if num_origine > 48 , erreur = 7, perreur # " Origine sup a P48 impossible ", e$ , exitpost$
      ]




poriusinul   # Gestion des origine d'usinage entre operation
                if sub_trnmthd$ = 1, old_origine = origine
                poriusi




#endregion
#region Gestion des gammes de vitesse de broche
pgamme   # Gestion gamme de vitesse si besoin



pdwl_spd$ # changement de vitesse de rotation
            if ss$ <> old_ss, n$, *ssa, pgamme, *spdlon, e$
            if dwell$, n$, sgcode, tempo, e$

#endregion
#region Appel outil

psof0$       # DEBUT DE PROGRAMME pour T=0

    psof$

pinfoutil       # infos sur l'outil

    if info_outil = 1,      # si affichage des infos outil
      [
       strtool$ = ucase (strtool$)             # convertir en MAJUSCULES le nom outil
       if numcoment = 0, omitseq$ = 1              # si pas de numero de bloc pour commentaires enlever les numeros de bloc
       if strtool$ <> svide,   n$, sdcom, spaces$ = 0, paramT1, space, strtool$, space, stypeT, space,paramT5, space, paramT16, ptypeBoutT, pangleT, space, smatT, sfcom, spaces$ = old_spaces, e$
        else, n$, sdcom, spaces$ = 0, paramT1, space, stypeT, space,paramT5, space, paramT16, ptypeBoutT, pangleT, space, smatT, sfcom, spaces$ = old_spaces, e$
       omitseq$ = old_omitseq                  # rappel des numero de bloc
      ]

pappel_outil    # ecriture de l'appel outil pour psof et ptlchg
    pnomgroupe                                  # Nom du groupe d'operation
    comment$                                    # commentaires d'operation
    !tool_typ$
    paffiche_outil
    if texte <> 0, pinfoutil
    if texte <> 0, paramcomp                        # afficher le type de compensation
    if texte <> 0, paramsurep                       # afficher les surepaisseur
    plane$ = 0                  # pour focer le rappel G17 G18 G19
    cc_pos$ = 0
    n$, *scord, "G80", *sinc_abs, *splcode, poriusi, e$
    n$, *ssa, pgamme, *spdlon, e$       # vitesse de broche
    #n$, plubrifon, e$                                  # lubrif
    #n$, "M1", e$
    #space, e$                              # Sauter une ligne
    debut = 0
    gcode$ = 5
    !gcode$

poutil  # appel outil sans outil suivant

    outil = t$
    if omitseq$ = 1, num, *outil, "M6", e$
    if omitseq$ = 0, n$,  *outil, "M6", e$

poutil_suivant  # appel outil avec outil suivant
    if outil_apres = 0,     # flag pour la position d'appel de l'outil suivant
      [
       outil = t$
       outil_suivant = next_tool$
       n$,  *outil_suivant, e$
      ]
paffiche_outil  # affichage du numero d'outil

    #     Debut de programme pour outil
    if bldnxtool$ = 1,
      [
       if op_id$ <> last_op_id & t$ <> next_tool$, poutil, poutil_suivant  # appel outil avec outil suivant juste apres
       if op_id$ <> last_op_id & t$ = next_tool$, poutil       # appel outil sans outil suivant
       if op_id$ = last_op_id & t$ <> first_tool$, poutil, poutil_suivant  # appel outil avec outil suivant juste apres
       if op_id$ = last_op_id & t$ = first_tool$, poutil       # appel outil sans outil suivant
      ]
    if bldnxtool$ = 0,   poutil                     # appel outil sans outil suivant

paffiche_outil_suivant  # affichage de l'outil suivant ou non

    outil = t$
    outil_suivant = next_tool$
    if bldnxtool$ = 1 & outil_apres = 1,
      [
       if op_id$ <> last_op_id & t$ <> next_tool$, outil_suivant   # appel outil suivant
       if op_id$ = last_op_id & t$ <> first_tool$, outil_suivant   # appel outil  suivant
      ]

#endregion
#region BLOCS D'AFFICHAGES DES ENTETES Pheader$



pheader$     # ENTETE DE PROGRAMME

    rd_mch_ent_no$ = -1         # pour lire les info de toute la machine
    rd_md$                  # lire la definition machine
    rd_mch_ent_no$ = 0          # pour lire les info de base de la machine
    rd_md$                  # lire la definition machine
    compt_axes_rot = 0          # pour remetre a zero le nombre d'axe rotatif avant la lecture de la conbinasin d'axe
    useaxe = 0
    if omitseq$ = 1, numcoment = 0      # si pas de numero de bloc ne pas numeroter les commentaires
    debut = 1               # flag pour debut de prog
    old_omitseq = omitseq$          # memo du mode de numerotation de ligne
    old_spaces = spaces$            # memo du nombre d'espaces
    old_linarc = linarc$            # memo de la decomposition des arcs
    smcpath$ = ucase (smcpath$)     # convertir en MAJUSCULES les noms
    smcname$ = ucase (smcname$)
    smcext$ = ucase(smcext$)
    snamepst$ = ucase (snamepst$)
    snamenc$ = ucase (snamenc$)
    smachine = ucase (smachine)
    while progno$ = 0, q22           # verifier le numero de prog
    prognosav = progno$            # memo du numero de prog
    debsousprog = progno$      # memo du num de premier sous prog
    #---------------------- Debut de prog -----------------------
    "%", e$
    if texte <> 0,    # Si la machine accepte les commentaires
      [
       if numcoment = 0, omitseq$ = 1                      # si pas de numero de bloc pour commentaires enlever les numeros de bloc
       progno$, sdcom, spaces$ = 0,  snamenc$, sfcom, spaces$ = old_spaces, e$                 # Nom du prog iso
       if entete = 1, p_questions_entete                          # faire l'entete de prog
       if tooltable$ <> 0, n$, sdcom, spaces$ = 0, "LISTE DES OUTILS UTILISES", sfcom, spaces$ = old_spaces, e$    # pour liste des outils
       omitseq$ = old_omitseq                          # rappel des numero de bloc
      ]
     else, progno$, e$                               # Si la machine n'accepte pas les commentaires, ne mettre que le numero
    sfilenc = spathnc$ + snamenc$ + sextnc$



#endregion
#region BLOCS debut de programme apres liste outil psof$


psof$        # DEBUT DE PROGRAMME


    pinfos
    memo_t = t$
    plireaxes                   # Lecture des parametres de la combinaison d'axes uniquement
    if tooltable$ <> 0 & texte <> 0,     # Si liste des outils et textes supportes
      [
       if numcoment = 0, omitseq$ = 1  # Si pas de numero sur les commentaires
       n$, sdcom, spaces$ = 0, "FIN DE LISTE DES OUTILS", sfcom, spaces$ = old_spaces, e$
       space, e$                   # Sauter une ligne
       omitseq$ = old_omitseq
      ]
    pnumop                      # compteur d'operation
    gcode$ = 0
    plane$ = 3                  # pour focer le rappel G17 G18 G19
    !plane$
    old_origine = -9999             # pour forcer l'affichage du G54 au chg outil
    old_correcteur_H = -99999           # pour forcer l'appel du G43
    incremental = 0                 # Travail en Absolue
    pintcn                      # Initialisation de la machine
    incremental = 2                 # pour re forcer l'affichage du mode Absolue
    !incremental
    incremental = 0
    pdegage_debut                           # Degagement de la Machine au debut de prog
    space, e$                   # sauter une ligne
    pappel_outil                        # APPEL OUTIL
    pplacement_cn                   # AFFICHAGE DES MOUVEMENTS MACHINE

#   Mise en route cn apres appel outil
#
#endregion
#region BLOCS CHANGEMENT OUTIL NUL ptlchg0$
ptlchg0$     # CHANGEMENT D'OUTIL NUL

    gcode$ = 0
    pnumop                      # compteur d'operation
    if subout$ = 0, omitseq$ = old_omitseq
    memo_incremental = incremental              # memo du mode ABS INC actuel
    if subout$ = 0, incremental = 0         # pour forcer le mode Absolue
    @rotaxis$, @old_rotaxis             # mise a jour
    linarc$ = old_linarc                    # pour activer les G2 G3
    typcycle = 0                    # variable mise a 1 lors des percage pour afficher l'intitule du cycle
    pnomgroupe                  # Nom du groupe d'operation
    comment$                    # commentaires d'operation
    if texte <> 0, paramcomp            # afficher le type de compensation
    if texte <> 0, paramsurep           # afficher les surepaisseur
    if ss$ <> old_ss, n$, ssa, pgamme, *spdlon, e$  # si changement de vitesse de broche l'afficher
    if nextop$ = 11,        # si  4 axes avec fonction 5 axes
      [
       if op_id$ <> old_op_id,
         [
          old_axeA1 = 0
          axeA1_dep = 0.
          cc$ = cc_pos$ + 40
          n$, poriusinul, e$          # affichage de l'origine d'usinage
          pdecalageg52
         ]
      ]
    if nextop$ <> 11,          # utilisation en positionne ou substitution
      [
       xabs = x$                   # prise en compte de XYZ
       yabs = y$
       zabs = z$
       if rotaxis$ = 0,     # 3 axes + diviser en positionne
         [
          prot1                   # calcul rotation plateau
          prot3                   # affichage de l'angle
          n$, poriusinul, e$          # affichage de l'origine d'usinage
          pdecalageg52
         ]
       if rotaxis$ <> 0, plinarc                   # Convertir les G2 G3 en G1
       if rotaxis$ <> 0 & old_rotaxis = 0,      # si on passe de positionne a continue
         [
          plinarc                                     # Convertir les G2 G3 en G1
          p_Apos                                      # calcul de l'axe A en substitution
          if rotaxis$ = 1,  xabs = 0                  # diviseur tourne autour de Y (X sbstitue)
          if rotaxis$ = 2,  yabs = 0                  # diviseur tourne autour de X (Y sbstitue)
          p_Apos_affiche                          # affichage de l'angle au chg outil nul pour continue
          n$, sgcode, sinc_abs, poriusinul, xabs, yabs, !Xinc, !Yinc, e$
          n$, sgcode, sinc_abs, sg43, zabs, *correcteur_H, !Zinc, e$
          p_modal                                 # affectation en format modal
          !x$, !y$, !z$, !xabs, !yabs, !zabs, !Xinc, !Yinc, !Zinc, !axeA, !axeAi  # mise a  jour des positions affichees
          old_correcteur_H = correcteur_H                    # memo du correcteur de longeur
         ]
      ]
    if op_id$ <> old_op_id, plubrifon # ecrire les arrosages
    incremental = memo_incremental   # rappel du mode incremental ou absolue precedent
    old_ss = ss$             # memo de la vitesse de broche
    old_op_id = op_id$           # memo du numero d'operation
    old_rotaxis = rotaxis$       # memo du type de substitution
    old_x = xabs             # memo X Y Z
    old_y = yabs
    old_z = zabs
    c_mmlt$              # Appel sous prog multi outils
    c_msng$              # Appel sous prog mono outil

ptlchg0_end$

    #"--------------- fin ptlchg0_end$", e$
#endregion
#region BLOCS changement outil ptlchg$

ptlchg$      # CHANGEMENT D'OUTIL
    p_casse_modalite_origine
    p_casse_modalite_originebis
    p_casse_modalite_avance             # pour rappel de l'avance sur le premier G1
    pnumop                      # compteur d'operation
    plubrifoff, e$                  # arret lubriff
    n$, "M5", e$                    # arret broche
    if decalage = 1, panulldecalageg52      # annuler les decalages d'origine
    pinfos
    if nbrtour <> 0,    # pour remise a zero du diviseur
      [
       old_axeA = 0
       axeA = 0
       nbrtour = 0
      ]

    plane$ = 3                  # pour focer le rappel G17 G18 G19
    !plane$
    memo_incremental = incremental          # memo du mode incremental
    incremental = 2                 # pour re forcer l'affichage du mode Absolue
    !incremental
    incremental = 0                 # pour forcer le mode Absolue
    old_origine = -9999             # pour forcer l'affichage du G54 au chg outil
    old_correcteur_H = -99999           # pour forcer l'appel du G43
    linarc$ = old_linarc                    # pour activer les G2 G3
    typcycle = 0                    # variable mise a 1 lors des percage pour afficher l'intitule du cycle
    pdegage                             # Degagement de la Machine
    space, e$                   # Sauter une ligne
    pappel_outil                        # APPEL OUTIL
    pplacement_cn                   # AFFICHAGE DES MOUVEMENTS MACHINE
    incremental = memo_incremental          # pour revenir au mode precedent

#endregion
#region BLOCS fin de programme peof$

peof$
    #if force_4axes = 1 & useaxe = 0, q20
    plubrifoff, e$                  # Arret lubriff
    n$, "M5", e$                    # Arret broche
    if decalage = 1, panulldecalageg52      # Annuler les decalages d'origine
    gcode$ = 0                      # Force le gcode a 0 pour faire un G0 apres
    incremental = 2                 # pour re forcer l'affichage du mode Absolue
    !incremental
    incremental = 0                 # pour forcer le mode Absolue
    pdecharge_outil                 # Dechargement de l'outil en broche
    pdegage_fin                 # Degagement de la machine fin de prog
    if useaxe <> 0 & old_axeA <> 0,      # Remise a 0 de l'axe A si pas a Zero
      [
       axeA = 0                # A = 0
       prot2                   # affichage de l'angle
      ]
    plane$ = 3                  # pour focer le rappel G17 G18 G19
    !plane$
    plane$ = 0
    n$, splcode, sinc_abs, e$           # Plan XY mode Absolue
    comment$                    # commentaires d'operation
    if palette = 1, n$, "M98", "P9901", e$  # dechargement de palette
    n$, "M30", e$                   # fin de prog et rembobine au debut
    space, e$                   # Sauter une ligne
    subout$ = 0                 # Ecriture dan le NC
    #mergeext$                      # Merge les sous prog
    mergeaux$                   # merge les sous prog en Z
    mergesub$                   # merge les sous prog en transform
    #clearext$                  # Effacer les sous prog
    clearsub$
    clearaux$
    "%", e$                     # fin de fichier

#endregion
#region Placement outil apres changement outil
pplacement_cn   # AFFICHAGE DES MOUVEMENTS MACHINE

    @rotaxis$                   # mise a jour du type de substitution d'axe
    if nextop$ = 11,        # si  4 axes avec fonction 5 axes
      [
       gcode$ = 0                      # Force le gcode a 0 pour faire un G0 apres
       axeA = 0
       axeA1_dep = 0
       old_axeA1 = 0
       debutpmx = 1                # flag pour faire l'appel outil
       cc$ = cc_pos$ + 40
      ]
    if nextop$ <> 11,        # utilisation en positionne ou substitution
      [
       gcode$ = 0                              # Force le gcode a 0 pour faire un G0 apres
       xabs = x$
       yabs = y$
       zabs = z$
       if rotaxis$ = 0,     # 3 axes + diviser en positionne
         [
          prot1                                   # calcul rotation plateau
          old_axeA =  -99999                          # pour forcer l'affichage
          prot2                                   # affichage de l'angle au chg outil
          pdecalageg52
          n$, *sgcode, sinc_abs, poriusi, *xabs, *yabs, paffiche_outil_suivant, e$ #ssa, pgamme, *spdlon, e$
          n$,  sg43, *zabs, *correcteur_H, plubrifon, e$
         ]
       if rotaxis$ <> 0,        # utilisation en substitution
         [
          plinarc
          p_Apos
          bloque = 2
          if use_bloque = 0, bloque = 0
          if rotaxis$ = 1,  xabs = 0                  # diviseur tourne autour de Y (X sbstitue)
          if rotaxis$ = 2,  yabs = 0                  # diviseur tourne autour de X (Y sbstitue)
          n$, *sgcode, sinc_abs, poriusi, sbloque, *axeA, e$
          n$, sgcode, sinc_abs, *xabs, *yabs, paffiche_outil_suivant, e$ # ssa, pgamme, *spdlon, e$
          n$, sg43, *zabs, *correcteur_H, plubrifon, e$
         ]
       p_modal                                 # affectation en format modal
       !x$, !y$, !z$, !xabs, !yabs, !zabs, !Xinc, !Yinc, !Zinc, !axeA, !axeAi  # mise a  jour des positions affichees
      ]
    old_correcteur_H = correcteur_H  # memeo du correcteur de longeur
    old_ss = ss$             # memo de la vitesse de broche
    old_op_id = op_id$           # memo du numero d'operation
    old_rotaxis = rotaxis$       # memo du type de substitution
    old_x = xabs             # memo X Y Z
    old_y = yabs
    old_z = zabs
    c_mmlt$           # truc qui doit servire pour usinage transforme
    c_msng$

pdecharge_outil     # Dechargement de l'outil en broche

    if t$ <> 0,
      [
       outil = 0
       n$, *outil, "M6", e$
      ]
#endregion
#region Gestion decalage usinage
panulldecalageg52
    memo_incremental = incremental
    incremental = 0
    decX = 0
    decY = 0
    decZ =0
    n$, sinc_abs, "G52", *decX, *decY, *decZ, e$
    decalage = 0
    incremental = memo_incremental
    old_decX = decX
    old_decY = decY
    old_decZ = decZ

pdecalageg52    # Ecriture de decalage origine G52
    if nb_ori = 1, # on gere qu'une origine mais on fait du decalage G52
        [
        decX = tox4$
        decY = toy4$
        decZ = toz4$
        if decX <> old_decX |  decY <> old_decY | decZ <> old_decZ, # on a un decalage
          [
          n$, "G52", decX, decY , decZ, e$
          if decX = 0 & decY = 0 & decZ = 0, decalage = 0
          else, decalage = 1
          ]
        old_decX = decX
        old_decY = decY
        old_decZ = decZ
        ]



#endregion
#Region BLOCS DU CORPS DU CODE ISO G1 G2 G3 G0
#region ---- Rapid ---
plrapid     # Ligne en rapide

    xabs = x$
    yabs = y$
    zabs = z$
    if nextccomp$ = 2 | nextccomp$ = 3, n$, correcteur_D, e$
    if cc_pos$ <> 0 & nextop$ > 0, n$, correcteur_D, e$
    n$, `sgcode, sinc_abs, pcorh, pxyz, e$
    pstop


prapid$      # Ligne en rapide

       if gcode$ = 0, plrapid
     else, pltravail
    !x$ , !y$ , !z$

pzrapid$     # Ligne Z en rapide

    if gcode$ = 0, plrapid
     else, pltravail
    !x$ , !y$ , !z$
#endregion
#region --- Travail ligne ---

pltravail    # Ligne en travail
    xabs = x$
    yabs = y$
    zabs = z$
    if nextccomp$ = 2 | nextccomp$ = 3, n$, correcteur_D, e$
    if cc_pos$ <> 0, n$, correcteur_D, e$
    if cc$ = 41 | cc$ = 42, n$, *sgcode, sinc_abs, pcord, correcteur_D, pcorh, pxyz, pfr, e$
     else, n$, `sgcode, sinc_abs, pcord, pcorh, pxyz, pfr, e$
     pstop


plin$        # Ligne travail

    if gcode$ = 0, plrapid
     else, pltravail
    !x$ , !y$ , !z$

pz$      # z en avance TRAVAIL
        #"------PZ----", e$
    if gcode$ = 0, plrapid
     else, pltravail
    !x$ , !y$ , !z$
#endregion

#region --- Cercle ---
pcir$        # Circulaire

    p_modal     #affectation en format modal
    xabs = x$
    yabs = y$
    zabs = z$
    #"----------------", *arctype$,"---------------", e$
    if arctype$ >= 5, pcir_r, e$    # en R
     else, pcir_ij, e$           # en IJ
     pstop

pcir_r      # Circulaire G2 G3 G17 G18 G19 en R

    @plane$
    if arctype$ = 5, rayon = arcrad$            # pour Rayon
    if arctype$ = 6 & abs(sweep$) < 180, rayon = arcrad$    # pour Rayon signe
    if arctype$ = 6 & abs(sweep$) >=180, rayon = -arcrad$   # pour Rayon signe

    if plane$ = 0, p_casse_modalite_X, p_casse_modalite_Y
    if plane$ = 2, p_casse_modalite_X, p_casse_modalite_Z
    if plane$ = 1, p_casse_modalite_Y, p_casse_modalite_Z

    if plane$ = 0, n$, splcode, sinc_abs, *sgcode, pcord, pxyz, rayon, pfr   # plan XY
    if plane$ = 2, n$, splcode, sinc_abs, *sgcode, pcord, pxyz, rayon, pfr   # plan XZ
    if plane$ = 1, n$, splcode, sinc_abs, *sgcode, pcord, pxyz, rayon, pfr   # plan YZ

pcir_ij     # Circulaire G2 G3 G17 G18 G19 en IJ

    @plane$
    if plane$ = 0, p_casse_modalite_X, p_casse_modalite_Y
    if plane$ = 2, p_casse_modalite_X, p_casse_modalite_Z
    if plane$ = 1, p_casse_modalite_Y, p_casse_modalite_Z

    if plane$ = 0, n$, splcode, sinc_abs, *sgcode, pcord, pxyz, pijk, pfr
    if plane$ = 2, n$, splcode, sinc_abs, *sgcode, pcord, pxyz, pijk, pfr
    if plane$ = 1, n$, splcode, sinc_abs, *sgcode, pcord, pxyz, pijk, pfr

#endregion
#endregion
#region Casse modalite des mouvements


p_modal2

p_modal     # affectation en format modal X Y Z A garde profondeur ABS ET INC
    #"p_modal"
    result = newfs (2, xabs)
    result = newfs (11, Xinc)
    result = newfs (2, yabs)
    result = newfs (11, Yinc)
    result = newfs (2, zabs)
    result = newfs (11, Zinc)
    result = newfs (2, axeA)
    result = newfs (11, axeAi)
    result = newfs (2, profabs)
    result = newfs (2, profi)
    result = newfs (2, gardeabs)
    result = newfs (2, gardei)

p_casse_modalite_avance # casser la modalite de l'avance
    result = force (avance, avance)

p_casse_modalite    # pour casser la modalite de Xabs et Xinc Yabs et Yinc Zabs et Zinc
    p_casse_modalite_X
    p_casse_modalite_Y
    p_casse_modalite_Z
    p_casse_modalite_A


p_casse_modalite_X  # pour casser la modalite de Xabs et Xinc

    result = force (xabs, xabs)
    result = force (Xinc, Xinc)

p_casse_modalite_Y  # pour casser la modalite de Yabs et Yinc

    result = force (yabs, yabs)
    result = force (Yinc, Yinc)


p_casse_modalite_Z  # pour casser la modalite de Zabs et Zinc

    result = force (zabs, zabs)
    result = force (Zinc, Zinc)

p_casse_modalite_A  # pour casser la modalite de Zabs et Zinc

    result = force (axeA, axeA)
    result = force (axeAi, axeAi)


p_casse_modalite_perce  # pour casser la modalite de profabs et profi gardeabs gardei

    result = force (profabs, profabs)
    result = force (profi, profi)

    result = force (gardeabs, gardeabs)
    result = force (gardei, gardei)

p_casse_modalite_origine
        result = force (origine,origine)

p_casse_modalite_originebis
        result = force (originebis,originebis)


#endregion
#region Ecriture des points X Y Z I J K
pxyz        # ecriture des x, y, z en abs ou incremental pour corp ISO

    pxyz_new
    p_modal     # affectation en format modal
    !x$, !y$, !z$   # mise a jour xyz
    old_x = xabs    # memo des anciennes positions
    old_y = yabs
    old_z = zabs

pxyz_new    # ecriture des positions X Y Z et A pour substitution

    if rotaxis$ = 0,    # XYZ CLASIQUE 3 axes (+ positionne)
      [
       if incremental = 0, xabs, yabs, zabs, !Xinc, !Yinc, !Zinc
        else, !xabs, !yabs, !zabs, Xinc, Yinc, Zinc
      ]
    if rotaxis$ <> 0,     # SUBSTITUTION
      [
       p_Apos                              # Calcul de l'axe A
       if rotaxis$ = 1, xabs = 0                  # diviseur tourne autour de Y (X sbstitue)
       if rotaxis$ = 2, yabs = 0                  # diviseur tourne autour de X (Y sbstitue)
       if incremental = 0, xabs, yabs, axeA, zabs, !Xinc, !Yinc, !axeAi, !Zinc
        else, !xabs, !yabs, !axeA, !zabs, Xinc, Yinc, axeAi, Zinc
       old_axeA  = axeA                            # memo de l'axe A
       nbrtour = int (axeA / 360)                      # calcul du nombre de tours
      ]

pijk        # ecriture des IJK pour G90 G91

    !i$, !j$, !k$
    if arctype$ = 1,      # pour centre en absolue en G90
      [
       iabs = i$
       jabs = j$
       kabs = k$
       iinc = i$ - prv_x$
       jinc = j$ - prv_y$
       kinc = k$ - prv_z$
      ]
    else,       # pour centre en relatif en G90
      [
       iabs = i$
       jabs = j$
       kabs = k$
       iinc = i$
       jinc = j$
       kinc = k$
      ]
    if incremental = 0 & plane$ = 0, *iabs, *jabs, !iinc, !jinc, !kinc
    if incremental = 0 & plane$ = 2, *iabs, *kabs, !iinc, !jinc, !kinc
    if incremental = 0 & plane$ = 1, *jabs, *kabs, !iinc, !jinc, !kinc
    if incremental = 1 & plane$ = 0, !iabs, !jabs, *iinc, *jinc, !kinc
    if incremental = 1 & plane$ = 2, !iabs, !kabs, *iinc, !jinc, *kinc
    if incremental = 1 & plane$ = 1, !jabs, !kabs, !iinc, *jinc, *kinc

#endregion
#region BLOCS Percage
pdrill$      # Cycle de percage G81 G82

    if texte <> 0,
      [
       if numcoment = 0, omitseq$ = 1
       if typcycle = 0 & dwell$ = 0,  n$, sdcom, spaces$ = 0, "POINTAGE-PERCAGE", sfcom, spaces$ = old_spaces, e$
       if typcycle = 0 & dwell$ <> 0, n$, sdcom, spaces$ = 0, "POINTAGE-PERCAGE-TEMPO", sfcom, spaces$ = old_spaces, e$
       omitseq$ = old_omitseq
      ]
    typcycle = 1
    gcode$ =0
    z$ =  initht$
    pzrapid$
    gcode$ = 81
    p_casse_modalite        # casser la modalite de xy
    p_casse_modalite_perce      # casser la modalite de la garde et la prof
    if dwell$ = 0, n$, sinc_abs, "G81", ppercexy, pavanceperce, e$
     else, n$, sinc_abs, "G82", ppercexy, pavanceperce, *tempo, e$
    pstop
ppeck$      # Cycle de debourrage G83

    if texte <> 0,
      [
       if numcoment = 0, omitseq$ = 1
       if typcycle = 0, n$, sdcom, spaces$ = 0, "DEBOURRAGE", sfcom, spaces$ = old_spaces, e$
       omitseq$ = old_omitseq
      ]
    typcycle = 1
    gcode$ =0
    z$ =  initht$
    pzrapid$
    gcode$ = 81
    p_casse_modalite        # casser la modalite de xyzra
    p_casse_modalite_perce      # casser la modalite de la garde et la prof
    incrementQ = peck1$
    n$, sinc_abs, "G83", ppercexy, *incrementQ, tempo, pavanceperce, e$
    pstop
pchpbrk$    # Cycle de brise copeaux G73

    if texte <> 0,
      [
       if numcoment = 0, omitseq$ = 1
       if typcycle = 0,  n$, sdcom, spaces$ = 0, "BRISE COPEAUX", sfcom, spaces$ = old_spaces, e$
       omitseq$ = old_omitseq
      ]
    typcycle = 1
    gcode$ =0
    z$ =  initht$
    pzrapid$
    gcode$ = 81
    p_casse_modalite        # casser la modalite de xyzra
    p_casse_modalite_perce      # casser la modalite de la garde et la prof
    incrementQ = peck1$
    incrementQ = retr$
    remonteD = peckclr$
    n$, sinc_abs, "G73", ppercexy, *incrementQ, remonteD, tempo, pavanceperce, e$
    pstop
ptap$       # Cycle de taraudage G84

    if texte <> 0,
      [
       if numcoment = 0, omitseq$ = 1
       if typcycle = 0,  n$, sdcom, spaces$ = 0, "TARAUDAGE", sfcom, spaces$ = old_spaces, e$
       omitseq$ = old_omitseq
      ]
    typcycle = 1
    gcode$ =0
    z$ =  initht$
    pzrapid$
    gcode$ = 81
    p_casse_modalite        # casser la modalite de xyzra
    p_casse_modalite_perce      # casser la modalite de la garde et la prof
    if tldia$ = 3, pas = 0.5
    if tldia$ = 4, pas = 0.7
    if tldia$ = 5, pas = 0.8
    if tldia$ = 6, pas = 1
    if tldia$ = 8, pas = 1.25
    if tldia$ = 10, pas = 1.5
    if tldia$ = 12, pas = 1.75
    if tldia$ = 14, pas = 2
    if tldia$ = 16, pas = 2
    if n_tap_thds$ <> 0, pas = n_tap_thds$
    if tool_typ$ = 5, ss$ = (abs(ss$))*-1
    pas = pas * abs(ss$)
    incrementQ = peck1$
    #  if tool_typ$ = 5, n$, "M4", *ssa, e$
    #     else, n$, "M3", *ssa, e$
    if tool_typ$ = 4,
      [
       if peck1$ = 0,  n$, sinc_abs, "G84", ppercexy, tempo, *pas, e$
        else, n$, sinc_abs, "G84", ppercexy, *incrementQ, tempo, *pas, e$
      ]
    if tool_typ$ = 5,
      [
       if peck1$ = 0,  n$, sinc_abs, "G74", ppercexy, tempo, *pas, e$
        else, n$, sinc_abs, "G74", ppercexy, *incrementQ, tempo, *pas, e$
      ]
    pstop
pbore1$     # Cycle d'alesage G85

    if texte <> 0,
      [
       if numcoment = 0, omitseq$ = 1
       if typcycle = 0, n$, sdcom, spaces$ = 0, "ALESAGE", sfcom, spaces$ = old_spaces, e$
       omitseq$ = old_omitseq
      ]
    typcycle = 1
    gcode$ = 0
    z$ = initht$
    pzrapid$
    gcode$ = 81
    p_casse_modalite        # casser la modalite de xyzra
    p_casse_modalite_perce      # casser la modalite de la garde et la prof
    n$, sinc_abs, "G85", ppercexy, tempo, pavanceperce, e$
    pstop

p_bore2     # Cycle d'alesage G86
    if texte <> 0,
      [
       if numcoment = 0, omitseq$ = 1
       if typcycle = 0, n$, sdcom, spaces$ = 0, "ALESAGE BARE", sfcom, spaces$ = old_spaces, e$
       omitseq$ = old_omitseq
      ]
    typcycle = 1
    gcode$ = 0
    z$ = initht$
    pzrapid$
    gcode$ = 81
    p_casse_modalite        # casser la modalite de xyzra
    p_casse_modalite_perce      # casser la modalite de la garde et la prof
    n$, sinc_abs, "G86", ppercexy, tempo, pavanceperce, e$
    pstop

pbore2$     # Cycle d'alesage indexe G75

    if texte <> 0,
      [
       if numcoment = 0, omitseq$ = 1
       if typcycle = 0, n$, sdcom, spaces$ = 0, "ALESAGE INDEXE", sfcom, spaces$ = old_spaces, e$
       omitseq$ = old_omitseq
      ]
    typcycle = 1
    gcode$ = 0
    z$ = initht$
    pzrapid$
    gcode$ = 81
    p_casse_modalite        # casser la modalite de xyzra
    p_casse_modalite_perce      # casser la modalite de la garde et la prof
    if shftdrl$ = 0, shftdrl$ = 0.1
    if shftdrl$ <0, shftdrl$ = shftdrl$ *  -1
    retrait = shftdrl$
    n$, sinc_abs, "G75", ppercexy, *retrait, tempo, pavanceperce, e$
    pstop

pmisc1$     # Cycle


pmisc2$     # Cycle


pdrill_2$   # Percage suivant

    phole, e$

ppeck_2$    # Canned Peck Drill Cycle

    phole, e$

pchpbrk_2$  # Canned Chip Break Cycle

    phole, e$

ptap_2$     # Canned Tap Cycle

    n$, sinc_abs, ppercexy, e$


pbore1_2$   # Canned Bore #1 Cycle

    phole, e$

pbore2_2$   # Canned Bore #2 Cycle

    phole, e$

pmisc1_2$   # Canned Misc #1 Cycle


pmisc2_2$   # Canned Misc #2 Cycle


ppercexy     # ecriture des x, y en abs ou incremental pour percage

    xabs = x$
    yabs = y$
    if rotaxis$ = 0,      # XY CLASIQUE
      [
       @depth$
       @refht$
       profabs = depth$
       profi = depth$ - refht$
       gardeabs = refht$
       gardei = refht$ - initht$
       !depth$
       !refht$
       if incremental = 0,  xabs, yabs, profabs, gardeabs, !Xinc, !Yinc, !profi, !gardei
                    else, !xabs, !yabs, !profabs, !gardeabs, Xinc, Yinc, profi, gardei
      ]
    if rotaxis$ <> 0,     # SUBSTITUTION Y par A (diviseur tourne autour de X)
      [
       p_Apos
       @depth$
       @refht$
       profabs = depth$ + (rotdia$/2)
       profi = depth$ - refht$
       gardeabs = refht$ + (rotdia$/2)
       gardei = refht$-initht$
       !depth$
       !refht$
       if incremental = 0, xabs, yabs, axeA, profabs, gardeabs, !Xinc, !Yinc, !axeAi, !profi, !gardei
                   else, !xabs, !yabs, !axeA, !profabs, !gardeabs, Xinc, Yinc, axeAi, profi, gardei
       old_axeA  = axeA
       nbrtour = int (axeA / 360)
      ]
    p_modal     # afficher en format modal
    !x$, !y$    # mise a jour XY
    old_x = xabs
    old_y = yabs

phole       # trous suivants
    n$, sinc_abs, ppercexy, e$
    pstop

pcanceldc$  # Anuulation de cyle fixe

    z$ = initht$        # z au plan de secu
    profabs=  -99999    # raz des prof garde tempo
    gardeabs=  -99999
    tempo = 0
    !profabs
    !gardeabs
    !tempo
    if rotaxis$ = 0,      # XYZ CLASIQUE
      [
       zabs = z$
      ]
    else,
      [
       zabs = z$ + (rotdia$/2)
      ]
    gcode$ =5    # choix du gcode pour ecrire G80
    if incremental = 0, n$, sinc_abs, *sgcode, *zabs, !Zinc, e$
    if incremental = 1, n$, sinc_abs, *sgcode, !zabs, Zinc, e$
    !z$      # Raz de Z
    old_z = zabs

#endregion
#Region Liste des OUTILS

ptypeBoutT # afficher on non le rayon de bout

    if paramT4 <> 0, space, paramT6

pangleT    # afficher on non l'angle de l'outil

    if paramT2 = 3 | paramT2 = 12 | paramT2 = 2 | paramT2 = 17 | paramT2 = 9 | paramT2 = 4 | paramT2 = 5, space, paramT8

pwrtt$      # Lite des outil
        if m9$ <> 1, force_4axes = 1
    strtool$ = ucase(strtool$)
    if texte <> 0 & t$ > 0,
      [
       if numcoment = 0, omitseq$ = 1
       if strtool$ <> svide, n$, sdcom, spaces$ = 0, paramT1, space, strtool$, space, stypeT, space, paramT5, space, paramT16, ptypeBoutT, pangleT, space, smatT, sfcom, spaces$ = old_spaces, e$
            else, n$, sdcom, spaces$ = 0, paramT1, space, stypeT, space, paramT5, space, paramT16, ptypeBoutT, pangleT, space, smatT, sfcom, spaces$ = old_spaces, e$
       omitseq$ = old_omitseq
      ]
    last_op_id = op_id$

#endregion
#region LECTURE DES PARAMETRES DE SUREP ET DE TYPE DE CORRECTION

paramcomp   # Type de correction d'outil au changement d'operation

    if info_corr = 1 & op_id$ <> old_op_id  & texte <> 0,     # si afficher les infos de compesation et changement d'operation et texte supporte
      [
       @cc_computer$, @cc_pos$                 # mise a  jour des variables
       #cc_comp 41 42 0
       #cc_pos   1  2 0
       if cc_pos$ = 0  & cc_computer$ = 0,   type_comp = 0 #AUCUNE

       if cc_pos$ = 2  & cc_computer$ = 0,   type_comp = 1 #ARMOIRE DROITE
       if cc_pos$ = 1  & cc_computer$ = 0,   type_comp = 2 #ARMOIRE GAUCHE

       if cc_pos$ = 0  & cc_computer$ = 42,  type_comp = 3 #ORDINATEUR DROITE
       if cc_pos$ = 0  & cc_computer$ = 41,  type_comp = 4 #ORDINATEUR GAUCHE

       if cc_pos$ = 2  & cc_computer$ = 42,  type_comp = 5 #USURE DROITE
       if cc_pos$ = 1  & cc_computer$ = 41,  type_comp = 6 #USURE GAUCHE

       if cc_pos$ = 1  & cc_computer$ = 42,  type_comp = 7 #USURE INVERSE DROITE
       if cc_pos$ = 2  & cc_computer$ = 41,  type_comp = 8 #USURE INVERSE GAUCHE

       if opcode$ = 19, type_comp = 0              # mis sur aucune a la place d'ordinateur pour surfacage (bug)
       if numcoment = 0, omitseq$ = 1              # si pas de numero de bloc pour commentaires enlever les numeros de bloc
       if opcode$ <> 3, n$, sdcom, spaces$ = 0, stype_comp, sfcom, spaces$ = old_spaces, e$    # pour ne pas afficher les infos si percage
       omitseq$ = old_omitseq                  # rappel des numero de bloc
      ]

paramsurep  # Affichage des surep au changement d'operation

    if info_surep = 1 & op_id$ <> old_op_id  & texte <> 0,     # si afficher les infos de compesation et changement d'operation et texte supporte
      [
       if numcoment = 0, omitseq$ = 1                  # si pas de numero de bloc pour commentaires enlever les numeros de bloc
       # surep pour surfacage
       if opcode$ = 19, n$, sdcom, spaces$ = 0, *surepl, sfcom, spaces$ = old_spaces, e$
       # surep 2d
       if opcode$ <> 3 & opcode$ < 5  & opcode$ <> 19, n$, sdcom, spaces$ = 0, *surep, space, *surepl, sfcom, spaces$ = old_spaces, e$
       # surep 3d
       if opcode$ <> 3 & opcode$ >= 5 & opcode$ <> 19, n$, sdcom, spaces$ = 0, *surep3d, sfcom, spaces$ = old_spaces, e$
       omitseq$ = old_omitseq                      # rappel des numero de bloc
      ]

ptestmachine    # verif de la def machine

    #*nbr_combi, "---------", e$
    if nbr_combi > 1, erreur = 3            # le pst ne supporte q'une combinaison d'axe par programme
    if compt_axes_rot > 1, erreur = 2       # le pst ne supporte q'un axe rotaif
    if write_ops = 0, erreur = 1            # Write NC Operation information MUST be enabled in CD
    perreur

perreur        # affichage des erreurs

    !erreur
    !serreur
    if erreur <> 0,
      [
       if erreur = 4 & testerreur4 = 0,
         [
          serreur2 = serreur + no2str(numop)
          result = mprint(serreur2, 3)
          if result = 3, serreur2 , e$, exitpost$      # abandonner
          if result = 4, serreur2                      # recommencer
          if result = 5,  testerreur4 = 1              # ignorer
         ]
       if erreur <> 4,
         [
          result = mprint(serreur, 2)
          exitpost$
         ]
      ]

#endregion
#Region RENOMMER LE FICHIER NC EN FONCTION DU NUMERO DE PROGRAMME

pnom_nc     # Generation des noms du fichier NC

    snom_nc = spathnc$+snamenc$+spoint+sextnc$             # Fichier NC en cours de creation sous forme toto.nc
    snom_numero = no2str (progno$)
    snom_numero = spathnc$+stringo+snom_numero+spoint+sextnc$     # nouveau non de fichier NC sous forme O0015.nc


#endregion
#region BLOCS apres traitement post-pro ppost$
sfilenc : ""

ppost$       # traitement apres post pro pour effacer le fichier OPS et renommer le fichier NC
    sfileops= spathnci$ + snamenci$ + sops      # non du fichier ops
    result = remove (sfileops)          # effacer le fichier ops


#endregion
#region Blocs fin de post-processeur pour variable textes

[CTRL_TEXT_XML_BEGIN]  # Post text edits MUST be made with Control Definition Manager.
<?xml version="1.0" encoding="UTF-8"?>
<mp_xml_post_text xml:space="preserve">
	<control>
		<control_label>CTRL_MILL|DEFAULT</control_label>
		<language>fr-FR</language>
		<misc_integers>
			<misc_1>
				<text>Utiliser plan de secu pour rotation diviseur 1=OUI 0=NON</text>
			</misc_1>
			<misc_2>
				<text>Ne pas bloquer le diviseur 1=OUI 0=NON</text>
			</misc_2>
			<misc_3>
				<text>""</text>
			</misc_3>
			<misc_4>
				<text>""</text>
			</misc_4>
			<misc_5>
				<text>""</text>
			</misc_5>
			<misc_6>
				<text>""</text>
			</misc_6>
			<misc_7>
				<text>""</text>
			</misc_7>
			<misc_8>
				<text>""</text>
			</misc_8>
			<misc_9>
				<text>""</text>
			</misc_9>
			<misc_10>
				<text>Ajuster les avances sur arc 0=NON 1=Ralentir 2=Accelerer 3=les Deux</text>
			</misc_10>
		</misc_integers>
		<simple_drill>
			<description>
				<text>PerÃ§age Lamage</text>
			</description>
			<feed_rate>
				<text>Avance</text>
			</feed_rate>
			<dwell>
				<text>Tempo.</text>
			</dwell>
			<clearance>
				<text>Plan de securite</text>
			</clearance>
			<retract>
				<text>Garde</text>
			</retract>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
			<shift>
				<text>""</text>
			</shift>
		</simple_drill>
		<peck_drill>
			<feed_rate>
				<text>Avance</text>
			</feed_rate>
			<dwell>
				<text>Tempo.</text>
			</dwell>
			<clearance>
				<text>Plan de securite</text>
			</clearance>
			<retract>
				<text>Garde</text>
			</retract>
			<first_peck>
				<text>Inc Q</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
			<shift>
				<text>""</text>
			</shift>
		</peck_drill>
		<chip_break>
			<description>
				<text>Brise copeaux</text>
			</description>
			<feed_rate>
				<text>Avance</text>
			</feed_rate>
			<dwell>
				<text>Tempo.</text>
			</dwell>
			<clearance>
				<text>Plan de securite</text>
			</clearance>
			<retract>
				<text>Garde</text>
			</retract>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>Remonte D</text>
			</peck_clearance>
			<retract_amount>
				<text>Inc Q</text>
			</retract_amount>
			<shift>
				<text>""</text>
			</shift>
		</chip_break>
		<tap>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>Tempo.</text>
			</dwell>
			<clearance>
				<text>Plan de securite</text>
			</clearance>
			<retract>
				<text>Garde</text>
			</retract>
			<first_peck>
				<text>Inc Q</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
			<shift>
				<text>""</text>
			</shift>
		</tap>
		<bore1>
			<description>
				<text>Alesage</text>
			</description>
			<feed_rate>
				<text>Avance</text>
			</feed_rate>
			<dwell>
				<text>Tempo.</text>
			</dwell>
			<clearance>
				<text>Plan de securite</text>
			</clearance>
			<retract>
				<text>Garde</text>
			</retract>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
			<shift>
				<text>""</text>
			</shift>
		</bore1>
		<bore2>
			<description>
				<text>Alesage indexe</text>
			</description>
			<feed_rate>
				<text>Avance</text>
			</feed_rate>
			<dwell>
				<text>Tempo.</text>
			</dwell>
			<clearance>
				<text>Plan de securite</text>
			</clearance>
			<retract>
				<text>Garde</text>
			</retract>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</bore2>
		<misc1>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</misc1>
		<misc2>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</misc2>
		<drill_cycle_9>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</drill_cycle_9>
		<drill_cycle_10>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</drill_cycle_10>
		<drill_cycle_11>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</drill_cycle_11>
		<drill_cycle_12>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</drill_cycle_12>
		<drill_cycle_13>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</drill_cycle_13>
		<drill_cycle_14>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</drill_cycle_14>
		<drill_cycle_15>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</drill_cycle_15>
		<drill_cycle_16>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</drill_cycle_16>
		<drill_cycle_17>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</drill_cycle_17>
		<drill_cycle_18>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</drill_cycle_18>
		<drill_cycle_19>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</drill_cycle_19>
		<drill_cycle_20>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</drill_cycle_20>
		<simple_drill_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 1</text>
			</description>
		</simple_drill_custom_parameters>
		<peck_drill_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 2</text>
			</description>
		</peck_drill_custom_parameters>
		<chip_break_drill_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 3</text>
			</description>
		</chip_break_drill_custom_parameters>
		<tap_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 4</text>
			</description>
		</tap_custom_parameters>
		<bore1_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 5</text>
			</description>
		</bore1_custom_parameters>
		<bore2_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 6</text>
			</description>
		</bore2_custom_parameters>
		<misc1_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 7</text>
			</description>
		</misc1_custom_parameters>
		<misc2_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 8</text>
			</description>
		</misc2_custom_parameters>
		<drill_cycle_9_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 9</text>
			</description>
		</drill_cycle_9_custom_parameters>
		<drill_cycle_10_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 10</text>
			</description>
		</drill_cycle_10_custom_parameters>
		<drill_cycle_11_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 11</text>
			</description>
		</drill_cycle_11_custom_parameters>
		<drill_cycle_12_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 12</text>
			</description>
		</drill_cycle_12_custom_parameters>
		<drill_cycle_13_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 13</text>
			</description>
		</drill_cycle_13_custom_parameters>
		<drill_cycle_14_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 14</text>
			</description>
		</drill_cycle_14_custom_parameters>
		<drill_cycle_15_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 15</text>
			</description>
		</drill_cycle_15_custom_parameters>
		<drill_cycle_16_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 16</text>
			</description>
		</drill_cycle_16_custom_parameters>
		<drill_cycle_17_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 17</text>
			</description>
		</drill_cycle_17_custom_parameters>
		<drill_cycle_18_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 18</text>
			</description>
		</drill_cycle_18_custom_parameters>
		<drill_cycle_19_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 19</text>
			</description>
		</drill_cycle_19_custom_parameters>
		<drill_cycle_20_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 20</text>
			</description>
		</drill_cycle_20_custom_parameters>
		<drill_cycle_descriptions>
			<simple_drill>
				<text>PerÃ§age</text>
			</simple_drill>
			<peck_drill>
				<text>Debourrage</text>
			</peck_drill>
			<chip_break>
				<text>Brise copeaux</text>
			</chip_break>
			<tapping>
				<text>Taraudage</text>
			</tapping>
			<boring_1>
				<text>Alesage</text>
			</boring_1>
			<boring_2>
				<text>Alesage Indexe</text>
			</boring_2>
			<misc_drill_1>
				<text>""</text>
			</misc_drill_1>
			<misc_drill_2>
				<text>""</text>
			</misc_drill_2>
			<custom_drill_9>
				<text>""</text>
			</custom_drill_9>
			<custom_drill_10>
				<text>""</text>
			</custom_drill_10>
			<custom_drill_11>
				<text>""</text>
			</custom_drill_11>
			<custom_drill_12>
				<text>""</text>
			</custom_drill_12>
			<custom_drill_13>
				<text>""</text>
			</custom_drill_13>
			<custom_drill_14>
				<text>""</text>
			</custom_drill_14>
			<custom_drill_15>
				<text>""</text>
			</custom_drill_15>
			<custom_drill_16>
				<text>""</text>
			</custom_drill_16>
			<custom_drill_17>
				<text>""</text>
			</custom_drill_17>
			<custom_drill_18>
				<text>""</text>
			</custom_drill_18>
			<custom_drill_19>
				<text>""</text>
			</custom_drill_19>
			<custom_drill_20>
				<text>""</text>
			</custom_drill_20>
		</drill_cycle_descriptions>
		<canned_text>
			<canned_text_1>
				<text>""</text>
			</canned_text_1>
			<canned_text_2>
				<text>""</text>
			</canned_text_2>
			<canned_text_3>
				<text>""</text>
			</canned_text_3>
			<canned_text_4>
				<text>""</text>
			</canned_text_4>
			<canned_text_5>
				<text>""</text>
			</canned_text_5>
			<canned_text_6>
				<text>""</text>
			</canned_text_6>
			<canned_text_7>
				<text>""</text>
			</canned_text_7>
			<canned_text_8>
				<text>""</text>
			</canned_text_8>
			<canned_text_9>
				<text>""</text>
			</canned_text_9>
			<canned_text_10>
				<text>""</text>
			</canned_text_10>
		</canned_text>
	</control>
<control>
		<control_label>CTRL_MILL|FANUC_ST_4</control_label>
		<language>fr-FR</language>
		<misc_integers>
			<misc_1>
				<text>Utiliser plan de secu pour rotation diviseur 1=OUI 0=NON</text>
			</misc_1>
			<misc_2>
				<text>Ne pas bloquer le diviseur 1=OUI 0=NON</text>
			</misc_2>
			<misc_3>
				<text>""</text>
			</misc_3>
			<misc_4>
				<text>""</text>
			</misc_4>
			<misc_5>
				<text>""</text>
			</misc_5>
			<misc_6>
				<text>""</text>
			</misc_6>
			<misc_7>
				<text>""</text>
			</misc_7>
			<misc_8>
				<text>""</text>
			</misc_8>
			<misc_9>
				<text>""</text>
			</misc_9>
			<misc_10>
				<text>Ajuster les avances sur arc 0=NON 1=Ralentir 2=Accelerer 3=les Deux</text>
			</misc_10>
		</misc_integers>
		<simple_drill>
			<description>
				<text>PerÃ§age Lamage</text>
			</description>
			<feed_rate>
				<text>Avance</text>
			</feed_rate>
			<dwell>
				<text>Tempo.</text>
			</dwell>
			<clearance>
				<text>Plan de securite</text>
			</clearance>
			<retract>
				<text>Garde</text>
			</retract>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
			<shift>
				<text>""</text>
			</shift>
		</simple_drill>
		<peck_drill>
			<feed_rate>
				<text>Avance</text>
			</feed_rate>
			<dwell>
				<text>Tempo.</text>
			</dwell>
			<clearance>
				<text>Plan de securite</text>
			</clearance>
			<retract>
				<text>Garde</text>
			</retract>
			<first_peck>
				<text>Inc Q</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
			<shift>
				<text>""</text>
			</shift>
		</peck_drill>
		<chip_break>
			<description>
				<text>Brise copeaux</text>
			</description>
			<feed_rate>
				<text>Avance</text>
			</feed_rate>
			<dwell>
				<text>Tempo.</text>
			</dwell>
			<clearance>
				<text>Plan de securite</text>
			</clearance>
			<retract>
				<text>Garde</text>
			</retract>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>Remonte D</text>
			</peck_clearance>
			<retract_amount>
				<text>Inc Q</text>
			</retract_amount>
			<shift>
				<text>""</text>
			</shift>
		</chip_break>
		<tap>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>Tempo.</text>
			</dwell>
			<clearance>
				<text>Plan de securite</text>
			</clearance>
			<retract>
				<text>Garde</text>
			</retract>
			<first_peck>
				<text>Inc Q</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
			<shift>
				<text>""</text>
			</shift>
		</tap>
		<bore1>
			<description>
				<text>Alesage</text>
			</description>
			<feed_rate>
				<text>Avance</text>
			</feed_rate>
			<dwell>
				<text>Tempo.</text>
			</dwell>
			<clearance>
				<text>Plan de securite</text>
			</clearance>
			<retract>
				<text>Garde</text>
			</retract>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
			<shift>
				<text>""</text>
			</shift>
		</bore1>
		<bore2>
			<description>
				<text>Alesage indexe</text>
			</description>
			<feed_rate>
				<text>Avance</text>
			</feed_rate>
			<dwell>
				<text>Tempo.</text>
			</dwell>
			<clearance>
				<text>Plan de securite</text>
			</clearance>
			<retract>
				<text>Garde</text>
			</retract>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</bore2>
		<misc1>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</misc1>
		<misc2>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</misc2>
		<drill_cycle_9>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</drill_cycle_9>
		<drill_cycle_10>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</drill_cycle_10>
		<drill_cycle_11>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</drill_cycle_11>
		<drill_cycle_12>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</drill_cycle_12>
		<drill_cycle_13>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</drill_cycle_13>
		<drill_cycle_14>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</drill_cycle_14>
		<drill_cycle_15>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</drill_cycle_15>
		<drill_cycle_16>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</drill_cycle_16>
		<drill_cycle_17>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</drill_cycle_17>
		<drill_cycle_18>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</drill_cycle_18>
		<drill_cycle_19>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</drill_cycle_19>
		<drill_cycle_20>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</drill_cycle_20>
		<simple_drill_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 1</text>
			</description>
		</simple_drill_custom_parameters>
		<peck_drill_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 2</text>
			</description>
		</peck_drill_custom_parameters>
		<chip_break_drill_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 3</text>
			</description>
		</chip_break_drill_custom_parameters>
		<tap_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 4</text>
			</description>
		</tap_custom_parameters>
		<bore1_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 5</text>
			</description>
		</bore1_custom_parameters>
		<bore2_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 6</text>
			</description>
		</bore2_custom_parameters>
		<misc1_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 7</text>
			</description>
		</misc1_custom_parameters>
		<misc2_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 8</text>
			</description>
		</misc2_custom_parameters>
		<drill_cycle_9_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 9</text>
			</description>
		</drill_cycle_9_custom_parameters>
		<drill_cycle_10_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 10</text>
			</description>
		</drill_cycle_10_custom_parameters>
		<drill_cycle_11_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 11</text>
			</description>
		</drill_cycle_11_custom_parameters>
		<drill_cycle_12_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 12</text>
			</description>
		</drill_cycle_12_custom_parameters>
		<drill_cycle_13_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 13</text>
			</description>
		</drill_cycle_13_custom_parameters>
		<drill_cycle_14_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 14</text>
			</description>
		</drill_cycle_14_custom_parameters>
		<drill_cycle_15_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 15</text>
			</description>
		</drill_cycle_15_custom_parameters>
		<drill_cycle_16_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 16</text>
			</description>
		</drill_cycle_16_custom_parameters>
		<drill_cycle_17_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 17</text>
			</description>
		</drill_cycle_17_custom_parameters>
		<drill_cycle_18_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 18</text>
			</description>
		</drill_cycle_18_custom_parameters>
		<drill_cycle_19_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 19</text>
			</description>
		</drill_cycle_19_custom_parameters>
		<drill_cycle_20_custom_parameters>
			<description>
				<text>ParamÃ¨tres de cycle special 20</text>
			</description>
		</drill_cycle_20_custom_parameters>
		<drill_cycle_descriptions>
			<simple_drill>
				<text>PerÃ§age</text>
			</simple_drill>
			<peck_drill>
				<text>Debourrage</text>
			</peck_drill>
			<chip_break>
				<text>Brise copeaux</text>
			</chip_break>
			<tapping>
				<text>Taraudage</text>
			</tapping>
			<boring_1>
				<text>Alesage</text>
			</boring_1>
			<boring_2>
				<text>Alesage Indexe</text>
			</boring_2>
			<misc_drill_1>
				<text>""</text>
			</misc_drill_1>
			<misc_drill_2>
				<text>""</text>
			</misc_drill_2>
			<custom_drill_9>
				<text>""</text>
			</custom_drill_9>
			<custom_drill_10>
				<text>""</text>
			</custom_drill_10>
			<custom_drill_11>
				<text>""</text>
			</custom_drill_11>
			<custom_drill_12>
				<text>""</text>
			</custom_drill_12>
			<custom_drill_13>
				<text>""</text>
			</custom_drill_13>
			<custom_drill_14>
				<text>""</text>
			</custom_drill_14>
			<custom_drill_15>
				<text>""</text>
			</custom_drill_15>
			<custom_drill_16>
				<text>""</text>
			</custom_drill_16>
			<custom_drill_17>
				<text>""</text>
			</custom_drill_17>
			<custom_drill_18>
				<text>""</text>
			</custom_drill_18>
			<custom_drill_19>
				<text>""</text>
			</custom_drill_19>
			<custom_drill_20>
				<text>""</text>
			</custom_drill_20>
		</drill_cycle_descriptions>
		<canned_text>
			<canned_text_1>
				<text>""</text>
			</canned_text_1>
			<canned_text_2>
				<text>""</text>
			</canned_text_2>
			<canned_text_3>
				<text>""</text>
			</canned_text_3>
			<canned_text_4>
				<text>""</text>
			</canned_text_4>
			<canned_text_5>
				<text>""</text>
			</canned_text_5>
			<canned_text_6>
				<text>""</text>
			</canned_text_6>
			<canned_text_7>
				<text>""</text>
			</canned_text_7>
			<canned_text_8>
				<text>""</text>
			</canned_text_8>
			<canned_text_9>
				<text>""</text>
			</canned_text_9>
			<canned_text_10>
				<text>""</text>
			</canned_text_10>
		</canned_text>
	</control>
</mp_xml_post_text>
[CTRL_TEXT_XML_END]
#endregion
