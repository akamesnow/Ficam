[POST_VERSION] #DO NOT MOVE OR ALTER THIS LINE# V20.00 P3 E1 W20.00 T1447190145 M20.00 I0 O0
# Post Name           : Wire.set
# Product             : Wire
# Machine Name        : Generic
# Control Name        : Generic
# Description         : Generic setup sheet for Wire X
# 4-axis              : No
# Executable          : MP 19.0
#
# WARNING: THIS POST IS GENERIC AND IS INTENDED FOR MODIFICATION TO
# THE MACHINE TOOL REQUIREMENTS AND PERSONAL PREFERENCE.
#
# --------------------------------------------------------------------------
# Revision log:
# --------------------------------------------------------------------------
# CNC 09/29/05  -  Initial Setup for Version X.
# CNC 11/15/05  -  Modified header section and layout, added new functionality
# CNC 02/17/06  -  Added opcomment string reset in pcomment2
# CNC 07/20/06  -  Reversed the UV_XY trimplane variables. Changed < abd > for taper
#                  direction.
# CNC 10/31/07  -  Added sub_level$ override to pprep$
# CNC 12/18/07  -  Modified EOB (End of Block) in Pprep Postblock.
# CNC 04/08/08  -  X3 release - no changes made
# CNC 01/22/09  -  Initial post update for Mastercam X4
# CNC 02/03/10  -  Initial post update for Mastercam X5
# CNC 08/17/10  -  Removed CD_VAR variables
# CNC 05/20/11  -  Initial post update for Mastercam X6
# CNC 10/16/12  -  Initial post update for Mastercam X7
# CNC 02/06/14  -  Initial post update for Mastercam X8
# CNC 12/23/14  -  Initial post update for Mastercam X9
# CNC 11/09/15  -  Initial post update for Mastercam 2017
# CNC 12/29/15  -  Replaced Operation description string selector with lookup table based on tool_op$
#
# --------------------------------------------------------------------------
# Features:
# --------------------------------------------------------------------------
# This post supports output for 2 and 4 axis wire edm.
# It is designed to support the features of Mastercam X Wire.
#
# NEW FEATURES FOR X:
# - Supports X comments including machine name, group name and group comment output (see pcomment2)
#     Output of these comments is controlled by setting outputxcom in the Optional Output Settings area.
# - Enhanced output control via post switches (see Optional Output Settings area)
#
# --------------------------------------------------------------------------
# Misc. Values:
# --------------------------------------------------------------------------
# Integers:
#
# mi1 - mi10 (NOT USED)
#
# Reals:
#
# mr1 - mr10 (NOT USED)
#
# --------------------------------------------------------------------------
# Additional Notes:
# --------------------------------------------------------------------------
# File extension (.doc) is set internally in MP.  Use pprep$ postblock to override this setting.
#
# Rapid traverse times are determined by maximum rapid feedrates set in the selected Machine Definition
# Time estimates will be wrong if these settings are incorrect.
#
# END_HEADER$
#
# --------------------------------------------------------------------------
# Debugging and Factory Set Program Switches
# --------------------------------------------------------------------------
# Define constants
m_one        := -1
zero         := 0
one          := 1
two          := 2
three        := 3
four         := 4
five         := 5
c9k          := 9999

bug1$        : 2     #0=No display, 1=Generic list box, 2=Editor
bug4$        : 1     #Debug output with the tilde '~'.
                     #A value greater the zero applies the variable formatting with
                     #debug output (default is typically FS 1 but not a guarantee).
                     #A value of zero gets the value directly with NO formatting.

linktolvar$  : 0     #Associate X tolerance variables to V9- variable?
linkplnvar$  : 1     #Associate X plane specific variables to V9- variable?

strtool_v7$  : 2     #Use Version 7+ toolname?
cant_tlchng$ : 1     #Ignore cantext entry on move with tlchng_aft?
newglobal$   : 1     #Error checking for global variables
getnextop$   : 1     #Build the next variable table
nosubs       : no$   #Do not support sub programs?

# --------------------------------------------------------------------------
# General Output Settings
# --------------------------------------------------------------------------
progname$    : 1     #Use uppercase for program name (sprogname)

# --------------------------------------------------------------------------
# Optional Output Settings
# --------------------------------------------------------------------------
output_comments : yes$  #Output Operation Comments in tool list?
outputxcom   : yes$  #Output new X comments? (Machine name, Group comment, Group name)
outputpasscom : yes$ #Output pass comments?

show_lengths : 3     #Output Feed/Rapid path length information?
                     #0 = Do NOT output ANY Feed/Rapid path length information.
                     #1 = Output Feed/Rapid path length info. ONLY for EACH tool (not Program)
                     #2 = Output Feed/Rapid path length info. ONLY at end for entire program
                     #3 = Output Feed/Rapid path length info. for EACH tool AND Program (if > 1 tool)

show_reg_set : 2     #Output register settings?
                     #0 = Do NOT output ANY register settings
                     #1 = Output ALL register settings (each pass)
                     #2 = Output register settings when value <> 0 (each pass)

stock_info   : yes$  #Display stock material and size/location?

# --------------------------------------------------------------------------
# Common User-defined Variable Initializations (not switches!)
# --------------------------------------------------------------------------
qrtyp$       : 2     #Absolute upper wire
tdlen        : 0     #Length for calculation
fxlen        : 0     #Length for calculation
prvx         : 0     #Previous x
prvy         : 0     #Previous y
dx           : 0     #Delta x
dy           : 0     #Delta y
dz           : 0     #Delta z
du           : 0     #Delta u
dv           : 0     #Delta v
dw           : 0     #Delta w
darcx        : 0     #Delta for arc center to start x
darcy        : 0     #Delta for arc center to start y
dc_ex        : 0     #Delta for arc center to end x
dc_ey        : 0     #Delta for arc center to end y
strta        : 0     #Start angle
enda         : 0     #End angle
test         : 0     #Test variable
compflg      : 0     #Compensation flag
upprflg      : 0     #Upper wire flag
sof          : 1     #Start of file flag
op_cnt       : 0     #Operation counter
toolchng     : 0     #Operation change flag

# --------------------------------------------------------------------------
#String and string selector definitions for NC output
# --------------------------------------------------------------------------
#Seperator lines
sepline      : "----------------------------------------------"
sepline2     : "========================================="
sepline3     : "=============================================================="
sepline4     : "=============================================="

#Comment strings
snull        : ""    #Null string
smachname    : ""    #Machine name
sgrpcomm     : ""    #Group comment
sgrpname     : ""    #Group name
sopcomment   : ""    #Operation comment
spasscomment : ""    #Pass comment (captured from 20019 parameter)
stlopnote      : ""    #Operation type

# --------------------------------------------------------------------------
# Lookup tables
# --------------------------------------------------------------------------
#region Operation Type tool_op$ codes
#
# Operation type note based on tool_op$ codes
# tool_op$ is in string form to allow for an exact match (i.e., not closest match)
#       "DESCRIPTION"          tool_op$ value
#
flktbl  1                      10    #Table number, number of entries in table
        "CONTOUR"              "74"
        "CANNED"               "75"
        "NO CORE"              "76"
        "MANUAL ENTRY"         "77"
        "POINT"                "78"
        "4-AXIS"               "79"
        "TRANSFORM"            "80"
        "ASSOCIATIVE TRIMMED"  "81"
        "MERGED IN ASCII NCI"  "82"
        "COLLAR"               "83"
#endregion

# --------------------------------------------------------------------------
# String select tables
# --------------------------------------------------------------------------

# --------------------------------------------------------------------------
#Select canned cycle operation
scan00  : "ONE"
scan01  : "TWO"
scan02  : "THREE"
scan03  : "FOUR"
scan04  : "FIVE"
scan05  : "SIX"
scan06  : "SEVEN"
scan07  : "EIGHT"
scancyc : ""         #Target string

cansel = nextdc$  #Global formula

fstrsel scan00 cansel scancyc 8 -1
# --------------------------------------------------------------------------
# Wire corner type selector
sct0    : "CONICAL"
sct1    : "SHARP"
sct2    : "CONSTANT"
sct3    : "OTHER"
sctype  : ""         #Target string

fstrsel sct0 wc$ sctype 4 -1
# --------------------------------------------------------------------------
#Select stock orientation note
stk0    : "AT CENTER, Z AT TOP"
stk1    : "UPPER LEFT CORNER, Z AT TOP"
stk2    : "UPPER RIGHT CORNER, Z AT TOP"
stk3    : "LOWER RIGHT CORNER, Z AT TOP"
stk4    : "LOWER LEFT CORNER, Z AT TOP"
stk5    : "UPPER LEFT CORNER, Z AT BOTTOM"
stk6    : "UPPER RIGHT CORNER, Z AT BOTTOM"
stk7    : "LOWER RIGHT CORNER, Z AT BOTTOM"
stk8    : "LOWER LEFT CORNER, Z AT BOTTOM"
stknote : ""         #Target string

fstrsel stk0 stck_crnr$ stknote 9 -1
# --------------------------------------------------------------------------
# Month selector
smon0   : ""
smon1   : "JAN."
smon2   : "FEB."
smon3   : "MAR."
smon4   : "APR."
smon5   : "MAY."
smon6   : "JUN."
smon7   : "JUL."
smon8   : "AUG."
smon9   : "SEP."
smon10  : "OCT."
smon11  : "NOV."
smon12  : "DEC."
smonth  : ""         #Target string

fstrsel smon0 month$ smonth 13 -1
# --------------------------------------------------------------------------
# Format statements - n=nonmodal, l=leading, t=trailing, i=inc, d=delta
# --------------------------------------------------------------------------
fs2  1  0.4 0.3      #Decimal, absolute, 4/3 place, default for initialize (:)
fs2  2  0.4 0.3n     #Decimal, absolute, 4/3 place, non-modal
fs2  3  1 0 1 0n     #Integer, not leading, non-modal
fs2  4  0.2 0.2n     #Decimal, absolute, 2 place, non-modal
fs2  5  1.4 1.3ltn   #Decimal, absolute, 4/3 place, leading&trailing, non-modal
fs2  6 +1.4 1.3ltn   #Decimal, absolute, 4/3 place, leading&trailing with SIGN
fs2  7  0.4 0.3ltn   #Decimal, 4/3 place, trailing, non-modal
fs2  8  0^2 0^2n     #Decimal, 2 place, omit decimal if whole number, non-modal
fs2  9  4 0 4 0l     #Integer, force four leading

# These formats used for 'Date' & 'Time'
fs2 17  1 0 1 0      #Integer, not leading
fs2 18  2.2 2.2lt    #Decimal, force two leading & two trailing (time2)
fs2 19  2 0 2 0t     #Integer, force trailing                   (hour)
fs2 20  0 2 0 2lt    #Integer, force leading & trailing         (min)

# --------------------------------------------------------------------------
# Format assignments
# --------------------------------------------------------------------------
fmt     9   progno$     #Program number
fmt     9   subno$      #Subprogram number
fmt     3   pass$       #Pass number
fmt     5   tldia$      #Wire diameter
fmt     5   tlrad$      #Wire radius
fmt     5   overburn$   #Wire overburn
fmt     3   ccode$      #Condition code
fmt     3   offset$     #Wire offset number
fmt     2   uvheight$   #UV height
fmt     2   xyheight$   #XY height
fmt     2   trimplane1$ #Trimplane1
fmt     2   trimplane2$ #Trimplane2
fmt     2   startx$     #StartX
fmt     2   starty$     #StartY
fmt     2   threadx$    #ThreadX
fmt     2   thready$    #ThreadY
fmt     2   cutx$       #CutX
fmt     2   cuty$       #CutY
fmt     4   reg1$       #Register 1
fmt     4   reg2$       #Register 2
fmt     4   reg3$       #Register 3
fmt     4   reg4$       #Register 4
fmt  "X" 7  stck_ht$    #X - Stock Height
fmt  "Y" 7  stck_wdth$  #Y - Stock Width
fmt  "Z" 7  stck_thck$  #Z - Stock Thickness
fmt  "X" 2  stck_x$     #X origin of block
fmt  "Y" 2  stck_y$     #Y origin of block
fmt  "Z" 2  stck_z$     #Z origin of block
fmt     2   stck_crnr$  #Origin corner of stock
fmt     4   abswt       #Initial taper
# -------------------------------------------------------------------------
fmt     2   tdllen      #Feed cut length
fmt     2   tdrlen      #Feed cut length
fmt     2   fxllen      #Feed cut length
fmt     2   fxrlen      #Feed cut length
fmt     2   tdllent     #Feed cut length total
fmt     2   tdrlent     #Feed cut length total
fmt     2   fxllent     #Feed cut length total
fmt     2   fxrlent     #Feed cut length total
# --------------------------------------------------------------------------
fmt     17  year2       #Calculated year value
fmt     18  time2       #Capture 24-hour time value into 'time2' variable
fmt     19  hour        #Hour
fmt     20  min         #Minutes
year2 = year$ + 2000

# --------------------------------------------------------------------------
# Tool Comment / Manual Entry Section
# --------------------------------------------------------------------------
pcomment$        #Comment from manual entry (must call pcomment2)
      pcomment2  #Required if doing boolean 'if' logic testing!

pcomment2        #Output Comment from manual entry
      sopcomment = snull
      scomm$ = ucase (scomm$)
      if gcode$ = 1051, smachname = scomm$   #Machine name
      if gcode$ = 1052, sgrpcomm = scomm$    #Group comment
      if gcode$ = 1053, sgrpname = scomm$    #Group name
      if gcode$ = 1008, sopcomment = scomm$  #Operation comment

# --------------------------------------------------------------------------
# Start of File and Toolchange Setup
# --------------------------------------------------------------------------
ptimecalc        #Convert 24-hour time format into 12-hour AM/PM format
      if time$ >= 13, time2 = (time$ - 12)
      else, time2 = time$
      hour = int(time2), min = frac(time2)
      *hour, ":", *min,
      if time$ > 12, " PM"
      else, " AM"

pheader$         #File header
      prvx = startx$
      prvy = starty$
      "CUSTOMIZABLE WIRE SETUP SHEET - WIRE.SET", e$
      sepline2, e$
      " ", e$  #Blank line
      "PROGRAM NAME   = ", *sprogname$, e$
      if progno$ > zero, "PROGRAM NUMBER = ", *progno$, e$
      #Date/Time output
      #"DATE PROCESSED = ", month$, "-", day$, "-", year$, e$   #Date output as month,day,year - Ex. 02-12-05
      "DATE PROCESSED = ", *smonth, " ", day$, " ", *year2, e$  #Date output as month,day,year - Ex. Feb. 12 2005
      #"DATE PROCESSED (DD-MM-YY) = ", date$, " TIME(HH:MM) = ", time$, e$  #Date and time output Ex. 12-02-05 15:52
      #"TIME           = ", time$, e$                           #24 hour time output - Ex. 15:52
      "TIME           = ", ptimecalc, e$                        #12 hour time output 3:52 PM
      pstock_info  #Stock information output
      #" ", e$  #Blank line

psof0$           #Start of file for tool zero
      psof$

psof$            #Output of setup sheet header
      toolchng = one
      psetup   #Call to toolchange info
      sof = 0  #Reset start of file flag
      !op_id$

ptlchg0$         #Null tool change
      !gcode$
      if op_id$ <> prv_op_id$ | skimpass$ | tabcut$ | nocore_fin$, ptlchg$

pupperw2         #Output of length calculations for the upper wirepath
      "UPPER WIRE CUT LENGTH = ", *fxllen, e$
      "UPPER WIRE RAPID TRAVERSE LENGTH = ", *fxrlen, e$

pupperw          #Output of length calculations for the upper wirepath
      test = 0
      if prv_opcode$ <= 4, test = 1
      if prv_opcode$ = 6, test = 1
      if prv_opcode$ = 7, test = 1
      if prv_opcode$ = 13, test = 1
      if prv_opcode$ = 14, test = 1
      if test = 0, pupperw2

ptlchg$          #Output of length calculations for the last wirepath
      ptooldata  #Total ending data for tool (Path Length and Times)
      #Call to toolchange info
      if op_id$ <> prv_op_id$, toolchng = one  #New Operation
      psetup   #Call to toolchange info
      !op_id$

peof0$           #End of file for tool zero
      peof$

peof$            #Output of length calculations for the last pass and total
      ptooldata  #Total ending data for tool (Path Length and Times)
      #Suppress Program totals if only one tool or output not desired
      if op_cnt > 1 & show_lengths > 1,
        [
        " ", e$  #Blank line
        sepline3, e$
        "PROGRAM TOTALS :", e$
        " ", e$ # Blank line
        plentotal
        fxllen = fxllent
        fxrlen = fxrlent
        if upprflg = 1,
          [
          "TOTAL UPPER WIRE CUT LENGTH = ", *fxllen, e$
          "TOTAL UPPER WIRE RAPID TRAVERSE LENGTH = ", *fxrlen, e$
          ]
        "TOTAL LOWER WIRE CUT LENGTH TOTAL = ", *tdllent, e$
        "TOTAL LOWER WIRE RAPID TRAVERSE LENGTH TOTAL = ", *tdrlent, e$
        ]

psetup           #Output of toolchange information
      if opcode$ >= 200, opcode$ = opcode$ - 200
      if subtyp$ > 0, popcode7
      if nosubs = 1, pnosubs
      comment$
      if sof & outputxcom,  #If start of file and outputxcom = yes$
        [
        if smachname <> snull, "MACHINE NAME   = ", smachname, e$  #Machine name
        if sgrpcomm <> snull, "GROUP COMMENT  = ", sgrpcomm, e$    #Group comment
        if sgrpname <> snull, "GROUP NAME     = ", sgrpname, e$    #Group name
        ]
      if toolchng = one,  #Output at operation change
        [
        " ", e$  #Blank Line
        sepline4, e$  #Output the separator '====' line
        stlopnote = flook(1, no2str(tool_op$, 3))  #Get the operation type from the lookup table
        if stlopnote = "", stlopnote = "UNKNOWN OPERATION TYPE"
        "OPERATION TYPE = " *stlopnote, pcancyc, e$
        if output_comments & sopcomment <> snull, "OPERATION COMMENT = " sopcomment, e$  #Operation comment
        ]
      else,
        [
        sepline, e$  #Output the separator '----' line
        if not(skimpass$) & not(tabcut$) & not(nocore_fin$), "SKIM CUT", e$  #Skim cut after tab
        if skimpass$, "SKIM CUT", e$
        if tabcut$, "TAB CUT", e$
        if nocore_fin$, "NOCORE FINISH PASS", e$
        ]
      if subtyp$ > 0, "CALL SUBPROGRAM NUMBER = ", *subno$, e$
      "PASS = ", *pass$, e$
      if outputpasscom & spasscomment <> snull, "PASS COMMENT = ", spasscomment, e$
      "CONDITION CODE = ", *ccode$, e$
      "OFFSET NUMBER = ", *offset$, e$
      if inittaper$ <> 0, ptap_crnr
      if cc$ = 41, "CUTTER COMP = LEFT", e$
      if cc$ = 42, "CUTTER COMP = RIGHT", e$
      pregset  #Output register settings if desired
      if toolchng = one,  #Output at operation change
        [
        "WIRE DIAMETER = ", *tldia$, e$
        "WIRE RADIUS = ", *tlrad$, e$
        "OVERBURN = ", *overburn$, e$
        "UV HEIGHT = ", *uvheight$, e$
        "XY HEIGHT = ", *xyheight$, e$
        "UV TRIMPLANE = ", *trimplane1$, e$
        "XY TRIMPLANE = ", *trimplane2$, e$
        "START POSITION X = ", *startx$, e$
        "START POSITION Y = ", *starty$, e$
        "THREAD POSITION X = ", *threadx$, e$
        "THREAD POSITION Y = ", *thready$, e$
        "CUT POSITION X = ", *cutx$, e$
        "CUT POSITION Y = ", *cuty$, e$
        ]
      dx = prvx - startx$, dy = prvy - starty$
      dz = 0, du = dx, dv = dy
      plengthr2
      plengthr4
      plentotal
      tdllen = 0, tdrlen = 0
      fxllen = 0, fxrlen = 0
      dx = startx$ - threadx$
      dy = starty$ - thready$
      dz = startz$ - threadz$
      du = dx, dv = dy
      plengthr2
      plengthr4
      x$ = threadx$, y$ = thready$, z$ = threadz$
      u$ = threadx$, v$ = thready$
      cstart$ = 0, cend$ = 0
      compflg = 0
      !x$, !y$, !z$, !u$, !v$, !opcode$, !cstart$
      !cend$, !gcode$
      toolchng = zero  #Reset new operation flag

pregset          #Output register settings if desired
      if show_reg_set = 1,  #Output ALL register settings
        [
        "REGISTER ONE = ", *reg1$, e$
        "REGISTER TWO = ", *reg2$, e$
        "REGISTER THREE = ", *reg3$, e$
        "REGISTER FOUR = ", *reg4$, e$
        "REGISTER FIVE = ", *reg5$, e$
        "REGISTER SIX = ", *reg6$, e$
        "REGISTER SEVEN = ", *reg7$, e$
        "REGISTER EIGHT = ", *reg8$, e$
        "REGISTER NINE = ", *reg9$, e$
        "REGISTER TEN = ", *reg10$, e$
        ]
      if show_reg_set = 2,  #Output register settings if value <> 0
        [
        if fmtrnd(reg1$) <> 0, "REGISTER ONE = ", *reg1$, e$
        if fmtrnd(reg2$) <> 0, "REGISTER TWO = ", *reg2$, e$
        if fmtrnd(reg3$) <> 0, "REGISTER THREE = ", *reg3$, e$
        if fmtrnd(reg4$) <> 0, "REGISTER FOUR = ", *reg4$, e$
        if fmtrnd(reg5$) <> 0, "REGISTER FIVE = ", *reg5$, e$
        if fmtrnd(reg6$) <> 0, "REGISTER SIX = ", *reg6$, e$
        if fmtrnd(reg7$) <> 0, "REGISTER SEVEN = ", *reg7$, e$
        if fmtrnd(reg8$) <> 0, "REGISTER EIGHT = ", *reg8$, e$
        if fmtrnd(reg9$) <> 0, "REGISTER NINE = ", *reg9$, e$
        if fmtrnd(reg10$) <> 0, "REGISTER TEN = ", *reg10$, e$
        ]

ptooldata        #Total ending data for tool (Path Length and Times)
      op_cnt = op_cnt + 1  #Increment operation counter
      prvx = prv_x$
      prvy = prv_y$
      #sepline, e$  #Output the separator '----' line
      #Output Feed/Rapid path length information
      if show_lengths = 1 | show_lengths = 3,
        [
        pupperw
        "LOWER WIRE CUT LENGTH = ", *tdllen, e$
        "LOWER WIRE RAPID TRAVERSE LENGTH = ", *tdrlen, e$
        #sepline, e$  #Output the separator '----' line
        ]

pcancyc          #Output cancycle type if cancycle
      #if opcode$ = 3, *scancyc  # <-- This needs customization to work.

popcode7         #Output of toolchange information modification for opcode 7
      opcode$ = 7
      if nextop$ = 11, opcode$ = 15
      if nextop$ >= 20, opcode$ = 16

pnosubs          #Output of toolchange information modification for no subs
      subtyp$ = 0
      if opcode$ = 7, opcode$ = 1
      if opcode$ = 15, opcode$ = 5
      if opcode$ = 16, opcode$ = 9

ptaper           #Output of taper information
      if inittaper$ > 0, " DEGREE(S) RIGHT"
      if inittaper$ < 0, " DEGREE(S) LEFT"

ptap_crnr2       #Output of taper and corner information
      abswt = abs(inittaper$)
      "INITIAL WIRE TAPER = ", *abswt, ptaper, e$
      "INITIAL CORNER TYPE = ", *sctype, e$

ptap_crnr        #Output of taper and corner information
      test = 0
      if opcode$ = 1, ptap_crnr2
      if opcode$ = 6, ptap_crnr2
      if opcode$ = 7, ptap_crnr2
      if opcode$ = 13, ptap_crnr2

pstock_info      #Output stock information if requested
      if stock_info,
        [
        #If any stock values are empty, disable don't output
        if stck_ht$ > 0 & stck_wdth$ > 0 & stck_thck$ > 0,
          [
          "STOCK SIZE     = ", stck_ht$, " ", stck_wdth$, " ", stck_thck$, e$
          "STOCK ORIGIN   = ", stck_x$, " ", stck_y$, " ", stck_z$, e$
          #Output the stock orientation note (spaced over...)
          "                 ",  "(", *stknote, ")", e$
          ]
        ]

# --------------------------------------------------------------------------
# Motion NC output
# --------------------------------------------------------------------------
prapid$          #Output to NC of linear movement - rapid
      plength

plin$            #Output to NC of linear movement - feed
      plength

pcir$            #Output to NC of circular interpolation
      plength

pedm$            #Postblock called for 4-axis taper wirepaths
      upprflg = 1
      plength

# --------------------------------------------------------------------------
# Position calculations
# --------------------------------------------------------------------------
plengthlin4      #Length calc 4 ax
      fxlen = sqrt(du^2 + dv^2 + dw^2)

plengthlin2      #Length calc 2D
      tdlen = sqrt (dx^2 + dy^2 + dz^2)

plengthr4        #Rapid length calc 4 ax
      plengthlin4
      fxrlen = fxrlen + fxlen

plengthr2        #Rapid length calc 2D
      plengthlin2
      tdrlen = tdrlen + tdlen

plengthl4        #Linear length calc 4 ax
      plengthlin4
      fxllen = fxllen + fxlen

plengthl2        #Linear length calc
      plengthlin2
      tdllen = tdllen + tdlen

plentotal        #Linear length calc total 2D
      tdllent = tdllent + tdllen
      tdrlent = tdrlent + tdrlen
      fxllent = fxllent + fxllen
      fxrlent = fxrlent + fxrlen

plengthc4        #Circular length calc 4 ax
      fxlen = (arcrad$ * 2 * pi$) * (abs(sweep$) / 360)
      fxllen = fxllen + fxlen

plengthc2        #Circular length calc 2D
      tdlen = (arcrad$ * 2 * pi$) * (abs(sweep$) / 360)
      tdllen = tdllen + tdlen

pedmendcc        #Distance calculations pedm
      compflg = 1
      cend$ = 2

pedmend          #Distance calculations pedm
      if prv_cend$ = 1, cend$ = prv_cend$ + 1
      if cend$ > 2, gcode$ = 0

pdwtlchg         #Update dw after toolchange
      if prv_gcode$ = 1000, prv_w$ = w$
      if prv_gcode$ = 1001, prv_w$ = w$
      if prv_gcode$ = 1002, prv_w$ = w$

plengthpedm      #Distance calculations pedm
      gcode$ = 0
      if ccomp$ > 1, compflg = 1
      if cstart$ = 1, !cstart$
      cstart$ = prv_cstart$
      if cstart$ = 1, gcode$ = 1
      if ccomp$ = 4, pedmendcc
      if compflg = 1, pedmend
      !cend$
      du = u$ - prv_u$
      dv = v$ - prv_v$
      pdwtlchg
      dw = w$ - prv_w$
      if gcode$ = 0, plengthr2
      if gcode$ = 0, plengthr4
      if gcode$ = 1, plengthl2
      if gcode$ = 1, plengthl4

plengthxy        #Distance calculations XY
      if gcode$ = 0, plengthr2
      if gcode$ = 1, plengthl2
      if gcode$ = 2, plengthc2
      if gcode$ = 3, plengthc2
      if gcode$ = 11, plengthpedm

plngthuvgc3      #Distance calculations UVXY arcs
      sweep$ = strta - enda
      if strta < enda, sweep$ = (strta - enda) + 360

plngthuvgc2      #Distance calculations UVXY arcs
      sweep$ = enda - strta
      if strta > enda, sweep$ = (enda - strta) + 360

plngthuvclc      #Distance calculations UVXY arcs
      arcrad$ =  sqrt(darcx^2 + darcy^2)
      strta = atan2(darcy, darcx)
      enda = atan2(dc_ey, dc_ex)

plengthuvc2      #Distance calculations XY for arc
      darcx = x$ - xc$
      darcy = y$ - yc$
      dc_ex = prv_x$ - xc$
      dc_ey = prv_y$ - yc$
      plngthuvclc
      if prv_gcode$ = 2, plngthuvgc2
      if prv_gcode$ = 3, plngthuvgc3
      plengthc2

plengthuvc4      #Distance calculations UV for arc
      darcx = u$ - wxc$
      darcy = v$ - wyc$
      dc_ex = prv_u$ - wxc$
      dc_ey = prv_v$ - wyc$
      plngthuvclc
      if gcode$ = 2, plngthuvgc2
      if gcode$ = 3, plngthuvgc3
      plengthc4

plengthuv        #Distance calculations UV
      upprflg = 1
      if prv_gcode$ = 0, plengthr2
      if prv_gcode$ = 1, plengthl2
      u$ = wx$
      v$ = wy$
      du = u$ - prv_u$
      dv = v$ - prv_v$
      dw = 0
      if gcode$ = 0, plengthr4
      if gcode$ = 1, plengthl4
      if prv_gcode$ = 2, plengthuvc2
      if prv_gcode$ = 3, plengthuvc2
      if gcode$ = 2, plengthuvc4
      if gcode$ = 3, plengthuvc4

plength          #Distance calculations
      dx = x$ - prv_x$
      dy = y$ - prv_y$
      dz = z$ - prv_z$
      if uvflag$ = 0, plengthxy
      if uvflag$ > 0, plengthuv
      !x$, !y$, !z$, !u$, !v$, !w$, !gcode$

# --------------------------------------------------------------------------
# Parameter read postblocks:
# --------------------------------------------------------------------------
pprep$           #Pre-process postblock
#Allows post instructions after the post is parsed but before the NC and NCI file are opened.
#DO NOT ATTEMPT TO OUTPUT TO THE NC FILE IN THIS POSTBLOCK (OR ANY POSTBLOCKS YOU MAY CALL FROM HERE)
#BECAUSE THE NC OUTPUT FILE IS NOT YET OPENED!
      sub_level$ = 0     #Force subs off
      subout$ = 0        #Force output stream to NC file
      comm_filter$ = 0   #Allow output of all comments
      #sextnc$ = ".doc"  #Uncomment and change extension here to override
      spaces$ = 0
      use_alt_eob$ = no$

pwrtt$           #Pre-read NCI file

pparameter$      #Read operation parameters
      #rd_params is used to call pparameter postblock and read the parameters of the operation specified in rd_param_op_no
      #"pparameter", ~prmcode$, ~sparameter$, e$
      if prmcode$ = 20019, spasscomment = ucase(sparameter$)

# --------------------------------------------------------------------------
