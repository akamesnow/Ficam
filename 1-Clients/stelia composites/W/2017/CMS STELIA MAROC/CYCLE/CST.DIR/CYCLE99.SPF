PROC CYCLE99(REAL _SPL,REAL _SPD,REAL __FPL,REAL __FPD,REAL __APP,REAL _ROP,REAL _TDEP,REAL _FAL,REAL _IANG,REAL _NSP,INT _NRC,INT _NID,REAL _PIT,INT _VARI,INT _NUMTH,REAL _SDIS,REAL _MID,REAL _GDEP,REAL _PIT1,REAL _FDEP,INT _GST,INT _GUD,REAL _IFLANK,INT _PITA,STRING[15] _PITM,STRING[20] _PTAB,STRING[20] _PTABA,INT _DMODE,INT _AMODE) SAVE SBLOF DISPLOF ;ACTBLOCNO
;VERSION: 04.05.65.00 ;DATE: 2014-10-22
;CHANGE : 04.05.64.00 ;DATE: 2014-10-02
;Cycle support HMIsl
;Thread cutting cycle
DEF AXIS _XX,_ZZ,_IP0,_IP1,_IP2,_IP3,_IP4,_MAX
DEF INT _AI,_BA[7],_LP,_PM,_NIDX,_NRCX,_II,_ZU,_SL,_RG,_NUX,_NUI,_ZUFX,_ZUFG,_SR,_ALF,_FFLZ,_FRL,_H_NUMTH,_GG06,_SP,_ERR
DEF INT _SHOPTURN,_PLAN=1,_ZAF=1,_XAF=1,_TEMP,_H_AMODE[6],_H_MSNUM,_MA_NR_SP=0,_KA_NR_SP=-1,_H_DMODE[2],_CDIR,_GDIR,_C_M3,_ARTIS[16]
DEF REAL _P[7,2],_PG[7,2],_DRF=0,_DRF1=0,_HH,_GWT,_ZUAG,_ZUI,_ZUA,_ZUN,_ZU1,_ZUG,_ZUZ,_PP0,_PP1,_PP2,_PP3,_PPP1,_PPP2,_PPP3
DEF REAL _TA,_TA1,_TA2,_SPV,_SPVX,_SPVZ,_FK,_UM,_D,_F,_G,_UMQ,_KSDIFF[2],_C97_2,_C97_3,_WEG,_FPL,_FPD,_ALPHA,_APP
DEF REAL _FAK1,_FAK2,_FAK3,_FAK4
DEF STRING[35] _TEMP_FILE="/_N_MPF_DIR/_N_TEMP_CYCLE99_MPF"
DEF STRING[35] _LOG_FILE,_PROG,_SERR,_AX,_S_KA_NR
DEF INT _LOG,_LOG_ON=0
_H_DMODE[0]=(_DMODE _DEC1) _H_DMODE[1]=(_DMODE _DEC2)
IF ( (_H_DMODE[0]<0)OR(_H_DMODE[0]>3) ) GOTOF _FEHL10
IF ( (_H_DMODE[1]<0)OR(_H_DMODE[1]>2) )
_SERR=<<"(_DMODE: dec2)"
GOTOF _FEHL7
ENDIF
IF ( (_H_DMODE[0]>0)AND(($P_GG[6])<>(_H_DMODE[0])) )
_GG06=(_H_DMODE[0])
G[6]=_GG06
ENDIF
_XX=$P_AXN2 _ZZ=$P_AXN1
_NID=ABS(_NID) _GUD=ABS(_GUD)
$AC_LIFTFAST=0
_PROG=SUBSTR($P_PROG[$P_STACK-1],3,8)
IF(_PROG=="F_TR_CON")
_SHOPTURN=1
ELSE
_SHOPTURN=0
ENDIF
IF(ISFILE(_TEMP_FILE))AND($P_PROG[$P_STACK-1]<>"_N_TEMP_CYCLE99_MPF")
DELETE(_TEMP,_TEMP_FILE)
WRITE(_TEMP,_TEMP_FILE,";! only for internal diagnostics ! Date: "<<$A_DAY<<"."<<$A_MONTH<<"."<<($A_YEAR+2000)<<" "<<$A_HOUR<<":"<<$A_MINUTE<<":"<<$A_SECOND)
WRITE(_TEMP,_TEMP_FILE,";T-Number $P_TOOLNO="<<$P_TOOLNO)
WRITE(_TEMP,_TEMP_FILE,";D-Number $P_TOOL="<<$P_TOOL)
IF (($P_TOOL)AND($P_TOOLNO))
WRITE(_TEMP,_TEMP_FILE,";$TC_DP1[1,1]="<<$P_AD[1]<<"    ; TOOL-TYPE")
WRITE(_TEMP,_TEMP_FILE,";$TC_DP2[1,1]="<<$P_AD[2]<<"    ; CUTTING EDGE POSITION")
WRITE(_TEMP,_TEMP_FILE,";$TC_DP3[1,1]="<<$P_AD[3]<<"    ; TOOL GEO LENGTH 1")
WRITE(_TEMP,_TEMP_FILE,";$TC_DP4[1,1]="<<$P_AD[4]<<"    ; TOOL GEO LENGTH 2")
WRITE(_TEMP,_TEMP_FILE,";$TC_DP12[1,1]="<<$P_AD[12]<<"    ; TOOL WEAR LENGTH 1")
WRITE(_TEMP,_TEMP_FILE,";$TC_DP13[1,1]="<<$P_AD[13]<<"    ; TOOL WEAR LENGTH 2")
WRITE(_TEMP,_TEMP_FILE,";$TC_DP6[1,1]="<<$P_AD[6]<<"    ; TOOL RADIUS GEOMETRY")
WRITE(_TEMP,_TEMP_FILE,";$TC_DP15[1,1]="<<$P_AD[15]<<"    ; TOOL RADIUS WEAR")
WRITE(_TEMP,_TEMP_FILE,";$TC_DP8[1,1]="<<$P_AD[8]<<"    ; PLATE LENGTH")
WRITE(_TEMP,_TEMP_FILE,";$TC_DP9[1,1]="<<$P_AD[9]<<"    ; PLATE WIDTH")
WRITE(_TEMP,_TEMP_FILE,";$TC_DP10[1,1]="<<$P_AD[10]<<"    ; TOOLHOLDER ANGLE")
WRITE(_TEMP,_TEMP_FILE,";$TC_DP11[1,1]="<<$P_AD[11]<<"    ; CUTTING DIRECTION")
WRITE(_TEMP,_TEMP_FILE,";$TC_DP24[1,1]="<<$P_AD[24]<<"    ; CLEARANCE ANGLE")
ENDIF
IF ($P_TOOLNO>0)
WRITE(_TEMP,_TEMP_FILE,";T1")
WRITE(_TEMP,_TEMP_FILE,";M6")
ELSE
WRITE(_TEMP,_TEMP_FILE,";T0")
WRITE(_TEMP,_TEMP_FILE,";M6")
ENDIF
IF ($P_TOOL==0)
WRITE(_TEMP,_TEMP_FILE,";D0")
ELSE
WRITE(_TEMP,_TEMP_FILE,";D1")
ENDIF
WRITE(_TEMP,_TEMP_FILE,"G[06]="<<$P_GG[6]<<"    ; G17/G18/G19")
WRITE(_TEMP,_TEMP_FILE,"G[13]="<<$P_GG[13]<<"    ; G70/G71/...")
WRITE(_TEMP,_TEMP_FILE,"G[29]="<<$P_GG[29]<<"    ; DIAMON /...")
WRITE(_TEMP,_TEMP_FILE,"G[15]="<<$P_GG[15]<<"    ; G94/G95/...")
WRITE(_TEMP,_TEMP_FILE,"F"<<$P_F)
IF $P_MSNUM==0
WRITE(_TEMP,_TEMP_FILE,";$P_MSNUM=0 no spindle existant")
ELSE
WRITE(_TEMP,_TEMP_FILE,"S"<<$P_S[0]<<" M"<<$P_SDIR[$P_MSNUM])
ENDIF
WRITE(_TEMP,_TEMP_FILE,"CYCLE99("<<_SPL<<","<<_SPD<<","<<__FPL<<","<<__FPD<<","<<__APP<<","<<_ROP<<","<<_TDEP<<","<<_FAL<<","<<_IANG<<","<<_NSP<<","<<_NRC<<","<<_NID<<","<<_PIT<<","<<_VARI<<","<<_NUMTH<<","<<_SDIS<<","<<_MID<<","<<_GDEP<<","<<_PIT1<<","<<_FDEP<<","<<_GST<<","<<_GUD<<","<<_IFLANK<<","<<_PITA<<","<<_PITM<<","<<_PTAB<<","<<_PTABA<<","<<_DMODE<<","<<_AMODE<<")")
WRITE(_TEMP,_TEMP_FILE,"M30")
ENDIF
_LOG_FILE="/_N_MPF_DIR/_N_LOG_CYCLE99_"<<$P_CHANNO<<"_MPF"
_LOG_ON=ISFILE(_LOG_FILE)
IF(_LOG_ON)
DELETE(_LOG,_LOG_FILE)
WRITE(_LOG,_LOG_FILE,"-------------------")
WRITE(_LOG,_LOG_FILE,"Logfile CYCLE99: "<<$A_DAY<<"."<<$A_MONTH<<"."<<$A_YEAR<<" "<<$A_HOUR<<":"<<$A_MINUTE<<":"<<$A_SECOND)
ENDIF
IF _SC_TOOL_VALI[0]<>0
_ARTIS[0]=_SC_TOOL_VALI[0] _ARTIS[1]=_SC_TOOL_VALI[1] _ARTIS[2]=_SC_TOOL_VALI[2] _ARTIS[3]=_SC_TOOL_VALI[3] _ARTIS[4]=_SC_TOOL_VALI[4] _ARTIS[5]=_SC_TOOL_VALI[5] _ARTIS[6]=_SC_TOOL_VALI[6]
_ARTIS[7]=_SC_TOOL_ON_OFF[0] _ARTIS[8]=_SC_TOOL_ON_OFF[1]
IF (_ARTIS[0] MOD 10 <>1 )
GOTOF _FEHL13
ENDIF
_II=_ARTIS[0] DIV 10
IF ((_II MOD 10 > 3) OR (_II MOD 10 < 1))
GOTOF _FEHL13
ELSE
_ARTIS[11]=_II MOD 10
ENDIF
_II=_II DIV 10
IF ((_II MOD 10 > 2) OR (_II MOD 10 < 0))
GOTOF _FEHL13
ELSE
_ARTIS[12]=_II MOD 10
ENDIF
ENDIF
_END_ARTIS_STAT:
IF _PTAB<>""
_PIT1=0
ENDIF
_BA[0]=(_VARI _DEC1) _BA[1]=(_VARI _DEC2) _BA[2]=(_VARI _DEC3) _BA[3]=(_VARI _DEC4) _BA[4]=(_VARI _DEC5) _BA[5]=(_VARI _DEC6) _BA[6]=(_VARI _DEC7)
IF(_BA[0]<1)OR(_BA[0]>4)OR(_BA[2]<1)OR(_BA[2]>2)OR(_BA[4]<0)OR(_BA[4]>1)OR(_BA[5]<1)OR(_BA[5]>3)OR(_BA[6]<0)OR(_BA[6]>1) GOTOF _FEHL1
IF(_PIT<=0) GOTOF _FEHL2
IF($P_ACTFRAME[_XX,SC]<>1)OR($P_ACTFRAME[_ZZ,SC]<>1)GOTOF _FEHL3
IF(_ROP<0)OR(_SDIS<0)OR(_TDEP<0)GOTOF _FEHL4
IF(_BA[4]==0)
IF(_BA[5]<>2)AND(_NRC<=0) GOTOF _FEHL6
ELSE
IF(_BA[5]<>2)AND(_MID<=0) GOTOF _FEHL6
ENDIF
_H_AMODE[0]=(_AMODE _DEC1) _H_AMODE[1]=(_AMODE _DEC2) _H_AMODE[2]=(_AMODE _DEC3) _H_AMODE[3]=(_AMODE _DEC4) _H_AMODE[4]=(_AMODE _DEC5) _H_AMODE[5]=(_AMODE _DEC6)
IF ( (_H_AMODE[0]<0)OR(_H_AMODE[0]>1) )
_SERR=<<"(_AMODE: dec1)"
GOTOF _FEHL11
ENDIF
IF ( (_H_AMODE[1]<0)OR(_H_AMODE[1]>2) )
_SERR=<<"(_AMODE: dec2)"
GOTOF _FEHL11
ENDIF
IF ( (_H_AMODE[2]<0)OR(_H_AMODE[2]>2) )
_SERR=<<"(_AMODE: dec3)"
GOTOF _FEHL11
ENDIF
IF ( (_H_AMODE[3]<0)OR(_H_AMODE[3]>1) )
_SERR=<<"(_AMODE: dec4)"
GOTOF _FEHL11
ENDIF
IF ( (_H_AMODE[4]<0)OR(_H_AMODE[4]>1) )
_SERR=<<"(_AMODE: dec5)"
GOTOF _FEHL11
ENDIF
IF ( (_H_AMODE[5]<0)OR(_H_AMODE[5]>2) )
_SERR=<<"(_AMODE: dec6)"
GOTOF _FEHL11
ENDIF
IF (_NUMTH<0)
_SERR=<<"(N)"
GOTOF _FEHL11
ENDIF
IF _H_AMODE[4]==0
_H_NUMTH=1
ELSE
_H_NUMTH=_NUMTH
ENDIF
IF ( (_H_DMODE[1]==2)AND(_H_AMODE[1]==2))
_ALPHA=__FPD
IF ((_ALPHA<=-90)OR(_ALPHA>=90))
_SERR=<<"("<<AXSTRING($P_AXN2)<<"1ALPHA)"
GOTOF _FEHL11
ENDIF
ENDIF
IF (__APP<0)
_SERR=<<"(LW)"
GOTOF _FEHL11
ENDIF
IF (_GST<0)
_SERR=<<"(GST)"
GOTOF _FEHL11
ENDIF
IF ( (_PITA<0)OR(_PITA>4) )
_SERR=<<"(P)"
GOTOF _FEHL11
ENDIF
IF ( (_H_DMODE[1]==0)OR(_H_DMODE[1]==2) )
IF (_H_AMODE[0]==0)
_FPL=__FPL
ELSE
_FPL=_SPL+__FPL
ENDIF
ELSE
__FPL=_SPL _FPL=__FPL
ENDIF
IF ( (_H_DMODE[1]==1)OR(_H_DMODE[1]==2) )
IF ( _H_AMODE[1]==0 )
_FPD=__FPD
ELSE
IF ( _H_AMODE[1]==1 )
_FPD=_SPD+(2*__FPD)
ELSE
_FPD=_SPD+(2*((ABS(_FPL-_SPL))*TAN(_ALPHA)))
ENDIF
ENDIF
ELSE
__FPD=_SPD _FPD=__FPD
ENDIF
IF ( _H_AMODE[2]<>0 )
IF ( _H_AMODE[2]==1 )
_APP=-_ROP
ELSE
_APP=-__APP
ENDIF
ELSE
_APP=__APP
ENDIF
IF ( _H_AMODE[5]==0 )
_GST=1
ELSE
IF ( _H_AMODE[5]==2 )
_GST=-_GST
ENDIF
ENDIF
IF ($MCS_FUNCTION_MASK_TURN B_AND 'B1000000000000') GOTOF _M53041
_H_MSNUM=$P_MSNUM
IF(_H_MSNUM)
REPEAT
REPEAT
_KA_NR_SP=_KA_NR_SP+1
_S_KA_NR="$MC_AXCONF_MACHAX_USED["<<_KA_NR_SP<<"]"
IF ISVAR(_S_KA_NR)
_MA_NR_SP=$MC_AXCONF_MACHAX_USED[_KA_NR_SP]
ELSE
GOTOF _FEHL5
ENDIF
UNTIL(_MA_NR_SP>0)
_AX="AX"<<_MA_NR_SP
_MAX=(AXNAME(_AX))
UNTIL(_H_MSNUM==$MA_SPIND_ASSIGN_TO_MACHAX[_MAX])
IF(($MCS_AXIS_USAGE_ATTRIB[_KA_NR_SP]) B_AND 'B1000')
_CDIR=-1
ELSE
_CDIR=1
ENDIF
IF(($MCS_AXIS_USAGE_ATTRIB[_KA_NR_SP]) B_AND 'B100000')
_C_M3=-1
ELSE
_C_M3=1
ENDIF
ELSE
GOTOF _FEHL12
ENDIF
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE," $MCS_AXIS_USAGE["<<_KA_NR_SP<<"]="<<$MCS_AXIS_USAGE[_KA_NR_SP]*1)
WRITE(_LOG,_LOG_FILE," $MCS_AXIS_USAGE_ATTRIB["<<_KA_NR_SP<<"]="<<$MCS_AXIS_USAGE_ATTRIB[_KA_NR_SP]*1)
ENDIF
_M53041:
IF(($P_GG[29]==1) OR ($P_GG[29]==4))
_PLAN=1
ELSE
_PLAN=2
DIAMON
ENDIF
IF (($MC_DIAMETER_AX_DEF=="") OR ($MC_DIAMETER_AX_DEF==" "))
_ZAF=1 _XAF=1
DIAMOF
ELSE
IF _ZZ==AXNAME($MC_DIAMETER_AX_DEF)
_ZAF=_PLAN
ENDIF
IF _XX==AXNAME($MC_DIAMETER_AX_DEF)
_XAF=_PLAN
ENDIF
ENDIF
IF($P_GG[13]<3)
_FAK1=1
IF($MN_SCALING_SYSTEM_IS_METRIC)
IF($P_GG[13]==1)
_FAK1=1/$MN_SCALING_VALUE_INCH
ENDIF
ELSE
IF($P_GG[13]==2)
_FAK1=$MN_SCALING_VALUE_INCH
ENDIF
ENDIF
ELSE
_FAK1=1
ENDIF
_FAK2=1
IF($MN_SCALING_SYSTEM_IS_METRIC)
IF($P_GG[13]==1)OR($P_GG[13]==3)
_FAK2=1/$MN_SCALING_VALUE_INCH
ENDIF
ELSE
IF($P_GG[13]==2)OR($P_GG[13]==4)
_FAK2=$MN_SCALING_VALUE_INCH
ENDIF
ENDIF
IF($P_GG[13]==1)OR($P_GG[13]==3)
_FAK3=1/$MN_SCALING_VALUE_INCH
ELSE
_FAK3=1
ENDIF
_FAK4=1
IF($MN_SCALING_SYSTEM_IS_METRIC)
IF($P_GG[13]==3)
_FAK4=$MN_SCALING_VALUE_INCH
ENDIF
ELSE
IF($P_GG[13]==4)
_FAK4=1/$MN_SCALING_VALUE_INCH
ENDIF
ENDIF
IF(_PITA==2)
_PIT=$MN_SCALING_VALUE_INCH/_PIT
ENDIF
IF(_PITA==3)
_PIT=_PIT*$MN_SCALING_VALUE_INCH
ENDIF
IF(_PITA==4)
_PIT=_PIT*$PI
ENDIF
_PIT=_PIT*_FAK3
_ZU=(_BA[0]-1)DIV 2
IF(_BA[5]==2)
_FAL=0
ENDIF
_ZUG=_TDEP-_FAL
_SL=0
IF(_BA[5]<>2)
IF(_TDEP-_FAL-_FDEP<=0) GOTOF _FEHL6
ENDIF
IF(_BA[4]==1)AND(_BA[5]<>2)
IF(_MID<=0) GOTOF _FEHL6
IF(_ZU==0)
_NRC=_ZUG/_MID+0.499999
ELSE
IF(_ZU==1)
_NRC=POT(_ZUG/_MID/2)+1.499999
ENDIF
ENDIF
ENDIF
_SR=0
IF(_BA[5]<3)
_SR=1
IF(_BA[5]==2)
_NRC=1 _FAL=0 _FDEP=0 _GDEP=0
ENDIF
ENDIF
IF(_FAL<0)OR(_GDEP<0)OR(_FDEP<0) GOTOF _FEHL4
IF(_FAL+_FDEP>_TDEP) GOTOF _FEHL4
IF(_FAL>_TDEP) GOTOF _FEHL5
IF(_BA[5]<>2)
IF(_TDEP-_FAL-_FDEP<=0) GOTOF _FEHL6
ENDIF
IF(_SDIS<=0)
_SDIS=1*_FAK3
ENDIF
IF (_BA[6]==1)
_H_NUMTH=_H_NUMTH*(-1)
ENDIF
_RG=0 _H_NUMTH=_H_NUMTH MOD 360
IF(_H_NUMTH>=0)GOTOF _M101
_RG=1
_H_NUMTH=ABS(_H_NUMTH)
_M101:
IF(_H_NUMTH>0)GOTOF _M105
_H_NUMTH=1
_M105:
IF(ABS(_GST)>0)AND(ABS(_GST)<=ABS(_H_NUMTH)) GOTOF _M106
_GST=1
_M106:
_NUI=ABS(_GST)-1
IF(_RG==0) GOTOF _M108
_NUI=-1
_M107:
_NUI=_NUI+1
_II=_NUI*(_H_NUMTH-1)/2+1/4
_II=_II MOD _H_NUMTH
IF(_II<>ABS(_GST)-1) GOTOB _M107
_M108:
_P[3,0]=_SPD/2
_P[3,1]=_SPL
_P[5,0]=_FPD/2
_P[5,1]=_FPL
_AI=_BA[0] MOD 2
IF(_AI==1) GOTOF _M11
_AI=-1
_M11:
_LP=1
IF(ABS(_P[5,1]-_P[3,1])>=ABS(_P[5,0]-_P[3,0])) GOTOF _M12
_LP=0
_M12:
IF((ABS(_P[5,_LP]-_P[3,_LP])-_ROP)<=0) GOTOF _FEHL4
_HH=_P[5,_LP]-_P[3,_LP]
_PM=_HH/ABS(_HH)
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE," AI / LP / PM = "<<_AI<<" / "<<_LP<<" / "<<_PM)
ENDIF
IF($P_SDIR[$P_MSNUM]==5) GOTOF _FEHL7
_GDIR=-($P_SDIR[0]*2-7)*_PM*_CDIR*_C_M3
_FRL=-_CDIR*_GDIR
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE," M3/4: M"<<$P_SDIR[0])
WRITE(_LOG,_LOG_FILE," _CDIR:"<<_CDIR)
WRITE(_LOG,_LOG_FILE," _C_M3:"<<_C_M3)
WRITE(_LOG,_LOG_FILE," _GDIR:"<<_GDIR)
WRITE(_LOG,_LOG_FILE," _FRL: "<<_FRL)
ENDIF
IF ($MCS_FUNCTION_MASK_TURN B_AND 'B1000000000000') GOTOF _M5304
_SP=-1
IF($MCS_AXIS_USAGE[_KA_NR_SP]==3)
_SP=0
ELSE
IF($MCS_AXIS_USAGE[_KA_NR_SP]==5)
_SP=1
ENDIF
ENDIF
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"Spindel synchronisieren: _SP="<<_SP)
WRITE(_LOG,_LOG_FILE,"_FAK1="<<_FAK1<<" _FAK2="<<_FAK2<<" _FAK3="<<_FAK3<<" _FAK4="<<_FAK4)
WRITE(_LOG,_LOG_FILE,"$P_TOOLL[2]="<<$P_TOOLL[2]<<" $P_TOOLL[1]="<<$P_TOOLL[1])
ENDIF
IF(_SP>=0)
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"_SC_C97["<<_SP<<",0...3]= "<<_SC_C97[_SP,0]<<" , "<<_SC_C97[_SP,1]<<" , "<<_SC_C97[_SP,2]<<" , "<<_SC_C97[_SP,3])
WRITE(_LOG,_LOG_FILE,"$P_TC="<<$P_TC)
ENDIF
IF(_SC_C97[_SP,0]==1)
IF($P_TC)
GOTOF _FEHL9
ENDIF
$AC_MEAS_VALID=0
$AC_MEAS_TYPE=24
$AC_MEAS_P1_COORD=2
$AC_MEAS_P2_COORD=0
$AA_MEAS_POINT1[_ZZ]=_SC_C97[_SP,2]*_FAK3-$P_TOOLL[2]*_FAK1
$AA_MEAS_POINT1[_XX]=_SC_C97[_SP,3]*_FAK3-$P_TOOLL[1]*_FAK1
_ERR=MEASURE()
IF(_ERR) GOTOF _FEHL14
_C97_2=$AA_MEAS_POINT2[_ZZ]
_C97_3=$AA_MEAS_POINT2[_XX]/_PLAN
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"Z: "<<_SC_C97[_SP,2]<<"(MKS) = "<<_C97_2<<"(WKS)")
WRITE(_LOG,_LOG_FILE,"X: "<<_SC_C97[_SP,3]<<"(MKS) = "<<_C97_3<<"(WKS)")
WRITE(_LOG,_LOG_FILE,"Z MEAS_POINTS: "<<$AA_MEAS_POINT1[_ZZ]<<"(MKS) = "<<$AA_MEAS_POINT2[_ZZ]<<"(WKS)")
ENDIF
IF(_LP)
_D=_SPL-_C97_2
ELSE
_D=_C97_3-_SPD/2
ENDIF
_F=_PIT _G=_PIT1
IF(_G==0)
_UMQ=_D/_F
ELSE
_UMQ=POT(_F/_G)+2*_D*(-_PM)/_G
IF(_UMQ>=0)
_UMQ=-_PM*(_G/ABS(_G)*SQRT(_UMQ)-_F/_G)
ELSE
_UMQ=0
ENDIF
ENDIF
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"UMQ= "<<_UMQ*360)
WRITE(_LOG,_LOG_FILE,"D  = "<<_D)
WRITE(_LOG,_LOG_FILE,"F  = "<<_F)
WRITE(_LOG,_LOG_FILE,"G  = "<<_G)
ENDIF
IF(_LP)
_UMQ=-(_UMQ-TRUNC(_UMQ))*_FRL
ELSE
_UMQ=(_UMQ-TRUNC(_UMQ))*_FRL
ENDIF
_NSP=_NSP+_SC_C97[_SP,1]+_UMQ*360
_NSP=((_NSP MOD 360)+360) MOD 360
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"NSP= "<<_NSP)
WRITE(_LOG,_LOG_FILE,"UMQ= "<<_UMQ*360)
WRITE(_LOG,_LOG_FILE,"SYNC="<<_SC_C97[_SP,1])
ENDIF
ENDIF
ENDIF
_M5304:
_TA=(_P[5,1-_LP]-_P[3,1-_LP])/ABS(_P[5,_LP]-_P[3,_LP])
_P[1,_LP]=_P[3,_LP]-ABS(_APP)*_PM
_P[1,1-_LP]=_P[3,1-_LP]-ABS(_APP)*_TA+_SDIS*_AI
_P[2,_LP]=_P[3,_LP]-ABS(_APP)*_PM
_P[2,1-_LP]=_P[3,1-_LP]-ABS(_APP)*_TA
_P[0,_LP]=_P[3,_LP]
_P[0,1-_LP]=_P[3,1-_LP]+_SDIS*_AI
_P[4,_LP]=_P[5,_LP]-_ROP*_PM
_P[4,1-_LP]=_P[5,1-_LP]-_ROP*_TA
_P[6,_LP]=_P[5,_LP]
_P[6,1-_LP]=_P[5,1-_LP]+_SDIS*_AI
_ZUAG=_FDEP
_ZUFG=1
IF(_BA[2]==1)
_FFLZ=1
ELSE
_FFLZ=-1
ENDIF
_GWT=0
IF(_GDEP>0)AND(_H_NUMTH>1)GOTOF _M161
_GWT=_ZUG
GOTOF _M16
_M161:_GWT=_GWT+_GDEP
IF(_ZUAG>=_GWT)GOTOB _M161
_M16:
_L5:
_L4:
IF(_ZUAG>=_ZUG)GOTOF _ML4E
_L3:
_NUX=_NUI
IF(_RG==0)GOTOF _ML30
_NUX=_NUI*(_H_NUMTH-1)/2+1/4
_ML30:
_NUX=_NUX MOD _H_NUMTH
_ZUA=_ZUAG
_ZUFX=_ZUFG
IF(_GUD<>1)GOTOF _ML31
_C99[0]=_NUX+1
_ML31:
_L2:
IF(_ZUA>=_GWT)GOTOF _ML2E
IF(_SL==1)GOTOF _ML230
IF(_NRC<=1) GOTOF _ML220
CASE _ZU OF 1 GOTOF _ML222
_ML220:
_NRCX=TRUNC(_ZUA*_NRC/_ZUG)+1
_ZUN=_NRCX*_ZUG/_NRC
GOTOF _ML22
_ML222:
_NRCX=TRUNC((_NRC-1)*_ZUA*_ZUA/(_ZUG*_ZUG)+1)+1
IF(_NRCX<=2)
_NRCX=TRUNC(_ZUA/_ZUG*2*SQRT(_NRC-1))+1
_ZUN=_ZUG/2*_NRCX/SQRT(_NRC-1)
ELSE
_ZUN=_ZUG*SQRT((_NRCX-1)/(_NRC-1))
ENDIF
_ML22:
_ZUA=_ZUN
IF(_ZUA<=_GWT)GOTOF _ML23
_ML230:
_ZUA=_GWT
_ML23:
_PG[0,_LP]=_P[0,_LP] _PG[0,1-_LP]=_P[0,1-_LP]
_PG[3,_LP]=_P[3,_LP] _PG[3,1-_LP]=_P[3,1-_LP]-_ZUA*_AI
IF(_APP<0)
_PG[2,_LP]=_P[2,_LP]
_PG[2,1-_LP]=_P[2,1-_LP]
_PG[1,_LP]=_P[1,_LP]
_PG[1,1-_LP]=_P[1,1-_LP]
ELSE
_PG[2,_LP]=_P[2,_LP]
_PG[2,1-_LP]=_P[2,1-_LP]-_ZUA*_AI
_PG[1,_LP]=_P[1,_LP]
_PG[1,1-_LP]=_P[1,1-_LP]
ENDIF
_PG[4,_LP]=_P[4,_LP] _PG[4,1-_LP]=_P[4,1-_LP]-_ZUA*_AI
IF(_ROP>0)
_PG[5,_LP]=_P[5,_LP]
_PG[5,1-_LP]=_P[5,1-_LP]
_PG[6,_LP]=_P[6,_LP]
_PG[6,1-_LP]=_P[6,1-_LP]
ELSE
_PG[5,_LP]=_P[5,_LP]
_PG[5,1-_LP]=_P[5,1-_LP]-_ZUA*_AI
_PG[6,_LP]=_P[6,_LP]
_PG[6,1-_LP]=_P[6,1-_LP]
ENDIF
IF(_FFLZ>0)
_TA1=TAN(_IANG)*(2*_LP-1)*_AI
ELSE
_TA1=TAN(_IANG)*(2*_LP-1)*_AI*_ZUFX
ENDIF
_TA2=(_P[5,1-_LP]-_P[3,1-_LP])/(_P[5,_LP]-_P[3,_LP])
_ZUZ=(_TDEP-_ZUA)*_TA1/(1+_TA1*_TA2)
_SPVX=ABS(_PG[2,1-_LP]-_PG[1,1-_LP])
_SPVZ=ABS(_PG[3,_LP]-_PG[2,_LP])
_PP0=_PIT
IF(_PIT1<>0)
IF(_PIT==0)
_PP0=POT(_PIT)+_PIT1*2*ABS(_PG[4,_LP]-_PG[3,_LP])
IF(_PP0>=0)
_PP0=(SQRT(_PP0)+_PIT)/2
IF(_PP0<_PIT)
_PP0=_PIT
ENDIF
ELSE
_PP0=_PIT
ENDIF
ENDIF
ENDIF
_PP1=_PIT _PP2=_PIT _PP3=_PIT _PPP1=_PIT1 _PPP2=_PIT1 _PPP3=_PIT1
IF(_PIT1<>0)
IF(_APP<0)
_PP1=POT(_PIT)-_PIT1*2*(ABS(_PG[3,1]-_PG[2,1])-_ZUZ)
ELSE
_PP1=_PIT
ENDIF
_PP2=POT(_PIT)+_PIT1*2*_ZUZ
_PP3=POT(_PIT)+_PIT1*2*(ABS(_PG[4,1]-_PG[3,1])-_ZUZ)
IF(_PP1<0)OR(_PP2<0)OR(_PP3<0)GOTOF _FEHL8
_PP1=SQRT(_PP1)
_PP2=SQRT(_PP2)
_PP3=SQRT(_PP3)
ENDIF
IF(_H_NUMTH<=1)
_SPV=_NSP
ELSE
_SPV=_NSP+_NUX*360/_H_NUMTH
ENDIF
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE," -----------------------------------")
WRITE(_LOG,_LOG_FILE," SPV(0)="<<_SPV)
ENDIF
IF(_APP<0)
_SPV=_SPV+_FRL*_PM*_SPVX*360/_PP0
ENDIF
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE," SPV(1)="<<_SPV<<" + Winkel="<<_FRL*_PM*_SPVX*360/_PP0)
ENDIF
IF(_PP1==_PIT)
_UM=_SPVZ/_PIT
ELSE
_UM=POT(_PIT/_PIT1)-2*_SPVZ/_PIT1
IF(_UM>=0)
_UM=-_PIT1/ABS(_PIT1)*SQRT(_UM)+_PIT/_PIT1
ELSE
_UM=0
ENDIF
ENDIF
_SPV=_SPV+_FRL*_PM*_UM*360
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE," SPV(2)="<<_SPV<<" + Winkel="<<_FRL*_PM*_UM*360<<" _UM="<<_UM)
ENDIF
_SPV=_SPV-_FRL*_AI*_PM*(_LP*2-1)*_ZUZ*360/_PP0
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE," SPV(3)="<<_SPV<<" - Winkel="<<_FRL*_AI*_PM*(_LP*2-1)*_ZUZ*360/_PP0)
ENDIF
IF(_SPV>=0)
_SPV=TRUNC(_SPV*1000+0.5)/1000
ELSE
_SPV=TRUNC(_SPV*1000-0.5)/1000
ENDIF
_SPV=((_SPV MOD 360)+360) MOD 360
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE," SPV   ="<<_SPV)
ENDIF
_IP0=_XX _IP1=_ZZ _IP2=_ZZ _IP3=_ZZ _IP4=_XX
IF(_APP<0)
IF(_LP==0)
_IP0=_ZZ
ENDIF
IF(ABS(_PG[3,0]-_PG[2,0])>ABS(_PG[3,1]-_PG[2,1]))
_IP1=_XX
ENDIF
IF(ABS(_PG[3,1-_LP]-_PG[2,1-_LP])>ABS(_PG[3,_LP]-_PG[2,_LP]))
_FK=ABS(_PG[3,1-_LP]-_PG[2,1-_LP])/ABS(_APP)
_PP1=_PP1*_FK
_PPP1=_PPP1*_FK
ENDIF
ELSE
IF(_LP)
_IP1=_XX
ENDIF
ENDIF
IF(_ROP)
IF(_LP==0)
_IP4=_ZZ
ENDIF
IF(ABS(_PG[5,0]-_PG[4,0])>ABS(_PG[5,1]-_PG[4,1]))
_IP3=_XX
ENDIF
IF(ABS(_PG[5,1-_LP]-_PG[4,1-_LP])>ABS(_PG[5,_LP]-_PG[4,_LP]))
_FK=ABS(_PG[5,1-_LP]-_PG[4,1-_LP])/_ROP
_PP3=_PP3*_FK
_PPP3=_PPP3*_FK
ENDIF
ELSE
IF(_LP)
_IP3=_XX
ENDIF
ENDIF
IF(_LP==0)
_IP2=_XX
ENDIF
IF(_GUD==1)
_C99[1]=_NRC-_NRCX
ENDIF
_NIDX=_NID+1
IF(_ZUA==_TDEP)GOTOF _ML24
_NIDX=1
_ML24:
_L1:
IF(_NIDX<1)GOTOF _ML1E
_NIDX=_NIDX-1
IF (_ARTIS[0]==11)
M=QU(_ARTIS[7])
ENDIF
SBLON
N20 G0 G90 AX[_XX]=_PG[1,0]*_XAF AX[_ZZ]=_PG[1,1]*_ZAF
SBLOF
IF(_LP==1)
IF(_AI==1)
_ALF=3
ELSE
_ALF=7
ENDIF
ELSE
IF(_AI==1)
_ALF=1
ELSE
_ALF=5
ENDIF
ENDIF
IF(NOT _SHOPTURN)
IF(_LP)
_DRF1=$AC_DRF[_XX]
ELSE
_DRF1=$AC_DRF[_ZZ]
ENDIF
ENDIF
IF(_PIT1==0)
IF(_APP>=0)
IF(_ROP==0)
N30 G0 AX[_XX]=_PG[2,0]*_XAF AX[_ZZ]=_PG[2,1]*_ZAF
N32 G33 AX[_XX]=_PG[5,0]*_XAF AX[_ZZ]=_PG[5,1]*_ZAF IP[_IP2]=_PIT SF=_SPV LFON DILF=ABS(_ZUA+_SDIS) LFWP ALF=_ALF
ELSE
N40 G0 AX[_XX]=_PG[2,0]*_XAF AX[_ZZ]=_PG[2,1]*_ZAF
N42 G33 AX[_XX]=_PG[4,0]*_XAF AX[_ZZ]=_PG[4,1]*_ZAF IP[_IP2]=_PIT SF=_SPV LFON DILF=ABS(_ZUA+_SDIS) LFWP ALF=_ALF
N44 G33 AX[_XX]=_PG[5,0]*_XAF AX[_ZZ]=_PG[5,1]*_ZAF IP[_IP3]=_PP3
ENDIF
ELSE
IF(_ROP==0)
N50 G33 AX[_XX]=_PG[2,0]*_XAF AX[_ZZ]=_PG[2,1]*_ZAF IP[_IP0]=_PIT SF=_SPV LFON DILF=ABS(_ZUA+_SDIS) LFWP ALF=_ALF
N52 G33 AX[_XX]=_PG[3,0]*_XAF AX[_ZZ]=_PG[3,1]*_ZAF IP[_IP1]=_PP1
N54 G33 AX[_XX]=_PG[5,0]*_XAF AX[_ZZ]=_PG[5,1]*_ZAF IP[_IP2]=_PIT
ELSE
N60 G33 AX[_XX]=_PG[2,0]*_XAF AX[_ZZ]=_PG[2,1]*_ZAF IP[_IP0]=_PIT SF=_SPV LFON DILF=ABS(_ZUA+_SDIS) LFWP ALF=_ALF
N62 G33 AX[_XX]=_PG[3,0]*_XAF AX[_ZZ]=_PG[3,1]*_ZAF IP[_IP1]=_PP1
N64 G33 AX[_XX]=_PG[4,0]*_XAF AX[_ZZ]=_PG[4,1]*_ZAF IP[_IP2]=_PIT
N66 G33 AX[_XX]=_PG[5,0]*_XAF AX[_ZZ]=_PG[5,1]*_ZAF IP[_IP3]=_PP3
ENDIF
ENDIF
ELSE
IF(_PIT1>0)
IF(_APP>=0)
IF(_APP==0)
IF(_ROP==0)
N100 G0 AX[_XX]=_PG[2,0]*_XAF AX[_ZZ]=_PG[2,1]*_ZAF
N102 G34 AX[_XX]=_PG[5,0]*_XAF AX[_ZZ]=_PG[5,1]*_ZAF IP[_IP2]=_PP2 F=_PPP2 SF=_SPV LFON DILF=ABS(_ZUA+_SDIS) LFWP ALF=_ALF
ELSE
N110 G0 AX[_XX]=_PG[2,0]*_XAF AX[_ZZ]=_PG[2,1]*_ZAF
N112 G34 AX[_XX]=_PG[4,0]*_XAF AX[_ZZ]=_PG[4,1]*_ZAF IP[_IP2]=_PP2 F=_PPP2 SF=_SPV LFON DILF=ABS(_ZUA+_SDIS) LFWP ALF=_ALF
N114 G34 AX[_XX]=_PG[5,0]*_XAF AX[_ZZ]=_PG[5,1]*_ZAF IP[_IP3]=_PP3 F=_PPP3
ENDIF
ELSE
IF(_ROP==0)
N120 G0 AX[_XX]=_PG[2,0]*_XAF AX[_ZZ]=_PG[2,1]*_ZAF
N122 G33 AX[_XX]=_PG[3,0]*_XAF AX[_ZZ]=_PG[3,1]*_ZAF IP[_IP2]=_PIT SF=_SPV LFON DILF=ABS(_ZUA+_SDIS) LFWP ALF=_ALF
N124 G34 AX[_XX]=_PG[5,0]*_XAF AX[_ZZ]=_PG[5,1]*_ZAF IP[_IP2]=_PP2 F=_PPP2
ELSE
N130 G0 AX[_XX]=_PG[2,0]*_XAF AX[_ZZ]=_PG[2,1]*_ZAF
N132 G33 AX[_XX]=_PG[3,0]*_XAF AX[_ZZ]=_PG[3,1]*_ZAF IP[_IP2]=_PIT SF=_SPV LFON DILF=ABS(_ZUA+_SDIS) LFWP ALF=_ALF
N134 G34 AX[_XX]=_PG[4,0]*_XAF AX[_ZZ]=_PG[4,1]*_ZAF IP[_IP2]=_PP2 F=_PPP2
N136 G34 AX[_XX]=_PG[5,0]*_XAF AX[_ZZ]=_PG[5,1]*_ZAF IP[_IP3]=_PP3 F=_PPP3
ENDIF
ENDIF
ELSE
IF(_ROP==0)
N150 G33 AX[_XX]=_PG[2,0]*_XAF AX[_ZZ]=_PG[2,1]*_ZAF IP[_IP0]=_PP0 SF=_SPV LFON DILF=ABS(_ZUA+_SDIS) LFWP ALF=_ALF
N152 G34 AX[_XX]=_PG[3,0]*_XAF AX[_ZZ]=_PG[3,1]*_ZAF IP[_IP1]=_PP1 F=_PPP1
N154 G34 AX[_XX]=_PG[5,0]*_XAF AX[_ZZ]=_PG[5,1]*_ZAF IP[_IP2]=_PP2 F=_PPP2
ELSE
N160 G33 AX[_XX]=_PG[2,0]*_XAF AX[_ZZ]=_PG[2,1]*_ZAF IP[_IP0]=_PP0 SF=_SPV LFON DILF=ABS(_ZUA+_SDIS) LFWP ALF=_ALF
N162 G34 AX[_XX]=_PG[3,0]*_XAF AX[_ZZ]=_PG[3,1]*_ZAF IP[_IP1]=_PP1 F=_PPP1
N164 G34 AX[_XX]=_PG[4,0]*_XAF AX[_ZZ]=_PG[4,1]*_ZAF IP[_IP2]=_PP2 F=_PPP2
N166 G34 AX[_XX]=_PG[5,0]*_XAF AX[_ZZ]=_PG[5,1]*_ZAF IP[_IP3]=_PP3 F=_PPP3
ENDIF
ENDIF
ELSE
IF(_APP>=0)
IF(_APP==0)
IF(_ROP==0)
N200 G0 AX[_XX]=_PG[2,0]*_XAF AX[_ZZ]=_PG[2,1]*_ZAF
N202 G35 AX[_XX]=_PG[5,0]*_XAF AX[_ZZ]=_PG[5,1]*_ZAF IP[_IP2]=_PP2 F=-_PPP2 SF=_SPV LFON DILF=ABS(_ZUA+_SDIS) LFWP ALF=_ALF
ELSE
N210 G0 AX[_XX]=_PG[2,0]*_XAF AX[_ZZ]=_PG[2,1]*_ZAF
N212 G35 AX[_XX]=_PG[4,0]*_XAF AX[_ZZ]=_PG[4,1]*_ZAF IP[_IP2]=_PP2 F=-_PPP2 SF=_SPV LFON DILF=ABS(_ZUA+_SDIS) LFWP ALF=_ALF
N214 G35 AX[_XX]=_PG[5,0]*_XAF AX[_ZZ]=_PG[5,1]*_ZAF IP[_IP3]=_PP3 F=-_PPP3
ENDIF
ELSE
IF(_ROP==0)
N220 G0 AX[_XX]=_PG[2,0]*_XAF AX[_ZZ]=_PG[2,1]*_ZAF
N222 G33 AX[_XX]=_PG[3,0]*_XAF AX[_ZZ]=_PG[3,1]*_ZAF IP[_IP2]=_PIT SF=_SPV LFON DILF=ABS(_ZUA+_SDIS) LFWP ALF=_ALF
N224 G35 AX[_XX]=_PG[5,0]*_XAF AX[_ZZ]=_PG[5,1]*_ZAF IP[_IP2]=_PP2 F=-_PPP2
ELSE
N230 G0 AX[_XX]=_PG[2,0]*_XAF AX[_ZZ]=_PG[2,1]*_ZAF
N232 G33 AX[_XX]=_PG[3,0]*_XAF AX[_ZZ]=_PG[3,1]*_ZAF IP[_IP2]=_PIT SF=_SPV LFON DILF=ABS(_ZUA+_SDIS) LFWP ALF=_ALF
N234 G35 AX[_XX]=_PG[4,0]*_XAF AX[_ZZ]=_PG[4,1]*_ZAF IP[_IP2]=_PP2 F=-_PPP2
N236 G35 AX[_XX]=_PG[5,0]*_XAF AX[_ZZ]=_PG[5,1]*_ZAF IP[_IP3]=_PP3 F=-_PPP3
ENDIF
ENDIF
ELSE
IF(_ROP==0)
N250 G33 AX[_XX]=_PG[2,0]*_XAF AX[_ZZ]=_PG[2,1]*_ZAF IP[_IP0]=_PP0 SF=_SPV LFON DILF=ABS(_ZUA+_SDIS) LFWP ALF=_ALF
N252 G35 AX[_XX]=_PG[3,0]*_XAF AX[_ZZ]=_PG[3,1]*_ZAF IP[_IP1]=_PP1 F=-_PPP1
N254 G35 AX[_XX]=_PG[5,0]*_XAF AX[_ZZ]=_PG[5,1]*_ZAF IP[_IP2]=_PP2 F=-_PPP2
ELSE
N260 G33 AX[_XX]=_PG[2,0]*_XAF AX[_ZZ]=_PG[2,1]*_ZAF IP[_IP0]=_PP0 SF=_SPV LFON DILF=ABS(_ZUA+_SDIS) LFWP ALF=_ALF
N262 G35 AX[_XX]=_PG[3,0]*_XAF AX[_ZZ]=_PG[3,1]*_ZAF IP[_IP1]=_PP1 F=-_PPP1
N264 G35 AX[_XX]=_PG[4,0]*_XAF AX[_ZZ]=_PG[4,1]*_ZAF IP[_IP2]=_PP2 F=-_PPP2
N266 G35 AX[_XX]=_PG[5,0]*_XAF AX[_ZZ]=_PG[5,1]*_ZAF IP[_IP3]=_PP3 F=-_PPP3
ENDIF
ENDIF
ENDIF
ENDIF
N70 G0 LFOF ALF=0
IF($P_LIFTFAST==0)
N80 G0 AX[_XX]=_PG[6,0]*_XAF AX[_ZZ]=_PG[6,1]*_ZAF
ENDIF
IF(NOT _SHOPTURN)
IF(_LP)
_DRF=$AC_DRF[_XX]
ELSE
_DRF=$AC_DRF[_ZZ]
ENDIF
ENDIF
IF($P_LIFTFAST==0)GOTOF _MN60
_NIDX=_NIDX+1
$AC_LIFTFAST=0
_MN60:
IF(_GUD<>1)GOTOF _ML19
STOPRE
IF((_C99[3] B_AND 1)==0)GOTOF _ML19
N400 G0 G90 AX[_XX]=_PG[1,0]*_XAF AX[_ZZ]=_PG[1,1]*_ZAF
M0
STOPRE
_ML19:
IF(_GUD<>1)GOTOF _ML1
IF(_NIDX>0) OR ((_C99[3] B_AND 4)==0)GOTOF _ML1
_NIDX=1
_ML1:
IF(_NIDX==0)AND(_DRF<>_DRF1)
_NIDX=1
ELSE
ENDIF
GOTOB _L1
_ML1E:
_ML2:
_ZUFX=-_ZUFX
IF(_GUD<>1)GOTOF _ML29
IF(_C99[2]<=0)OR(_C99[2]==_NRC)GOTOF _ML29
_NRC=_C99[2]
_ML29:
_C99[2]=0
GOTOB _L2
_ML2E:
IF(_GUD<>1)GOTOF _ML39
IF((_C99[3] B_AND 3)<>2)OR(_H_NUMTH==1)GOTOF _ML39
N110 G0 G90 AX[_XX]=_PG[1,0]*_XAF AX[_ZZ]=_PG[1,1]*_ZAF
M0
STOPRE
_ML39:
_ML3:
IF(_GST<0)GOTOF _ML3E
_NUI=_NUI+1
IF(_NUI>=_H_NUMTH)GOTOF _ML3E
GOTOB _L3
_ML3E:
_ZUAG=_GWT
_ZUFG=-_ZUFX
_GWT=_GWT+_GDEP
IF(_GWT<=_ZUG)GOTOF _ML40
_GWT=_ZUG
_ML40:
IF(_GST<0)GOTOF _ML42
_NUI=0
_ML42:
GOTOB _L4
_ML4E:
_ML5:
IF(_ZUG==_TDEP)OR(_SR)GOTOF _ML5E
_SL=1
_ZUG=_TDEP
_GWT=_TDEP
GOTOB _L5
_ML5E:
SBLON
N120 G0 G90 AX[_XX]=_PG[1,0]*_XAF AX[_ZZ]=_PG[1,1]*_ZAF
LFOF
IF (_ARTIS[0]==11)
M=QU(_ARTIS[8])
ENDIF
IF(_GUD<>1)GOTOF _MR1
_C99[0]=0
_C99[1]=0
_MR1:
RET
_FEHL1: STOPRE
N709901 SETAL(61002)
RET
_FEHL2: STOPRE
N709902 SETAL(61001)
RET
_FEHL3: STOPRE
N709903 SETAL(61011)
RET
_FEHL4: STOPRE
N709904 SETAL(61605)
RET
_FEHL5: STOPRE
N709905 SETAL(61010)
RET
_FEHL6: STOPRE
N709906 SETAL(61610)
RET
_FEHL7: STOPRE
N709907 SETAL(61102)
RET
_FEHL8: STOPRE
N709908 SETAL(61244)
RET
_FEHL9: STOPRE
N709909 SETAL(61612)
RET
_FEHL10: STOPRE
N709910 SETAL(61158)
RET
_FEHL11: STOPRE
N709911 SETAL(61019,_SERR)
RET
_FEHL12: STOPRE
N709912 SETAL(61287)
RET
_FEHL13:STOPRE
N709913 SETAL(62106)
RET
_FEHL14:STOPRE
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"Fehler 14: interner Zyklusfehler bei Frame-Berechnung (MEASURE->"<<_ERR<<")")
ENDIF
N709914 SETAL(61403)
RET
