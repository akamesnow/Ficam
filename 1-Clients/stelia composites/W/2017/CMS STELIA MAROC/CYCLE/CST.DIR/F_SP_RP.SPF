PROC F_SP_RP(INT _POSR,REAL _X0,REAL _Z0,INT _MODE,REAL _Y0) SAVE PREPRO SBLOF DISPLOF
;VERSION: 04.05.65.00 ;DATE: 2014-10-22
;CHANGE : 04.05.62.00 ;DATE: 2014-09-15
;ShopTurn: Retract Cycle
DEF AXIS _XX,_YY,_ZZ
DEF INT _P29,_I,_STAT,_PAR,_ERR,_ERRM,_NUM=0,_ST_RP=0,_PARK=0,S_ZIEL=0,_TCI=0,_ST_RETRACT=0,_INTERPOL=0,_WTYP,_SL,_TM1,_TM3,_DIR
DEF INT _SLT[2,10]=set(0,1,2,3,4,5,6,7,8,9,0,2,1,4,3,7,6,5,8,9)
DEF INT _SLX[2,10]=set(0,1,2,3,4,5,6,7,8,9,0,4,3,2,1,5,8,7,6,9)
DEF REAL _P[8,2],_TCP[3],_TCPWKS[3]=REP(0),_TCPENS[3],_ACTPOS[3],_ZP[3],_TOOLL[3],_FAK1,_FAK2,_PARK_Y=0,_Z_TR,_SD,_SD1,_SD2,_TEMP_RPT[5],S_WWP_Y
DEF REAL _NO_VAL=1EX300
DEF REAL _RPT[6]=REP(1EX300)
DEF BOOL _NOGO_TCP=0,_IS_INCH,_Y_EXISTS
DEF FRAME _PFRAME,_WPFRAME,_PARTFRAME,_FRAME,_VECT
DEF INT _MD9898='H00200000'
DEF INT _MD9899=0
DEF INT _LOG,_LOG_ON
DEF STRING[35] _LOG_FILE
IF($P_GG[13]<3)
_FAK1=1
IF($MN_SCALING_SYSTEM_IS_METRIC)
IF($P_GG[13]==1)
_FAK1=1/$MN_SCALING_VALUE_INCH
ENDIF
ELSE
IF($P_GG[13]==2)
_FAK1=$MN_SCALING_VALUE_INCH
ENDIF
ENDIF
ELSE
_FAK1=1
ENDIF
_FAK2=1
IF($MN_SCALING_SYSTEM_IS_METRIC)
IF($P_GG[13]==1)OR($P_GG[13]==3)
_FAK2=1/$MN_SCALING_VALUE_INCH
ENDIF
ELSE
IF($P_GG[13]==2)OR($P_GG[13]==4)
_FAK2=$MN_SCALING_VALUE_INCH
ENDIF
ENDIF
IF((NOT(_MD9898 B_AND 'H01000000'))AND(_Y0<>_SC_NO_VAL)AND($P_SUBPAR[3]))
_INTERPOL=1
ENDIF
IF(_POSR==9)
_POSR=0
_INTERPOL=0
ENDIF
_LOG_FILE="/_N_MPF_DIR/_N_LOG_F_SP_RP_"<<$P_CHANNO<<"_MPF"
_LOG_ON=ISFILE(_LOG_FILE)
; DELETE(_LOG,_LOG_FILE)
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"-------------------")
WRITE(_LOG,_LOG_FILE,"Logfile F_SP_RP: "<<$A_DAY<<"."<<$A_MONTH<<"."<<$A_YEAR<<" "<<$A_HOUR<<":"<<$A_MINUTE<<":"<<$A_SECOND)
WRITE(_LOG,_LOG_FILE,"Aufruf aus "<<SUBSTR($P_PROG[$P_STACK-1],3,STRLEN($P_PROG[$P_STACK-1])-3-4))
IF($MN_SCALING_SYSTEM_IS_METRIC)
WRITE(_LOG,_LOG_FILE,"Grundsystem: Metric")
ELSE
WRITE(_LOG,_LOG_FILE,"Grundsystem: Inch")
ENDIF
WRITE(_LOG,_LOG_FILE,"G7"<<1-($P_GG[13] MOD 2)<<SUBSTR("0",0,($P_GG[13]-1)/2)<<": "<<_FAK1<<" / "<<_FAK2)
WRITE(_LOG,_LOG_FILE,"Wertefolge: X/Z")
WRITE(_LOG,_LOG_FILE,"RP: "<<_F_RPT[0]*_FAK2<<"/"<<_F_RPT[1]*_FAK2<<"/"<<_F_RPT[2]*_FAK2<<"/"<<_F_RPT[3]*_FAK2<<"/XR:"<<_F_RPT[4]*_FAK2)
WRITE(_LOG,_LOG_FILE,"Letzte/neue Richtung: "<<_F_RP_DIR[0]<<"/"<<_F_RP_DIR[1])
CASE _POSR OF 0 GOTOF S_POSR_0 1 GOTOF S_POSR_1 2 GOTOF S_POSR_2 3 GOTOF S_POSR_3 4 GOTOF S_POSR_4 5 GOTOF S_POSR_5 6 GOTOF S_POSR_6 7 GOTOF S_POSR_7 8 GOTOF S_POSR_8 9 GOTOF S_POSR_9 10 GOTOF S_POSR_10 11 GOTOF S_POSR_11
WRITE(_LOG,_LOG_FILE,"Fehler: _POSR unbekannt ("<<_POSR<<")")
S_POSR_0:
S_POSR_9:
WRITE(_LOG,_LOG_FILE,"Richtung: Zur Bearbeitung("<<_X0<<"/"<<_Z0<<")")
GOTOF S_POSR_END
S_POSR_1:
S_POSR_2:
S_POSR_7:
S_POSR_8:
WRITE(_LOG,_LOG_FILE,"Richtung: Zum Werkzeugwechsel")
WRITE(_LOG,_LOG_FILE,"WWP: "<<_F_TCP[0]*_FAK2<<"/"<<_F_TCP[1]*_FAK2<<":"<<_F_TCP[2]<<"(0=WKS;1=MKS)")
GOTOF S_POSR_END
S_POSR_3:
WRITE(_LOG,_LOG_FILE,"Check: Startpunkt ("<<_X0<<"/"<<_Z0<<")")
GOTOF S_POSR_END
S_POSR_4:
WRITE(_LOG,_LOG_FILE,"Check: Endpunkt ("<<_X0<<"/"<<_Z0<<")")
GOTOF S_POSR_END
S_POSR_5:
WRITE(_LOG,_LOG_FILE,"Richtung: Zur Parkposition WKS("<<_X0<<"/"<<_Z0<<")")
GOTOF S_POSR_END
S_POSR_6:
WRITE(_LOG,_LOG_FILE,"Richtung: Zur Parkposition MKS("<<_X0<<"/"<<_Z0<<")")
GOTOF S_POSR_END
S_POSR_10:
WRITE(_LOG,_LOG_FILE,"Zielpunkt anfahren WKS("<<_X0<<"/"<<_Z0<<"/"<<_Y0<<")")
GOTOF S_POSR_END
S_POSR_11:
WRITE(_LOG,_LOG_FILE,"Zielpunkt anfahren MKS("<<_X0<<"/"<<_Z0<<"/"<<_Y0<<")")
GOTOF S_POSR_END
S_POSR_END:
ENDIF
_Y_EXISTS=FALSE
_YY=NO_AXIS
IF($P_GG[6]==1)
_ZZ=$P_AXN3
_XX=$P_AXN1
IF(_F_TRAANG)OR(_F_Y_AXIS)
_YY=$P_AXN2
_Y_EXISTS=TRUE
ENDIF
ELSE
IF($P_GG[6]==2)
_ZZ=$P_AXN1
_XX=$P_AXN2
IF(_F_TRAANG)OR(_F_Y_AXIS)
_YY=$P_AXN3
_Y_EXISTS=TRUE
ENDIF
ELSE
_ZZ=$P_AXN2
_XX=$P_AXN3
IF(_F_TRAANG)OR(_F_Y_AXIS)
_YY=$P_AXN1
_Y_EXISTS=TRUE
ENDIF
ENDIF
ENDIF
_RPT[0]=SET(_F_RPT[0],_F_RPT[1],_F_RPT[2],_F_RPT[3],_F_RPT[4],_F_RPT[5])
IF($P_TOOLNO)AND($P_TOOL)AND($MCS_FUNCTION_MASK_TECH B_AND 'B100')
_WTYP=$P_AD[1]
_SL=_SLT[$P_ACTFRAME[_ZZ,MI],$P_AD[2]]
_SL=_SLX[$P_ACTFRAME[_XX,MI],_SL]
IF(_WTYP<500)OR(_WTYP>599)
IF(_SL>=5)AND(_SL<=8)
_SD=0
IF(_SL==6)OR(_SL==8)
_TM1=0
IF(_SL==6)
_TM3=1
ENDIF
ELSE
_TM1=2
IF(_SL==5)
_TM3=1
ENDIF
ENDIF
IF(_TM1<2)
IF(_F_AX_EXISTS[6])AND($MCS_FUNCTION_MASK_TECH B_AND 'H01')
_SD2=$P_TOOLL[2]
ELSE
_SD2=$P_TOOLL[1]
ENDIF
ELSE
_SD2=$P_TOOLL[2]
ENDIF
_DIR=1
IF(NOT((_F_AX_EXISTS[6])AND($MCS_FUNCTION_MASK_TECH B_AND 'H01')))
IF(_TM1>=2)AND(_F_MASPI==2)
_DIR=-_DIR
ENDIF
IF(_TM3==1)
_DIR=-_DIR
ENDIF
ENDIF
FOR _I=1 TO $P_TOOLND[$P_TOOLNO]
IF($TC_DP2[$P_TOOLNO,$P_TOOLD[$P_TOOLNO,_I]]==$TC_DP2[$P_TOOLNO,$P_TOOL])
IF(_TM1<2)
IF(_F_AX_EXISTS[6])AND($MCS_FUNCTION_MASK_TECH B_AND 'H01')
_SD1=$TC_DP4[$P_TOOLNO,$P_TOOLD[$P_TOOLNO,_I]]+$TC_DP13[$P_TOOLNO,$P_TOOLD[$P_TOOLNO,_I]]+$TC_DP22[$P_TOOLNO,$P_TOOLD[$P_TOOLNO,_I]]
ELSE
_SD1=$TC_DP3[$P_TOOLNO,$P_TOOLD[$P_TOOLNO,_I]]+$TC_DP12[$P_TOOLNO,$P_TOOLD[$P_TOOLNO,_I]]+$TC_DP21[$P_TOOLNO,$P_TOOLD[$P_TOOLNO,_I]]
ENDIF
ELSE
_SD1=$TC_DP4[$P_TOOLNO,$P_TOOLD[$P_TOOLNO,_I]]+$TC_DP13[$P_TOOLNO,$P_TOOLD[$P_TOOLNO,_I]]+$TC_DP22[$P_TOOLNO,$P_TOOLD[$P_TOOLNO,_I]]
ENDIF
IF(_SD1*_DIR>_SD2*_DIR)AND(_SD<ABS(_SD1-_SD2)*_FAK1)
_SD=ABS(_SD1-_SD2)*_FAK1
ENDIF
ENDIF
ENDFOR
IF(_SD)
IF(_SL==8)
_RPT[0]=_RPT[0]+_SD/_FAK2
IF(_F_RPT[4]<>_NO_VAL)
_RPT[4]=_RPT[4]+_SD/_FAK2
ENDIF
ELSE
IF(_SL==6)
IF(_F_RPT[2]<>_NO_VAL)
_RPT[2]=_RPT[2]-_SD/_FAK2
ENDIF
ELSE
IF(_SL==7)
_RPT[1]=_RPT[1]+_SD/_FAK2
ELSE
IF(_F_RPT[3]<>_NO_VAL)
_RPT[3]=_RPT[3]-_SD/_FAK2
ENDIF
ENDIF
ENDIF
ENDIF
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"Schneidendifferenz: "<<_SD<<" Lage: "<<_SL)
WRITE(_LOG,_LOG_FILE,"RP,korr: "<<_RPT[0]*_FAK2<<"/"<<_RPT[1]*_FAK2<<"/"<<_RPT[2]*_FAK2<<"/"<<_RPT[3]*_FAK2<<"/XR:"<<_RPT[4]*_FAK2)
ENDIF
ENDIF
ENDIF
ENDIF
ENDIF
IF((_RPT[0]<=_RPT[2])AND(_RPT[2]<>_NO_VAL))OR((_RPT[1]<=_RPT[3])AND(_RPT[3]<>_NO_VAL))
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"ALARM: Die aeussere Rueckzugsebene muss groesser als die Innere sein")
ENDIF
GOTOF _FEHL11
ENDIF
IF(_POSR==3)OR(_POSR==4)
IF(NOT(_MD9899 B_AND 1))
IF(_X0>=_RPT[0]*_FAK2)OR(_Z0>=_RPT[1]*_FAK2)OR((_X0<=_RPT[2]*_FAK2)AND(_RPT[2]<>_NO_VAL))OR((_Z0<=_RPT[3]*_FAK2)AND(_RPT[3]<>_NO_VAL))
IF(_POSR==3) GOTOF _FEHL9
IF(_POSR==4) GOTOF _FEHL10
ENDIF
ENDIF
GOTOF _RET
ENDIF
IF(((_MODE B_AND 'B01')==0)AND(_F_RELEAS==1))
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"nicht anfahren wegen _F_RELEAS=1")
ENDIF
GOTOF _END
ENDIF
_Z_TR=$P_PFRAME[_ZZ,TR]*_FAK1
IF($MN_MM_FRAME_FINE_TRANS)
_Z_TR=_Z_TR+$P_PFRAME[_ZZ,FI]*_FAK1
ENDIF
IF($MCS_FUNCTION_MASK_TECH B_AND 'H1000')
IF(_Z_TR>0)
SETAL(62201)
M0
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"ALARM: Z-Verschiebung wirkt nicht auf die Rückzugsebenen! Z-TRANS="<<_Z_TR)
ENDIF
ENDIF
ENDIF
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"F_SP_TRA(300)")
WRITE(_LOG,_LOG_FILE,"F_SP_TRA(0)")
WRITE(_LOG,_LOG_FILE,"$P_PFRAME=CTRANS()")
ENDIF
F_SP_TRA(300)
F_SP_TRA(0)
_PFRAME=$P_PFRAME
$P_PFRAME=CTRANS()
_P29=$P_GG[29]
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"DIAMOF")
ENDIF
DIAMCYCOF
IF(_F_TC_ACT)AND((_F_TRAANG)OR(_F_Y_AXIS))
IF(_F_TCP[2]==1)
_PARK_Y=$P_SETFR[_YY,TR]
ENDIF
ENDIF
IF(_POSR==7)
_NOGO_TCP=1
_POSR=1
ELSE
_PAR=4*(_MD9898 B_AND 'H0100')/'H0100'
ENDIF
IF(_POSR==2)
_ST_RP=1
_POSR=1
ENDIF
IF(_POSR==5)OR(_POSR==6)
_PAR=_PAR+'B1000'
_PARK=_POSR-4
_POSR=1
ENDIF
IF(_POSR==10)OR(_POSR==11)
S_ZIEL=_POSR-9
IF(_POSR==11)
_Y0=_Y0-$P_TOOLL[3]*_FAK1
ENDIF
_POSR=1
ENDIF
IF(_POSR>1)AND(_POSR<>8) GOTOF _FEHL12
_PAR=_PAR+_POSR
IF($P_SIM)
_PAR=_PAR+2
ENDIF
IF($MCS_FUNCTION_MASK_TECH B_AND 'H4000')
_PAR=_PAR+'H20'
ENDIF
S_WWP_Y=$MCS_TOOL_CHANGE_POS_Y*_FAK1
IF(_POSR)
IF(_PARK)
_TCP[0]=_X0/_FAK2
_TCP[1]=_Z0/_FAK2
_TCP[2]=_PARK-1
IF(_PARK==1)
_PAR=_PAR B_OR 'B10000'
ENDIF
IF($MCS_SUB_SPINDLE_PARK_POS_Y)
REPEAT _PARK2WKS_A _PARK2WKS_E
ENDIF
IF(_PARK==1)
_Y0=-$P_TOOLL[3]*_FAK1
ENDIF
ELSE
IF(S_ZIEL)
IF(S_ZIEL==2)
REPEAT S_ZIEL2WKS_A S_ZIEL2WKS_E
ENDIF
_TCP[0]=_X0/_FAK2
_TCP[1]=_Z0/_FAK2
_TCP[2]=0
IF(S_ZIEL==1)
_PAR=_PAR B_OR 'B10000'
ENDIF
ELSE
_TCP[0]=_F_TCP[0]
_TCP[1]=_F_TCP[1]
_TCP[2]=_F_TCP[2]
ENDIF
ENDIF
IF(NOT _F_AX_EXISTS[6])AND(($MCS_FUNCTION_MASK_TECH B_AND 'H01')==0)
IF(_PARK)OR(S_ZIEL==0)
_Y0=-$P_TOOLL[3]*_FAK1
IF(_TCP[2]==0)
_TCPWKS[0]=_TCP[0]*_FAK2
IF(_PARK)
_TCPWKS[1]=_Y0+_PARK_Y
ELSE
IF(S_WWP_Y==0)
IF($MCS_FUNCTION_MASK_TECH B_AND 'H2000')
_TCPWKS[1]=_Y0
ELSE
_TCPWKS[1]=0
ENDIF
ELSE
_TCPWKS[1]=_Y0+S_WWP_Y
ENDIF
ENDIF
_TCPWKS[2]=_TCP[1]*_FAK2
F_SP_RPF(0,_TCPWKS)
ELSE
$AC_MEAS_VALID=0
$AC_MEAS_TYPE=24
$AC_MEAS_P1_COORD=2
$AC_MEAS_P2_COORD=0
$AA_MEAS_POINT1[_XX]=(_TCP[0]*_FAK2)/_FAK1
$AA_MEAS_POINT1[_ZZ]=(_TCP[1]*_FAK2)/_FAK1
IF(_Y_EXISTS)
$AA_MEAS_POINT1[_YY]=_PARK_Y
ENDIF
_ERR=MEASURE()
IF(_ERR)
_ERR=6
GOTOF _END
ENDIF
_TCPWKS[0]=$AA_MEAS_POINT2[_XX]*_FAK1
IF(NOT _Y_EXISTS) GOTOF _NO_Y
IF(_PARK)
_TCPWKS[1]=$AA_MEAS_POINT2[_YY]*_FAK1+_Y0
ELSE
IF(S_WWP_Y==0)
IF($MCS_FUNCTION_MASK_TECH B_AND 'H2000')
_TCPWKS[1]=$AA_MEAS_POINT2[_YY]*_FAK1+_Y0
ELSE
_TCPWKS[1]=0
ENDIF
ELSE
_TCPWKS[1]=$AA_MEAS_POINT2[_YY]*_FAK1+_Y0+S_WWP_Y
ENDIF
ENDIF
_NO_Y:
_TCPWKS[2]=$AA_MEAS_POINT2[_ZZ]*_FAK1
ENDIF
ENDIF
ENDIF
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"_TCP[]="<<_TCP[0]<<" "<<_TCP[1]<<" "<<_TCP[2])
ENDIF
IF(_F_AX_EXISTS[6])AND($MCS_FUNCTION_MASK_TECH B_AND 'H01')AND($P_TOOL)AND($P_TC)AND(_PARK<>1)AND(S_ZIEL<>1)
_PAR=_PAR B_OR 'B10000'
_TOOLL[0]=$P_TOOLL[1]+$TC_CARR4[$P_TC]
_TOOLL[1]=-$P_TOOLL[3]+$TC_CARR5[$P_TC]
_TOOLL[2]=$P_TOOLL[2]+$TC_CARR6[$P_TC]
IF($TC_CARR23[$P_TC]=="T")
_TOOLL[0]=_TOOLL[0]+$TC_CARR15[$P_TC]
_TOOLL[1]=_TOOLL[1]+$TC_CARR16[$P_TC]
_TOOLL[2]=_TOOLL[2]+$TC_CARR17[$P_TC]
ENDIF
IF(NOT _Y_EXISTS)
_VECT=CTRANS(_XX,_TOOLL[0],_ZZ,_TOOLL[2])
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"VECT="<<_VECT[_XX,TR]<<" "<<_VECT[_ZZ,TR])
ENDIF
IF(_POSR)AND(_TCP[2]==0)
_FRAME[_ZZ,MI]=$P_ACTFRAME[_ZZ,MI]
ENDIF
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"FRAME="<<_FRAME[_XX,TR]<<" "<<_FRAME[_ZZ,TR])
WRITE(_LOG,_LOG_FILE,"TC_CARR13 14 24(B-Offset)="<<$TC_CARR13[$P_TC]<<" "<<$TC_CARR14[$P_TC]<<" "<<$TC_CARR24[$P_TC])
ENDIF
_FRAME=_FRAME:CRPL(0,$TC_CARR13[$P_TC]-$TC_CARR24[$P_TC])
IF($P_TC==_F_TC_DEF[2])AND($P_AD[1]>=500)AND($P_AD[1]<599)
_FRAME=_FRAME:CROT(_ZZ,$TC_CARR14[$P_TC])
;_FRAME=_FRAME:CROT(_ZZ,$P_EP[AXNAME($TC_CARR36[$P_TC])])
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"FRAME,TR="<<_FRAME[_XX,TR]<<" "<<_FRAME[_ZZ,TR])
WRITE(_LOG,_LOG_FILE,"FRAME,RT="<<_FRAME[_XX,RT]<<" "<<$TC_CARR13[$P_TC]-$TC_CARR24[$P_TC]<<" "<<_FRAME[_ZZ,RT])
ENDIF
ENDIF
_VECT=_FRAME:_VECT
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"VECT="<<_VECT[_XX,TR]<<" "<<_VECT[_ZZ,TR])
ENDIF
_VECT[_XX,TR]=_VECT[_XX,TR]+$TC_CARR1[$P_TC]
_VECT[_ZZ,TR]=_VECT[_ZZ,TR]+$TC_CARR3[$P_TC]
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"TC="<<$P_TC<<" B="<<$TC_CARR13[$P_TC]<<" C="<<$TC_CARR14[$P_TC]<<" X="<<_TCP[0]<<" Z="<<_TCP[1]<<" TRX="<<_VECT[_XX,TR]<<" TRZ="<<_VECT[_ZZ,TR])
ENDIF
_TCP[0]=_TCP[0]-_VECT[_XX,TR]
_TCP[1]=_TCP[1]-_VECT[_ZZ,TR]
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"_TCP,2[]="<<_TCP[0]<<" "<<_TCP[1]<<" Y0="<<_Y0)
ENDIF
GOTOF _END_Y
ENDIF
_VECT=CTRANS(_XX,_TOOLL[0],_YY,_TOOLL[1],_ZZ,_TOOLL[2])
IF(_POSR)AND(_TCP[2]==0)
_FRAME[_ZZ,MI]=$P_ACTFRAME[_ZZ,MI]
ENDIF
_FRAME=_FRAME:CROT(_YY,$TC_CARR13[$P_TC]-$TC_CARR24[$P_TC])
;_FRAME=_FRAME:CROT(_YY,$P_EP[AXNAME($TC_CARR35[$P_TC])])
IF($P_TC==_F_TC_DEF[2])AND($P_AD[1]>=500)AND($P_AD[1]<599)
_FRAME=_FRAME:CROT(_ZZ,$TC_CARR14[$P_TC])
;_FRAME=_FRAME:CROT(_ZZ,$P_EP[AXNAME($TC_CARR36[$P_TC])])
ENDIF
_VECT=_FRAME:_VECT
_VECT[_XX,TR]=_VECT[_XX,TR]+$TC_CARR1[$P_TC]
_VECT[_YY,TR]=_VECT[_YY,TR]+$TC_CARR2[$P_TC]
_VECT[_ZZ,TR]=_VECT[_ZZ,TR]+$TC_CARR3[$P_TC]
;MSG("TC="<<$P_TC<<" B="<<$TC_CARR13[$P_TC]<<" C="<<$TC_CARR14[$P_TC]<<" X="<<_TCP[0]<<" Z="<<_TCP[1]<<" TRX="<<_VECT[_XX,TR]<<" TRY="<<_VECT[_YY,TR]<<" TRZ="<<_VECT[_ZZ,TR])
;M0
;STOPRE
_TCP[0]=_TCP[0]-_VECT[_XX,TR]
_TCP[1]=_TCP[1]-_VECT[_ZZ,TR]
_Y0=_VECT[_YY,TR]
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"_TCP[]="<<_TCP[0]<<" "<<_TCP[1]<<" Y0="<<_Y0)
ENDIF
ENDIF
_END_Y:
IF(_F_AX_EXISTS[6])AND($MCS_FUNCTION_MASK_TECH B_AND 'H01')AND((_F_TRAANG)OR(_F_Y_AXIS))AND(S_ZIEL<>1)
IF(_TCP[2]==0)
_TCPWKS[0]=_TCP[0]*_FAK2
_TCPWKS[2]=_TCP[1]*_FAK2
IF(_PARK)OR(S_ZIEL)
_TCPWKS[1]=_Y0+_PARK_Y
ELSE
IF(S_WWP_Y==0)
IF($MCS_FUNCTION_MASK_TECH B_AND 'H2000')
_TCPWKS[1]=_Y0
ELSE
_TCPWKS[1]=0
ENDIF
ELSE
_TCPWKS[1]=_Y0+S_WWP_Y
ENDIF
ENDIF
F_SP_RPF(0,_TCPWKS)
ELSE
$AC_MEAS_VALID=0
$AC_MEAS_TYPE=24
$AC_MEAS_P1_COORD=2
$AC_MEAS_P2_COORD=0
$AA_MEAS_POINT1[_XX]=(_TCP[0]*_FAK2)/_FAK1
$AA_MEAS_POINT1[_ZZ]=(_TCP[1]*_FAK2)/_FAK1
$AA_MEAS_POINT1[_YY]=_PARK_Y
_ERR=MEASURE()
IF(_ERR)
_ERR=6
GOTOF _END
ENDIF
_TCPWKS[0]=$AA_MEAS_POINT2[_XX]*_FAK1
IF(_PARK)OR(S_ZIEL)
_TCPWKS[1]=$AA_MEAS_POINT2[_YY]*_FAK1+_Y0
ELSE
IF(S_WWP_Y==0)
IF($MCS_FUNCTION_MASK_TECH B_AND 'H2000')
_TCPWKS[1]=$AA_MEAS_POINT2[_YY]*_FAK1+_Y0
ELSE
_TCPWKS[1]=0
ENDIF
ELSE
_TCPWKS[1]=$AA_MEAS_POINT2[_YY]*_FAK1+_Y0+S_WWP_Y
ENDIF
ENDIF
_TCPWKS[2]=$AA_MEAS_POINT2[_ZZ]*_FAK1
ENDIF
_TCPENS[0]=_TCPWKS[0]
_TCPENS[1]=_TCPWKS[1]
_TCPENS[2]=_TCPWKS[2]
F_SP_RPF(1,_TCPENS)
_TCP[0]=_TCPWKS[0]/_FAK2
_TCP[1]=_TCPWKS[2]/_FAK2
_TCP[2]=0
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"_TCP[]="<<_TCP[0]<<" "<<_TCP[1]<<" "<<_TCP[2])
ENDIF
ENDIF
ELSE
_TCP[0]=_X0
_TCP[1]=_Z0+_Z_TR
_TCP[2]=0
ENDIF
IF(_POSR==8)OR((_POSR)AND(_F_RP_DIR[0]==7))
_F_RP_DIR[0]=0
IF($MCS_FUNCTION_MASK_TECH B_AND 'H01')AND($P_TC)
_TCPWKS[0]=_TCPWKS[0]*(1-2*$P_ACTFRAME[_XX,MI])
REPEAT _WZW_WKS_A _WZW_WKS_E
ELSE
REPEAT _WZW_TC0_A _WZW_TC0_E
ENDIF
GOTOF _RESTORE
ENDIF
IF(_F_AX_EXISTS[6])AND($MCS_FUNCTION_MASK_TECH B_AND 'H01')AND(_RPT[5]<>_SC_NO_VAL)AND(((_POSR)AND(_PARK==0)AND(_F_RP_DIR[0]==6))OR((_POSR==0)AND(_F_RP_DIR[1]==6)))
IF(_POSR)AND(_PARK==0)AND(_F_RP_DIR[0]==6)
IF($P_EP[_ZZ]*_FAK1<_RPT[5]*_FAK2)
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"Nach Stirn B auf RP herausziehen: "<<$P_EP[_XX]*_FAK1<<"/"<<_RPT[5]*_FAK2)
ENDIF
SBLON
N1 G0 G90 AX[_ZZ]=_RPT[5]*_FAK2
SBLOF
ENDIF
IF(_TCPWKS[2]<_RPT[5]*_FAK2)
REPEAT _CHECK_WZW_A _CHECK_WZW_E
IF(_STAT)
_ZP[0]=_RPT[0]*_FAK2 _ZP[1]=_Y0 _ZP[2]=_RPT[1]*_FAK2
F_SP_RPF(0,_ZP)
IF(_ZP[2]>=_RPT[5]*_FAK2)
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"Nach Stirn B auf Ecke Rueckzugsbereich fahren: "<<_ZP[0]<<"/"<<_ZP[2])
ENDIF
SBLON
N2 G0 G90 AX[_XX]=_ZP[0] AX[_YY]=_ZP[1] AX[_ZZ]=_ZP[2]
SBLOF
REPEAT _CHECK_WZW_A _CHECK_WZW_E
ENDIF
IF(_STAT)
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"Nach Stirn B Werkzeugwechselpunkt in XY anfahren: "<<_TCPWKS[0]<<"/"<<_RPT[5]*_FAK2)
ENDIF
N3 F_SP_RPB(1,0,_TCPWKS[0],_TCPWKS[1],_TCPWKS[2])
REPEAT _CHECK_WZW_A _CHECK_WZW_E
;IF(_STAT) GOTOF _FEHL3
IF(_STAT) GOTOF _ST_LOGIC
ENDIF
ENDIF
ENDIF
IF(_NOGO_TCP==0)
REPEAT _WZW_WKS_A _WZW_WKS_E
ENDIF
GOTOF _RESTORE
ENDIF
IF(_POSR==0)AND(_F_RP_DIR[1]==6)
IF($P_EP[_ZZ]*_FAK1<_RPT[5]*_FAK2)
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"Vor Stirn B auf RP herausziehen: "<<$P_EP[_XX]*_FAK1<<"/"<<_RPT[5]*_FAK2)
ENDIF
;_ZP[0]=$P_EP[_XX]*_FAK1 _ZP[1]=$P_EP[_YY]*_FAK1 _ZP[2]=_RPT[5]*_FAK2
;REPEAT _CHECK_ZP_A _CHECK_ZP_E
;IF(_STAT) GOTOF _FEHL2
;IF(_STAT) GOTOF _ST_LOGIC
N5 F_SP_RPB(10,_RPT[5]*_FAK2,_X0,_Y0,_Z0)
IF($P_EP[_ZZ]*_FAK1<_RPT[5]*_FAK2)
_ZP[0]=_X0 _ZP[1]=_Y0 _ZP[2]=_Z0
REPEAT _CHECK_ZP_A _CHECK_ZP_E
;IF(_STAT) GOTOF _FEHL2
IF(_STAT) GOTOF _ST_LOGIC
ENDIF
ENDIF
GOTOF _RESTORE
ENDIF
ENDIF
_ST_LOGIC:
IF(_F_AX_EXISTS[6])AND($MCS_FUNCTION_MASK_TECH B_AND 'H01')
IF($P_TC)
IF($TC_CARR23[$P_TC]<>"P")
_ST_RETRACT=1
_ZP[0]=_TCP[0] _ZP[1]=_TCPWKS[1] _ZP[2]=_TCP[1]
F_SP_RPF(1,_ZP)
_TCP[0]=_ZP[0] _TCPWKS[1]=_ZP[1] _TCP[1]=_ZP[2]
_WPFRAME=$P_WPFRAME
_PARTFRAME=$P_PARTFRAME
WRTPR("IGNORE(16,0)",1)
$P_WPFRAME=CTRANS()
$P_PARTFRAME=CTRANS()
WRTPR("IGNORE(32,0)",1)
ENDIF
ENDIF
IF(_POSR)AND(_F_RP_DIR[0]==6)
_F_RP_ACT=_RPT[1] _F_RP_DIR[0]=-1
ENDIF
IF(_POSR==0)AND(_F_RP_DIR[1]==6)
_F_RP_ACT=_RPT[1] _F_RP_DIR[1]=-1
ENDIF
ENDIF
F_SP_IS(0,_STAT,$P_EP[_XX]*_FAK1,$P_EP[_ZZ]*_FAK1,,,_RPT)
IF(_STAT==0)
_TEMP_RPT[0]=_RPT[0] _TEMP_RPT[1]=_RPT[1] _TEMP_RPT[4]=_RPT[4]
_TEMP_RPT[2]=-_RPT[0] _TEMP_RPT[3]=_SC_NO_VAL
F_SP_IS(0,_STAT,$P_EP[_XX]*_FAK1,$P_EP[_ZZ]*_FAK1,,,_TEMP_RPT)
IF(_STAT==0)
_F_RP_DIR[0]=0
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"_F_RP_DIR[0]=0, da Wkz. nicht innerhalb RP-Rechteck ("<<$P_EP[_XX]*_FAK1<<","<<$P_EP[_ZZ]*_FAK1<<")")
STOPRE
ENDIF
ELSE
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"Wkz. nicht innerhalb RP-Rechteck, aber innen ("<<$P_EP[_XX]*_FAK1<<","<<$P_EP[_ZZ]*_FAK1<<")")
STOPRE
ENDIF
ENDIF
ENDIF
IF(_STAT==1)AND(_F_RP_DIR[0]==0)AND(($P_SEARCH)OR(($AC_SERUPRO)AND(NOT $P_SIM)))
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"_F_RP_DIR[0]=-1, damit Wkz bei SSL zum WWP kann")
STOPRE
ENDIF
_F_RP_DIR[0]=-1
ENDIF
IF($P_TC)AND(($MCS_FUNCTION_MASK_TECH B_AND 'H01')==0)
IF($TC_CARR23[$P_TC]<>"P")
_TCP[0]=_TCP[0]-$TC_CARR1[$P_TC]
_TCP[1]=_TCP[1]-$TC_CARR3[$P_TC]
ENDIF
ENDIF
_IS_INCH=($P_GG[13]==1)OR($P_GG[13]==3)OR(NOT $MN_SCALING_SYSTEM_IS_METRIC)
IF($MCS_FUNCTION_MASK_TECH B_AND 'H10')
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"N10 F_SP_RP2(_F_RP_DIR,_RPT,_TCP,_NUM,_P,_ERR,_PAR)")
ENDIF
N10 F_SP_RP2(_F_RP_DIR,_RPT,_TCP,_NUM,_P,_ERR,_PAR)
ELSE
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"N15 RETRCALC(_F_RP_DIR,_RPT,_TCP,_NUM,_P,_ERR,_PAR)")
ENDIF
N15 RETRCALC(_F_RP_DIR,_RPT,_TCP,_NUM,_P,_ERR,_PAR)
ENDIF
IF(_ERR==0)
IF((_POSR==0)AND((_Z_TR<0)OR(_INTERPOL)))
_NUM=_NUM+1
IF(_LOG_ON)
IF(_Z_TR<0)
WRITE(_LOG,_LOG_FILE,"NUM wegen neg. TRANS ("<<_Z_TR<<") um 1 auf "<<_NUM<<" erhoeht!")
ELSE
WRITE(_LOG,_LOG_FILE,"NUM wegen interpol. Anfahren um 1 auf "<<_NUM<<" erhoeht!")
ENDIF
ENDIF
ENDIF
IF(_POSR)AND(_NOGO_TCP)AND(_NUM>0)
_NUM=_NUM-1
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"_NUM=_NUM-1: Werkzeugwechselpunkt nicht anfahren")
ENDIF
ENDIF
FOR _I=0 TO _NUM-1
IF(_ST_RP==1)AND(_I==_NUM-1)
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"CUST_TECHCYC(112)")
ENDIF
CUST_TECHCYC(112)
ENDIF
IF(((_F_TRAANG)OR(_F_Y_AXIS))AND(_I==_NUM-1)AND(((_POSR==1)AND(NOT _NOGO_TCP))OR(((_POSR==0)AND(_INTERPOL)))))
IF(_POSR)AND(S_ZIEL==0)
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"Punkt "<<_I<<" anfahren: "<<_P[_I,0]<<"/"<<_P[_I,1]<<"/"<<_TCPWKS[1])
STOPRE
ENDIF
IF(_F_AX_EXISTS[6])AND($MCS_FUNCTION_MASK_TECH B_AND 'H01')AND($P_TC)AND(_PARK==0)
IF($P_TOOL)AND($P_GG[6]==2)
IF($P_AD[1]>=500)AND($P_AD[1]<=599)
_TCPWKS[0]=_TCPWKS[0]*(1-2*$P_ACTFRAME[_XX,MI])
IF(_F_TCP[2])
REPEAT _WZW_TC0_A _WZW_TC0_E
ELSE
REPEAT _WZW_WKS_A _WZW_WKS_E
ENDIF
GOTOF _SKIP
ENDIF
ENDIF
ENDIF
SBLON
N20 G0 G90 AX[_XX]=_P[_I,0] AX[_ZZ]=_P[_I,1] AX[_YY]=_TCPWKS[1]
SBLOF
_SKIP:
ELSE
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"Punkt "<<_I<<" anfahren: "<<_P[_I,0]<<"/"<<_P[_I,1]<<"/"<<_Y0)
STOPRE
ENDIF
SBLON
N22 G0 G90 AX[_XX]=_P[_I,0] AX[_ZZ]=_P[_I,1] AX[_YY]=_Y0
SBLOF
ENDIF
ELSE
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"Punkt "<<_I<<" anfahren: "<<_P[_I,0]<<"/"<<_P[_I,1])
STOPRE
ENDIF
SBLON
N30 G0 G90 AX[_XX]=_P[_I,0] AX[_ZZ]=_P[_I,1]
SBLOF
ENDIF
ENDFOR
IF(_POSR)AND(_PARK==0)AND(_NOGO_TCP==0)
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"CUST_TECHCYC(116)")
ENDIF
CUST_TECHCYC(116)
ENDIF
ELSE
_ERRM=_ERR
IF(_ERR>100)
_ERR=6
ENDIF
IF(_ERR==5)AND(S_ZIEL)
_ERR=13
ENDIF
CASE _ERR OF 1 GOTOF _FEHL1 2 GOTOF _FEHL2 3 GOTOF _FEHL3 4 GOTOF _FEHL4 5 GOTOF _FEHL5 6 GOTOF _FEHL6 7 GOTOF _FEHL7 8 GOTOF _FEHL8 13 GOTOF _FEHL13
GOTOF _FEHL7
ENDIF
_RESTORE:
G[29]=_P29
IF(_F_AX_EXISTS[6])AND($MCS_FUNCTION_MASK_TECH B_AND 'H01')AND(_ST_RETRACT)
WRTPR("IGNORE(16,0)",1)
$P_WPFRAME=_WPFRAME
$P_PARTFRAME=_PARTFRAME
WRTPR("IGNORE(32,0)",1)
ENDIF
$P_PFRAME=_PFRAME
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"F_SP_TRA(200)")
ENDIF
F_SP_TRA(200)
_END:
IF NOT((_POSR==1)AND(_MD9898 B_AND 'H0100'))
_F_RP_DIR[0]=_F_RP_DIR[1]
ENDIF
IF(NOT $P_SEARCH)AND(NOT $AC_SERUPRO)AND(NOT $P_ISTEST)
_F_RP_DIR_S=_F_RP_DIR[0]
ENDIF
_RET:
RET
_CHECK_WZW_A:
_ACTPOS[0]=$P_EP[_XX]*_FAK1
_ACTPOS[1]=$P_EP[_YY]*_FAK1
_ACTPOS[2]=$P_EP[_ZZ]*_FAK1
F_SP_RPF(1,_ACTPOS)
F_SP_IS(1,_STAT,_ACTPOS[0],_ACTPOS[2],_TCPENS[0],_TCPENS[2],_RPT)
_CHECK_WZW_E:
_CHECK_ZP_A:
_ACTPOS[0]=$P_EP[_XX]*_FAK1
_ACTPOS[1]=$P_EP[_YY]*_FAK1
_ACTPOS[2]=$P_EP[_ZZ]*_FAK1
F_SP_RPF(1,_ACTPOS)
F_SP_RPF(1,_ZP)
F_SP_IS(1,_STAT,_ACTPOS[0],_ACTPOS[2],_ZP[0],_ZP[2],_RPT)
_CHECK_ZP_E:
_PARK2WKS_A:
IF(_PARK==1)
$AC_MEAS_VALID=0
$AC_MEAS_TYPE=24
$AC_MEAS_P1_COORD=2
$AC_MEAS_P2_COORD=0
$AA_MEAS_POINT1[_XX]=0
$AA_MEAS_POINT1[_ZZ]=0
$AA_MEAS_POINT1[_YY]=$MCS_SUB_SPINDLE_PARK_POS_Y*_FAK1
_ERR=MEASURE()
IF(_ERR)
_ERR=6
GOTOF _END
ENDIF
_PARK_Y=$AA_MEAS_POINT2[_YY]*_FAK1
ELSE
_PARK_Y=$MCS_SUB_SPINDLE_PARK_POS_Y*_FAK1
ENDIF
_PARK2WKS_E:
S_ZIEL2WKS_A:
IF(_PARK==1)
$AC_MEAS_VALID=0
$AC_MEAS_TYPE=24
$AC_MEAS_P1_COORD=2
$AC_MEAS_P2_COORD=0
$AA_MEAS_POINT1[_XX]=0
$AA_MEAS_POINT1[_ZZ]=0
IF(_Y_EXISTS)
$AA_MEAS_POINT1[_YY]=$MCS_SUB_SPINDLE_PARK_POS_Y*_FAK1
ENDIF
_ERR=MEASURE()
IF(_ERR)
_ERR=6
GOTOF _END
ENDIF
IF(_Y_EXISTS)
_PARK_Y=$AA_MEAS_POINT2[_YY]*_FAK1
ENDIF
ELSE
_PARK_Y=$MCS_SUB_SPINDLE_PARK_POS_Y*_FAK1
ENDIF
S_ZIEL2WKS_E:
_WZW_WKS_A:
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"Werkzeugwechselpunkt im aktuellen WKS anfahren: "<<_TCPWKS[0]<<"/"<<_TCPWKS[2])
ENDIF
SBLON
IF(_Y_EXISTS)
N100 G0 G90 AX[_XX]=_TCPWKS[0] AX[_YY]=_TCPWKS[1] AX[_ZZ]=_TCPWKS[2]
ELSE
N101 G0 G90 AX[_XX]=_TCPWKS[0] AX[_ZZ]=_TCPWKS[2]
ENDIF
SBLOF
_F_RP_DIR[1]=0
_WZW_WKS_E:
_WZW_TC0_A:
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"Werkzeugwechselpunkt mit TCARR=0 anfahren: "<<_F_TCP[0]<<"/"<<_F_TCP[1]<<":"<<_F_TCP[2]<<"(0=WKS;1=MKS)")
ENDIF
_TCI=$P_TC
IF($MCS_FUNCTION_MASK_TECH B_AND 'H01')AND(_TCI)
TCARR=0
ENDIF
SBLON
IF(_F_TCP[2])
IF(_Y_EXISTS)
IF(S_WWP_Y==0)
IF($MCS_FUNCTION_MASK_TECH B_AND 'H2000')
IF($MN_G53_TOOLCORR B_AND 'H01')
N102 G0 SUPA G90 AX[_XX]=(_F_TCP[0]*_FAK2) AX[_ZZ]=(_F_TCP[1]*_FAK2) AX[_YY]=_Y0
ELSE
N103 G0 SUPA G90 AX[_XX]=(_F_TCP[0]*_FAK2-$P_TOOLL[1]*_FAK1) AX[_ZZ]=(_F_TCP[1]*_FAK2-$P_TOOLL[2]*_FAK1) AX[_YY]=_Y0
ENDIF
ELSE
IF($MN_G53_TOOLCORR B_AND 'H01')
N104 G0 SUPA G90 AX[_XX]=(_F_TCP[0]*_FAK2) AX[_ZZ]=(_F_TCP[1]*_FAK2) AX[_YY]=0
ELSE
N105 G0 SUPA G90 AX[_XX]=(_F_TCP[0]*_FAK2-$P_TOOLL[1]*_FAK1) AX[_ZZ]=(_F_TCP[1]*_FAK2-$P_TOOLL[2]*_FAK1) AX[_YY]=0
ENDIF
ENDIF
ELSE
IF($MN_G53_TOOLCORR B_AND 'H01')
N106 G0 SUPA G90 AX[_XX]=(_F_TCP[0]*_FAK2) AX[_ZZ]=(_F_TCP[1]*_FAK2) AX[_YY]=_Y0+S_WWP_Y
ELSE
N107 G0 SUPA G90 AX[_XX]=(_F_TCP[0]*_FAK2-$P_TOOLL[1]*_FAK1) AX[_ZZ]=(_F_TCP[1]*_FAK2-$P_TOOLL[2]*_FAK1) AX[_YY]=_Y0+S_WWP_Y
ENDIF
ENDIF
ELSE
IF($MN_G53_TOOLCORR B_AND 'H01')
N108 G0 SUPA G90 AX[_XX]=(_F_TCP[0]*_FAK2) AX[_ZZ]=(_F_TCP[1]*_FAK2)
ELSE
N109 G0 SUPA G90 AX[_XX]=(_F_TCP[0]*_FAK2-$P_TOOLL[1]*_FAK1) AX[_ZZ]=(_F_TCP[1]*_FAK2-$P_TOOLL[2]*_FAK1)
ENDIF
ENDIF
ELSE
IF(_Y_EXISTS)
IF(S_WWP_Y==0)
IF($MCS_FUNCTION_MASK_TECH B_AND 'H2000')
N119 G0 G90 AX[_XX]=(_F_TCP[0]*_FAK2-$P_TOOLL[1]*_FAK1) AX[_ZZ]=(_F_TCP[1]*_FAK2-$P_TOOLL[2]*_FAK1) AX[_YY]=_Y0
ELSE
N120 G0 G90 AX[_XX]=(_F_TCP[0]*_FAK2-$P_TOOLL[1]*_FAK1) AX[_ZZ]=(_F_TCP[1]*_FAK2-$P_TOOLL[2]*_FAK1) AX[_YY]=0
ENDIF
ELSE
N121 G0 G90 AX[_XX]=(_F_TCP[0]*_FAK2-$P_TOOLL[1]*_FAK1) AX[_ZZ]=(_F_TCP[1]*_FAK2-$P_TOOLL[2]*_FAK1) AX[_YY]=_Y0+S_WWP_Y
ENDIF
ELSE
N122 G0 G90 AX[_XX]=(_F_TCP[0]*_FAK2-$P_TOOLL[1]*_FAK1) AX[_ZZ]=(_F_TCP[1]*_FAK2-$P_TOOLL[2]*_FAK1)
ENDIF
ENDIF
SBLOF
IF($MCS_FUNCTION_MASK_TECH B_AND 'H01')AND(_TCI)
TCOABS TCARR=_TCI
ENDIF
_F_RP_DIR[1]=0
_WZW_TC0_E:
_FEHL1:STOPRE
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"Fehler 1: Rueckzugsrichtung unbekannt. Werkzeug manuell zurueckziehen!")
ENDIF
N933801 SETAL(61237)
RET
_FEHL2:STOPRE
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"Fehler 2: Bearbeitungsrichtung unbekannt!")
ENDIF
N933802 SETAL(61238)
RET
_FEHL3:STOPRE
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"Fehler 3: Werkzeugwechselpunkt liegt im Rueckzugsbereich!")
ENDIF
N933803 SETAL(61239)
RET
_FEHL4:STOPRE
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"Fehler 4: Rueckzugsebene fuer diese Bearbeitungsrichtung nicht definiert!")
ENDIF
N933804 SETAL(61241)
RET
_FEHL5:STOPRE
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"Fehler 5: Werkzeugwechselpunkt korrigieren, Werkzeugspitze im Rueckzugsbereich!")
ENDIF
N933805 SETAL(61243)
RET
_FEHL6:STOPRE
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"Fehler 6: interner Zyklusfehler bei Frame-Berechnung (MEASURE->"<<_ERRM<<")")
ENDIF
N933806 SETAL(61403)
RET
_FEHL7:STOPRE
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"Fehler 7: Interner Zyklenfehler ("<<_ERR<<")")
ENDIF
N933807 SETAL(61099,""<<_ERR)
RET
_FEHL8:STOPRE
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"Fehler 8: Parkposition liegt unterhalb der Rueckzugsebene XRA")
ENDIF
N933808 SETAL(61285)
RET
_FEHL9:STOPRE
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"Fehler 9: Startpunkt der Bearbeitung liegt ausserhalb der Rueckzugsebenen")
ENDIF
N933809 SETAL(61281)
RET
_FEHL10:STOPRE
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"Fehler 10: Endpunkt der Bearbeitung liegt ausserhalb der Rueckzugsebenen")
ENDIF
N933810 SETAL(61282)
RET
_FEHL11:STOPRE
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"Fehler 11: Die aeussere Rueckzugsebene muss groesser als die Innere sein")
ENDIF
N933811 SETAL(61229)
RET
_FEHL12:STOPRE
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"Fehler 12: Interner Zyklenfehler (_POSR="<<_POSR<<")")
ENDIF
N933812 SETAL(61099,"_POSR="<<_POSR)
RET
_FEHL13:STOPRE
IF(_LOG_ON)
WRITE(_LOG,_LOG_FILE,"Fehler 13: Zielpunkt liegt im Rueckzugsbereich!")
ENDIF
N933813 SETAL(61855)
RET
