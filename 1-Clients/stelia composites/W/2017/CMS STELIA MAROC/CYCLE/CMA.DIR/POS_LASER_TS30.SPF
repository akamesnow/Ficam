PROC POS_LASER_TS30 (INT _M155) SBLOF DISPLOF
;POSITION SETTING ABS LASER TS30 MARPOSS Rev.05.6
;*******************************new1
;   ARES ANTARES POSEIDON CRONUS
;   TRAINING CENTER   23/03/2013
;   ULTIMA MODIFICA   16/09/2015
;*******************************
;_CALIB (SOLO NEI CICLI DI CALIBRAZIONE E SETTARE A 1)
;_LASER_BROKEN(SETTATO NEI VARI MAIN, _LASER_BROKEN=0 TUTTI I LASER SONO FUNZIONANTI)
;_LASER_TS30(SETTATO NEI VARI MAIN, SE LASER=1 TS30=2)
;_TYPMSG(MODALITA PER USCITA MSG OPERATORE)
;********************************
DEF REAL _NLAS,_TLTBL,_MGPOS,_TYPE,_LASPL,_UTMAN,_MIDX,_COND,_POSA,_POSC,_POSZ,_XOK,_YOK,_ZOK,_CKTO,_FEDD,_ZSIC,_CZMIN,_ZMAX,_TYPMSG
STOPRE
IF (($P_SIM==1) OR ($P_ISTEST==1) OR ($P_SEARCH==1))
 M17
ENDIF
TRAFOOF
CYCLE800()
CYCLE832()
TRAFOOF
TRANS
ROT
STOPRE
;(*** VARIABILI DA SETTARE ***)
_NLAS=2 ;(STABILISCE NUMERO LASER / TS30 PRESENTI IN MACCHINA)  
_TLTBL=0;(0=TOOL TABLE, 1=NO TOOL TABLE) 
_MGPOS=1;(IDENTIFICA TIPO DI SLITA 1 = MAGAZINO ARES POSTERIORE 0 = ALTRI TIPI)
_TYPE=1;(IDENTIFICA COSTRUTTORE LASER: 2 = NO LASER / 1 = RENISHAW / 0 = MARPOSS)
_LASPL=2;(IDENTIFICA ASSE PARALLELO DEL LASER 1=ASSE X / 2=ASSE Y)
_TYPMSG=1;(1= MSG SIEMENS / 2= MSG CMS CON M155)
;( *** FINE VARIABILI DA SETTARE ***)
M09;(DISATTIVA RAFFREDDAMENTO UT)
;M68;(CUFFIA ALTA)
M79;(DISATTIVA ARIA FREDDA)
M81;(DISATTIVA SOFFIATORE UTENSILE)
IF ((_TLTBL < 0)OR(_TLTBL > 1)) GOTOF _ALL1
IF _M155 == 155 GOTOF _CHKLAS
STOPRE
IF _TLTBL == 0
;( *** MEMORIZZAZIONE CON TOOL TABLE *** )
M100
G04F0.2
M252;(GESTIONE PER ID.UTENSILE)
G04F0.2
_UTMAN=R210
M250;(GESTIONE PER FAMIGLIA)
M101
G04F0.2
ELSE
;( *** MEMORIZZAZIONE SENZA TOOL TABLE *** ) 
_UTMAN=$A_INA[1]
ENDIF
STOPRE
;( *** ERRORI DI PROGRAMMAZIONE 1 *** )
IF $P_DRYRUN GOTOF _ALL2
IF _UTMAN < 0 GOTOF _ALL3 
IF _VALD < 1 GOTOF _ALL4
IF _NLAS < 0 GOTOF _ALL5
IF ((_MGPOS < 0)OR(_MGPOS > 1)) GOTOF _ALL6
IF ((_TYPE < 0)OR(_TYPE > 2)) GOTOF _ALL6
IF ((_LASPL < 1)OR(_LASPL > 2)) GOTOF _ALL6
IF ((_TYPMSG < 1)OR(_TYPMSG > 2)) GOTOF _ALL6
IF ((_LASER_TS30 < 1)OR(_LASER_TS30 > 2)) GOTOF _ALL7
IF ((_LASER_BROKEN==0)OR(_LASER_BROKEN==1)OR(_LASER_BROKEN==2)) GOTOF _CHKLAS 
IF ((_LASER_BROKEN < 1)OR(_LASER_BROKEN > 2)) GOTOF _ALL8
_CHKLAS:
IF (($A_IN[9]==1)AND(_LASER_BROKEN==1)AND($A_IN[12]==1)) GOTOF _ALL9 
IF (($A_IN[9]==1)AND(_LASER_BROKEN==2)AND($A_IN[12]==0)) GOTOF _ALL10
STOPRE
IF (($A_IN[9]==1) AND ($A_IN[12]==1) AND (_MGPOS==1) AND (_LASER_TS30==2) AND (_CALIB==1) AND (_TYPE<>1))  GOTOF _ALL13
;(***** VERIFICA CONDIZIONI LASER VICINO A PARATIA *****) 
_COND=-11
IF ((ABS($MA_POS_LIMIT_PLUS[X1])) > (ABS($MA_POS_LIMIT_MINUS[X1])))
_MIDX=((($MA_POS_LIMIT_PLUS[X1])-(1))/2)
STOPRE
ELSE
_MIDX=((($MA_POS_LIMIT_MINUS[X1])+(1))/2)
STOPRE
ENDIF
IF (((_NLAS > 1) AND (_MGPOS==1) AND ($A_IN[9]==0)) OR (_NLAS == 1))
IF ISVAR ("ML_LS_HEAD") 
_MOD_LAS_TS=0
ENDIF
_COND=0
STOPRE
ENDIF
IF ((_LASER_BROKEN==1)AND(_MGPOS<>1)AND($A_IN[9]==1))
IF ISVAR ("ML_LS_HEAD")
_MOD_LAS_TS=1 ML_LS_HEAD=3 
ENDIF
_COND=3
STOPRE
ENDIF
IF ((_LASER_BROKEN==2)AND(_MGPOS<>1)AND($A_IN[9]==1))
IF ISVAR ("ML_LS_HEAD")
_MOD_LAS_TS=1 ML_LS_HEAD=2 
ENDIF
_COND=2
STOPRE
ENDIF
IF _COND==0 GOTOF _LAS1
STOPRE
IF ((_LASER_BROKEN==1)AND(_COND==3)) GOTOF _LAS2
IF ((_LASER_BROKEN==2)AND(_COND==2)) GOTOF _LAS1
IF $A_IN[9]==1 GOTOF _PARON
STOPRE
IF ((_NLAS > 1) AND (_MGPOS <> 1) AND ($AA_IM[X] < _MIDX))
IF ISVAR ("ML_LS_HEAD")
_MOD_LAS_TS=1 ML_LS_HEAD=2 
ENDIF
_COND=2
STOPRE
ENDIF
IF ((_NLAS > 1)AND(_MGPOS <> 1)AND($AA_IM[X] > _MIDX))
IF ISVAR ("ML_LS_HEAD")
_MOD_LAS_TS=1 ML_LS_HEAD=3 
ENDIF
_COND=3
STOPRE
ENDIF
IF _COND==2 GOTOF _LAS1
IF _COND==3 GOTOF _LAS2
_PARON:
STOPRE
IF $A_IN[12] == 1
IF NOT ISVAR ("ML_LS_HEAD") GOTOF _Z1
_MOD_LAS_TS=1 ML_LS_HEAD=2 
_Z1:
_COND=2
ELSE
IF NOT ISVAR ("ML_LS_HEAD") GOTOF _Z2
_MOD_LAS_TS=1 ML_LS_HEAD=3 
_Z2:
_COND=3
ENDIF
STOPRE
IF _COND==3 GOTOF _LAS2
;( ******** POSITIONS ********* )
_LAS1: ;(POSITION IN mm ZONA 1 ) 
_POSA=0               ;POSIZIONE ASSE A/B 
_POSC=-90             ;POSIZIONE ASSE C 
_POSZ=-50             ;QUOTA SICUREZZA IN Z VALORE NEGATIVO 
_CKTO=5               ;TOLLERANZA PER CONTROLLO ORIGINE
_CZMIN=80             ;CONTROLLO Z MINIMA PRIMO POSIZIONE
_ZMAX=400             ;QUOTA SICUREZZA PER AVVICINAMENTO
_FEDD=8000            ;FEDD PER POSIZIONE Z
_X_POS_TS30=-2156.551 ;POSITION X TS30
_Y_POS_TS30=-227.137  ;POSITION Y TS30
_Z_POS_TS30=-404.947  ;POSITION Z TS30
_X_POS_LASER=-2106.346;POSITION X LASER
_Y_POS_LASER=-31.00   ;POSITION Y LASER
_Z_POS_LASER=-426.899 ;PO SITION Z LASER
_MSEN=447             ;CODICE M SENSORE LASER / TS30 1
IF _TYPE == 1         ;CONFIGURAZIONE RENISHAW
_MDIN=445             ;CODICE M ROTTURA LASER 1
_MSTA=444             ;CODICE M MISURA LASER 1 
_MLAT=442             ;CODICE M LATCH LASER 1
ELSE 
;*********************CONFIGURAZIONE MARPOSS S 
_MDIN=445             ;CODICE M DINAMICA LASER 1 
_MSTA=444             ;CODICE M STATICA LASER 1
_LASOK=25             ;VARIABILE LASER 1 OK
ENDIF
GOTOF _FINCON
_LAS2: ;(POSITION IN mm ZONA 2 ) 
;(NEL CASO DI UNICA POSIZIONE SETTARE COME ZONA 1) 
_POSA=0               ;POSIZIONE ASSE A/B 
_POSC=-90             ;POSIZIONE ASSE C 
_POSZ=-50             ;QUOTA SICUREZZA IN Z VALORE NEGATIVO 
_CKTO=5               ;TOLLERANZA PER CONTROLLO ORIGINE
_CZMIN=80             ;CONTROLLO Z MINIMA PRIMO POSIZIONE
_ZMAX=400             ;QUOTA SICUREZZA PER AVVICINAMENTO
_FEDD=8000            ;FEDD PER POSIZIONE Z
_X_POS_TS30=-3037.633 ;POSITION X TS30
_Y_POS_TS30=-226.533  ;POSITION Y TS30
_Z_POS_TS30=-403.702  ;POSITION Z TS30
_X_POS_LASER=-2987.113;POSITION X LASER
_Y_POS_LASER=-31.00   ;POSITION Y LASER
_Z_POS_LASER=-426.539 ;POSITION Z LASER
_MSEN=447             ;CODICE M SENSORE LASER / TS30 2
IF _TYPE == 1         ;CONFIGURAZIONE RENISHAW
_MDIN=445             ;CODICE M ROTTURA LASER 2
_MSTA=444             ;CODICE M MISURA LASER 2 
_MLAT=442             ;CODICE M LATCH LASER 2
ELSE 
;*********************CONFIGURAZIONE MARPOSS 
_MDIN=445             ;CODICE M DINAMICA LASER 2 
_MSTA=444             ;CODICE M STATICA LASER 2
_LASOK=25             ;VARIABILE LASER 2 OK
ENDIF
STOPRE 
_FINCON:
;(CONTROLLO SE IN POLLICI)
IF $MN_SCALING_SYSTEM_IS_METRIC == 0
_POSZ=(_POSZ/25.4) _CZMIN=(_CZMIN/25.4) _ZMAX=(_ZMAX/25.4) _X_POS_LASER=(_X_POS_LASER/25.4) _Y_POS_LASER=(_Y_POS_LASER/25.4) _Z_POS_LASER=(_Z_POS_LASER/25.4) _X_POS_TS30=(_X_POS_TS30/25.4) _Y_POS_TS30=(_Y_POS_TS30/25.4) _Z_POS_TS30=(_Z_POS_TS30/25.4) _FEDD=(_FEDD/25.4) _CKTO=(_CKTO/25.4)
IF ((_CALIB <> 1) OR ($P_OPMODE == 0)) GOTOF _NOINCH 
_LUNG=(_LUNG/25.4) _RAG=(_RAG/25.4)
IF _LASER_TS30 == 2
_DIAM=(_DIAM/25.4) _SPSR=(_SPSR/25.4)
ENDIF
_NOINCH:
STOPRE
ENDIF
STOPRE
IF _M155 == 155 GOTOF _NOSET
;(*** CONTROLLO CALIBRAZIONE OK ***)
IF _LASER_TS30 == 2 GOTOF _TASON
IF _TYPE == 1
;(*** CONTROLLO ORIGINI RENISHAW ***)
IF _LASPL == 1
_XOK=(ABS((_X_POS_LASER)-(_RENT[24])))
_YOK=(ABS((_Y_POS_LASER)-(_RENT[22])))
IF _CALIB == 1
_RENT[36]=_Z_POS_LASER _RENT[40]=_Y_POS_LASER _RENT[45]=_Y_POS_LASER _RENT[47]=_X_POS_LASER
IF $MN_SCALING_SYSTEM_IS_METRIC == 0
_RENT[36]=((_RENT[36])*(25.4)) _RENT[40]=((_RENT[40])*(25.4)) _RENT[45]=((_RENT[45])*(25.4)) _RENT[47]=((_RENT[47])*(25.4))
ENDIF
ENDIF
ELSE
_XOK=(ABS((_X_POS_LASER)-(_RENT[22])))
_YOK=(ABS((_Y_POS_LASER)-(_RENT[24])))
IF _CALIB == 1
_RENT[36]=_Z_POS_LASER _RENT[40]=_X_POS_LASER _RENT[45]=_X_POS_LASER _RENT[47]=_Y_POS_LASER
IF $MN_SCALING_SYSTEM_IS_METRIC == 0
_RENT[36]=((_RENT[36])*(25.4)) _RENT[40]=((_RENT[40])*(25.4)) _RENT[45]=((_RENT[45])*(25.4)) _RENT[47]=((_RENT[47])*(25.4))
ENDIF
ENDIF
ENDIF
_ZOK=(ABS((_Z_POS_LASER)-(_RENT[21])))
IF _CALIB == 1 GOTOF _CALON
STOPRE
IF ((_XOK >= _CKTO)OR(_YOK >= _CKTO)OR(_ZOK >= _CKTO)) GOTOF _ALL11
ELSE
;(*** CONTROLLO ORIGINI MARPOSS ***)
_XOK=(ABS((_X_POS_LASER)-(_X_POS_LASER)))
_YOK=(ABS((_Y_POS_LASER)-(_Y_POS_LASER)))
_ZOK=(ABS((_Z_POS_LASER)-(_Z_POS_LASER)))
STOPRE
IF _CALIB == 1 GOTOF _CALON
IF ((_XOK >= _CKTO)OR(_YOK >= _CKTO)OR(_ZOK >= _CKTO)) GOTOF _ALL11
ENDIF
_TASON:
;(*** CONTROLLO ORIGINI TASTATORE ***)
;(*** CONTROLLO SIEMENS NON NECESSARIO ***)
_CALON:
;*** AUTOMATIC DATA SETTING *** 
IF ((_CALIB <> 1) OR ($P_OPMODE == 0)) GOTOF _NOSET
IF $TC_DP1[$P_TOOLNO,_VALD] <> 725 GOTOF _ALL16
STOPRE
$TC_DP12[$P_TOOLNO,_VALD]=0   ;RESET USURA
$TC_DP3[$P_TOOLNO,_VALD]=_LUNG;LUNGUEZZA SPINA
$TC_DP15[$P_TOOLNO,_VALD]=0   ;RESET USURA RAGGIO
$TC_DP6[$P_TOOLNO,_VALD]=_RAG ;RAGGIO SPINA
_NOSET:
IF (($AA_IM[Z]) < ((_POSZ)+(_POSZ)))
IF _TYPMSG == 1
MSG("Z AXIS NOT IN POSITION - DO YOU WANT TO CONTINUE? START=YES / RESET=NO")
M00
STOPRE
MSG("MOVING ASSE Z IN SAFETY POSITION")
SUPA G90 G0 AX[$P_AXN3]=_POSZ AX[_AXN4]=0
ELSE
M155;Z AXIS NOT IN POSITION - DO YOU WANT TO CONTINUE?,YES,NO 
STOPRE
IF R155 <> 1  
GOTOF _ALL12 
STOPRE
ENDIF
R155=0 ;RESET M155
SUPA G90 G0 AX[$P_AXN3]=_POSZ AX[_AXN4]=0 
ENDIF
ENDIF
MSG()
M68;(CUFFIA ALTA)
IF (($AA_IM[Z]) < ((_POSZ)+(_POSZ))) GOTOF _ALL12
IF _M155 == 155 GOTOF _ENDPRG
STOPRE
_ZSIC=(($TC_DP3[$P_TOOLNO,_VALD])+($TC_DP12[$P_TOOLNO,_VALD]))
IF _LASER_TS30 == 2
SUPA G90 G0 AX[$P_AXN3]=_POSZ
SUPA G90 G0 AX[_AXN4]=_POSA AX[_AXN5]=_POSC 
SUPA G90 G0 AX[$P_AXN3]=0
M=_MSEN
;_MOD_LAS_TS=_MSEN
;SUPA G90 G0 AX[_AXN4]=_POSA AX[_AXN5]=_POSC 
IF (($MA_POS_LIMIT_MINUS[X1] > _X_POS_TS30)OR($MA_POS_LIMIT_PLUS[X1] < _X_POS_TS30)) GOTOF _ALL13
;SUPA G90 G0 AX[$P_AXN3]=0
SUPA G90 G0 AX[$P_AXN1]=_X_POS_TS30 AX[$P_AXN2]=_Y_POS_TS30
IF _ZSIC < _CZMIN GOTOF _ALL15
MEAS=1 SUPA G90 G1 F=_FEDD AX[$P_AXN3]=((_Z_POS_TS30)+(_ZMAX))
STOPRE
IF (((ROUND((($AA_IM[$P_AXN3]))*1000))/1000) <> ((ROUND(((_Z_POS_TS30)+(_ZMAX))*1000))/1000)) GOTOF _ALL15
STOPRE
ELSE
SUPA G90 G0 AX[$P_AXN3]=_POSZ
SUPA G90 G0 AX[_AXN4]=_POSA AX[_AXN5]=_POSC
SUPA G90 G0 AX[$P_AXN3]=0 
M=_MSTA
;_MOD_LAS_TS=_MDIN
;SUPA G90 G0 AX[_AXN4]=_POSA AX[_AXN5]=_POSC
IF (($MA_POS_LIMIT_MINUS[X1] > _X_POS_LASER)OR($MA_POS_LIMIT_PLUS[X1] < _X_POS_LASER)) GOTOF _ALL13
;SUPA G90 G0 AX[$P_AXN3]=0
SUPA G90 G0 AX[$P_AXN1]=_X_POS_LASER AX[$P_AXN2]=_Y_POS_LASER
IF _ZSIC < _CZMIN GOTOF _ALL15
IF _TYPE == 0
MEAS=1 SUPA G90 G1 F=_FEDD AX[$P_AXN3]=((_Z_POS_LASER)+(_ZMAX))
STOPRE
IF (((ROUND((($AA_IM[$P_AXN3]))*1000))/1000) <> ((ROUND(((_Z_POS_LASER)+(_ZMAX))*1000))/1000)) GOTOF _ALL15
ENDIF
ENDIF
ENDIF
STOPRE
IF ((((ROUND((($AA_IM[_AXN4]))*100))/100)<>((ROUND(((_POSA))*100))/100))OR(((ROUND((($AA_IM[_AXN5]))*100))/100)<>((ROUND(((_POSC))*100))/100))) GOTOF _ALL14
STOPRE
M=_MSEN
STOPRE
;T=$P_TOOLNO
D=_VALD
_ENDPRG:
M17
RET
_ALL1:
MSG("66001,VERIFY MANUAL INPUT IS INCORRECT _TLTBL")
M00
GOTOB _ALL1
_ALL2:
MSG("66002,MODAL DRY RUN ACTIVE")
M00
GOTOB _ALL2
_ALL3:
MSG("66003,TOOL SELECTED NOT OK. T0")
M00
GOTOB _ALL3
_ALL4:
MSG("66004,TOOL COMPENSATION NOT OK. D0")
M00
GOTOB _ALL4
_ALL5:
MSG("66005,VERIFY MANUAL INPUT IS INCORRECT _NLAS")
M00
GOTOB _ALL5
_ALL6:
MSG("66006,VERIFY MANUAL INPUT IS INCORRECT _MGPOS OR _TYPE OR _LASPL OR _TYPMSG")
M00
GOTOB _ALL6
_ALL7:
MSG("66007,VERIFY MAIN PROGRAM AT LINE POS_LASER_TS30 VARIABLE _LASER_TS30")
M00
GOTOB _ALL7
_ALL8:
MSG("66008,VERIFY MAIN PROGRAM AT LINE POS_LASER_TS30 VARIABLE _LASER_BROKEN")
M00
GOTOB _ALL8
_ALL9:
MSG("66009,LASER 1 BROKE")
M00
GOTOB _ALL9
_ALL10:
MSG("66010,LASER 2 BROKE")
M00
GOTOB _ALL10
_ALL11:
MSG("66011,PARAMETER NOT OK - YOU MUST RUN - CALIBRATION")
M00
GOTOB _ALL11
_ALL12:
MSG("66012,Z AXIS NOT IN POSITION")
M00
GOTOB _ALL12
_ALL13:
MSG("66013,MACHINE NOT IN THE CORRECT ZONE -M162-")
M00
GOTOB _ALL13
_ALL14:
MSG("660014,AXIS HEAD NOT IN POSITION")
M00
GOTOB _ALL14
_ALL15:
MSG("660015,ANOMALY : PREMATURE TOUCH VERIFY TOOL SETTING")
M00
GOTOB _ALL15
_ALL16:
MSG("660015,ANOMALY : TYPE TOLL NOT CORRECT <> 725")
M00
GOTOB _ALL16