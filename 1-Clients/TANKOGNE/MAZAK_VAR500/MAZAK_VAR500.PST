[POST_VERSION] #DO NOT MOVE OR ALTER THIS LINE# V23.00 P0 E1 W23.00 T1607678693 M23.00 I0 O0
# ---------------------------------------------------------------------------------------------------------
# -   POST PRO FRAISAGE 3, 4 et 5 AXES positionner et continue pour fanuc                                                       -
# -   SOUS PROG EN Z en ABSOLUE et INCREMENTAL                                                            -
# ---------------------------------------------------------------------------------------------------------
# -   Version 5.0                                                                                         -
# ---------------------------------------------------------------------------------------------------------
# -   Affichage des Surep R et L et 3D                                                                    -
# -   Affichage des type de corections                                                                    -
# ---------------------------------------------------------------------------------------------------------
# -       MASTERCAM X9         F.I.CAM                                                                    -
# ---------------------------------------------------------------------------------------------------------
# - Realise le      : 01-08-2015 Par : GG
# - Pour la societe : TANCOGNE
# - Armoire CN      : MAZAK VARIAXIS J500
# - Nom MACHINE     : MAZAK VARIAXIS J500
# ---------------------------------------------------------------------------------------------------------
# -                                           -
# ---------------------------------------------------------------------------------------------------------
# -   DESCRIPTION DES MODIFICATIONS           -
# affichage du descripteur de fichier meme si pas question entete
# ajout de l'info groupe ou non
# mi10 utilise pour ajuster les avances sur les arc 0=NON 1=Ralentir 2=Accelerer 3=les Deux
# modification de la gestions des degagement machine en fonction des flag de reglage PST
# mi1 utilise pour ne pas degager en Z avant rotation plateau
# mi2 utilise pour ne pas bloquer le diviseur
# Workof (nede Decalage) de 54 a 59  (0 pour 54 1 pour 55 etc...) et 59.1P1 P2 apres
# ecriture des parametres dans NCI et du fichier OPS (pour lire les infos de surep)
# creation des bloc pour afficher les surep
# creation de l'affichage des types de correction
# gestion du pmx en 4 axes
# lecture de la def armoire pour :
#                   l'extension de l'iso
#                   les arcs
#                   les commentaires
#                   la preparation de l'outil suivant
# Lecture de la def machine pour :
#                   Le nom de la machine
#                   Le nombre d'axes rotatif
#                   Le sens de rotation de l'axe rotatif
#                   Le nom de l'axe rotatif (ABC)
#                   L'avance Maxi et Mini de la machine
# ---------------------------------------------------------------------------------------------------------

#---------------------------------------------------------------------------------------------------------
#            REGLAGES DU PST
#

inc_degage  : 1     # degagement machine  1 en INCREMENTAL (G91) ou 0 en ABSOLUE (G90)
sdegageZ    : "Z0."    # Degagement en Z pour appel outil et changement de position 4eme axe
sdegageY    : "Y-448."    # Degagement en Y pour appel outil
sdegageX    : "X-350."    # Degagement en X pour appel outil et changement de position 4eme axe
smodedeg    : "G53"   # Mode de degagement des axes G28 G53
#tooltable$   : 1     # creation liste outil en entete
texte       : 1 # afficher les commentaires
deg_debut   : 4     # Degager aux debut de prog             0=nom  1=Z  2=Z-X  3=Z-Y  4=Z-X-Y  5=Z-XY
deg_outil   : 3     # Degager aux changement outil          0=nom  1=Z  2=Z-X  3=Z-Y  4=Z-X-Y  5=Z-XY
deg_4axe    : 3     # Degager aux changement position 4 et 5 eme axe  0=nom  1=Z  2=Z-X  3=Z-Y  4=Z-X-Y  5=Z-XY
deg_fin     : 4     # Degager en fin de programme           0=nom  1=Z  2=Z-X  3=Z-Y  4=Z-X-Y  5=Z-XY


diviseur    : 1     # 1 = pour quand utilisation du 4eme axe autour de X (substituer Y), 2 = pour quand utilisation du 4eme axe autour de Y (substituer X)
use_origine : 0     # 0 = utiliser les origines de G54 a G59 puis G54.1 Pxx, 1 = Utiliser que sous forme G54.1 Pxx
numcoment   : 0     # Numeroter les lignes de commentaire 0 = nom 1 = oui
numsprog    : 0     # Numeroter les lignes de sous programme 0 = nom 1 = oui
info_corr   : 0     # afficher le type de correction
info_surep  : 0     # afficher les surepaisseurs xy et z
info_outil  : 1     # afficher les info sur l'outil
info_groupe : 1     # afficher les noms des groupe d'usinage
outil_apres : 0     # preparation outil suivant juste apres appel outil : 0  - preparation outil suivant avec premier placement : 1
test_outil  : 1     # test au moment de ranger outil si casse - voir: pcasse_outil
use_progno  : 0     # Ecrire le NC sous forme O0123.nc  = 1 ou TOTO.NC = 0
entete      : 0     # Poser les question pour l'entete
tooltable$  : 1     # creation liste outil en entete
use_bloque  : 0     # pour ecrire M10 M11 (blocage diviseur)    :0 pour ne pas ecrire M10 M11
avance_arc  : 0     # ajuster les avances sur les arcs en correction usure ou ordinateur 0 = nom 1 = oui (utilise avance mxi et mini de la def machine)
fmini       : 1     # avance mini machine en travail
fmaxi       : 10000 # avance maxi machine en travail
nbroutil    : 0     # nombre d'outil de la machine pour ajout au D (0 pour T1 D1 - 30 pour T1 D31)
D_et_H_cor  : 0     # numero de correcteur 518 => H#518  0 => CORRECTEUR MASTERCAM
polarite    : -1    # donne la preferance du cote ou l'on veux A ou B 1= B+, -1=B-
useorigine  : 1
xdebut : 0
ydebut : 0

axeBmax     :  30  # valeur angulaire max de l'axe A ou B
axeBmin     : -120 # valeur angulaire mini de l'axe A ou B

srtcpon     : "G43.4"
srtcpoff    : ""
splaninc_on    : "G68.2"
splaninc_off  : "G69"
#sugv_on : "G05P2"   # activation du mode ugv apres chargement outil
#sugv_off : "G05P0"  # arret ugv

fmt  "A" 2 axeB        # POSITION pour rotation plateau en ABS
fmt  "A" 2 old_axeB    # memo de l ancien A
fmt  "A" 2 old_axeB2
fmt  "Binc" 11 axeBi        # POSITION pour rotation plateau en INCREMENTAL

fmt  "C" 2 axeC        # POSITION pour rotation plateau en ABS
fmt  "C" 2 old_axeC    # memo de l ancien A
fmt  "C" 2 old_axeC2
fmt  "Cinc" 11 axeCi        # POSITION pour rotation plateau en INCREMENTAL



#------------------------------------------------------------------------------------------------------------------
#   UTILISER LES CYCLES MACHINE ou DECOMPOSITION en G1 G0
#

usecandrill$ : yes$   # utiliser cycle percage lamage
usecanpeck$  : yes$   # utiliser cycle debourrage
usecanchip$  : yes$   # utiliser cycle brise copeaux
usecantap$   : yes$   # utiliser cycle taraudage
usecanbore1$ : yes$   # utiliser cycle alesage a l'alesoir
usecanbore2$ : yes$   # utiliser cycle alesage a la barre
usecanmisc1$ : no$    # utiliser cycle divers 1
usecanmisc2$ : no$    # utiliser cycle divers 2



#--------------------------------------------------------------------------------------------------------
#   DEBUG POST PRO
bug1$     : 2       # 0 = pas voir le NC  1 = Visu du NC en lecture - 2 = visu du NC en edit
bug2$     : 70      # numero de colonne pour l'affichage du bloc en cour de traitement
#CNC<<ECHEC>>bug3$     : 0       # whatline 01234 etat de l'usinage0 debut prog 1 prapid 2 pzrapid 3 mouvement frplung 4 fin
#CNC<<MSG -ERREUR(127)>> The variable, postblock, or other keyword is no longer supported
bug4$     : 1       # numero de ligne du nci traite
whatno$   : yes$    # Ignore whatline branches to plin1 etc.?

#--------------------------------------------------------------------------------------------------------
#   TOLERANCES POST PRO
linktolvar$    : 1  #Associer les variables de tolerance X metrique au variable english
#linklvar$  :1  # ULISLIDE LES USECANDRIL POUR LES LCANDRILL
linkplnvar$    : 0  #Associer les variables specifiques plan Xy POUR TOUS LES PLAN YZ XZ
linklvar$      : 1  #Associer les variables specifiques X Tournage AU FRAISAGE ULISISE LES USECANDRIL POUR LES LCANDRILL
cant_tlchng$   : 1  #Ignorer entree de texte programme au changement avec tlchng_aft?
newglobal$     : 1  #Activer la verification d'erreur pour les variables globales?

#------------------------------------------------------------------------------------------------------------------
#   FORMATS DES VARIABLES
#
fs  1  1.6lt        # Format avec toute la precision pour les variable internes de mp
fs  2  1.3      # frormat d'affichage a 3 chifres max pour les variables affichees
fs  3  1.3n     # idem mais non modale
fs  4  1 0      # 1 chiffre mini avant virgule  pas de virgule pas de chiffre apres
fs  5  1 0n     # idem mais non modale
fs  6  4 0ln        # 4 chiffres avant pas de virgule pas de chiffre apres non modal force 0 de tete
fs  7  1 3t     # 1 chiffre mini avant virgule  pas de virgule 3 apres force 0 de queue non modal.
fs  8  1.3ln        # 1 chiffre avant la vigule met . 3 chiffres apres virgule non modal force 0 de tete
fs  9  1 0n     # pour liste outil
fs  10 1.3n     # pour liste outil
fs  11 1.3i     # force 1 chiffre avant virgule met . 3 chiffres apres virgule en incremental
fs  12 1.3ni
fs  13 3 0ln
fs  14 9 0ln


#------------------------------------------------------------------------------------------------------------------
#   AFFECTATION DES VARIABLES FLAG
#
fmt    2  texte
fmt    2  info_corr
fmt    2  info_outil
fmt    2  info_surep
fmt     4 numcoment # flag pour Numeroter les lignes de commentaire
fmt     4 numsprog  # flag pour Numeroter les lignes de sous programme
#fmt     1 texte     # flag pour textes
fmt     1 nbr_car   # nombre de carracteres maxi dans les connemtaires
fmt     1 old_comm_cnt  # nombre d'enregistrement dans buffeur commentaires
#fmt     1 info_corr # flag pour correction outil
#fmt     1 info_outil    # flag pour info outil
#fmt     1 info_surep    # flag pour surep
fmt     1 info_groupe   # flag pour le nom des groupes
fmt     1 old_spaces    # memo de spaces
fmt     1 old_omitseq   # memo de omiseq
fmt     1 old_linarc    # memo de la decomposition des arcs
fmt     4 entete    # Variable utilisee pour generer l'entete
fmt     4 numerote  # Variable numerote utilisee pour numeroter ou non les lignes
fmt     1 outil_apres   # flag pour la position d'appel de l'outil suivant
fmt     1 avance_arc    # flag pour gerer l'avance sur arc
fmt     1 test_outil    # flag de test outil
#------------------------------------------------------------------------------------------------------------------
#   AFFECTATION DES VARIABLES MP
fmt     1 gcode$        # Gcode pst
fmt     1 memo_gcode
fmt     1 x$        # XYZ pst
fmt     1 y$
fmt     1 z$
fmt     1 xr$       # XYZ rapide pst
fmt     1 yr$
fmt     1 zr$
fmt     1 i$        # IJK centre des arcs pst
fmt     1 j$
fmt     1 k$
fmt     1 xnci$
fmt     1 ynci$
fmt     1 znci$
fmt "M1=" 1 m1$
fmt "M2=" 1 m2$
fmt "M3=" 1 m3$
fmt "M4=" 1 m4$
fmt "M5=" 1 m5$
fmt "M6=" 1 m6$
fmt "M7=" 1 m7$
fmt "M8=" 1 m8$
fmt "M9=" 1 m9$


fmt     1 arcrad$   # Valeur du rayon pst
fmt     1 linarc$   # couper les arcs
fmt     1 t$        # numero d'outil pst
fmt     1 next_tool$    # numero suivant pst
fmt     1 first_tool$   # numero du premier outil pst
fmt     1 tloffno$  # Correcteur de Diamentre pst
fmt     1 tlngno$   # Correcteur de Longueur pst
fmt     1 tldia$    # diametre outil pst
fmt     1 cc_computer$  # correction ordinateur
fmt     1 cc_pos$   # correction Armoire
fmt     1 fr$       # avance pst
fmt     1 fr_pos$   # AVANCE TRAVAIL au point pst
fmt     1 ss$       # vitesse de broche pst
fmt  "N" 4 n$       # numerotetion des blocs a chaque ligne
fmt  "O" 4 progno$  # Numero de programe pst
fmt  "G" 4 cc$      # valeur de la correction dans NCI
fmt     1 coolant$  # Lubrification 0 1 2 3 arret axe buse les deux
fmt     1 mi1$      # mi1 utilise pour degagement en Z avant rotation plateau
fmt     1 mi2$      # mi2 utilise pour ne pa rebloquer le plateau
fmt     1 mi5$      # mi5 util pour enlever le G53.1
fmt     1 mi6$      # utilisation du M39
fmt  "G4 P" 4 mi7$     # tempo pour arrosage
fmt  "G4 P" 4 tempoo
fmt     4 mi8$      # utilisation du G05P2
fmt     1 op_id$    # Numero de l'operation du gestionaire PST
#------------------- PERCAGES ------------------------------------------
fmt    1 depth$     # profondeur percage pst
fmt    1 refht$     # Garde pour percage pst
fmt "Z" 2 initht$   # Plan de secu percage pst
fmt    1 frplunge$  # Avance percage pst
fmt    3 dwell$     # Tempo pour percage pst
fmt  "D" 3 peckclr$     # garde d'approche rapide dans les debourrage pst
fmt  "Q" 3 peck1$       # Pas Z du premier debourrage pst
fmt  "Q" 3 peck2$       # Pas Z des debourrages suivants
fmt  "Q" 3 shftdrl$     # valeur de retrait du grain de la barre d'allsage
fmt  "Q" 3 retr$        # valeur de remonte relative en rapide dans les debourages en G1 G0
fmt  "Z" 3 zgarde
#------------------- SOUS PROG ------------------------------------------
fmt     1 sub_prg_no$       # Numero de sous-programe interne en Z
fmt     1 main_prg_no$      # Numero de sous prog interne en transformation
fmt  "X" 1 sub_trnsx$       # decalage en X pour G52 en usinage transformer translation
fmt  "Y" 1 sub_trnsy$       # decalage en Y pour G52 en usinage transformer translation
fmt  "Z" 1 sub_trnsz$       # decalage en Z pour G52 en usinage transformer translation
sub_trnsx$   :  -99999
sub_trnsy$   :  -99999
sub_trnsz$   :  -99999
#------------------- 5 AXES ------------------------------------------
fmt    1 rotdia$            # diam de sbstitution
fmt    1 rotaxis$       # type de substitution
fmt  "v" 1 v$
fmt  "w" 1 w$
m7$     : 999
m8$     : 999
fmt "Tr" 1 tourne
fmt "NbTr" 4 Nb_tour
fmt "X" 3 xdec
fmt "Y" 3 ydec
fmt "Z" 3 zdec
fmt "TrC" 2 tourneC
fmt "J" 3 axeB_rot
fmt "I" 3 axeC_rot
fmt "New_M9" 1  new_m9
fmt "new_vz2=" 1 new_vz2
fmt "Cpur" 1 axeCpur
fmt "Inv=" 4 mi4$
fmt "" 4 D_et_H_cor
fmt "Polar" 4 polarite
fmt "X" 3 xdebut
fmt "Y" 3 ydebut

fmt  "" 1 old_tox4
fmt  "" 1 old_toy4
fmt  "" 1 old_toz4

#------------------------------------------------------------------------------------------------------------------
#   AFFECTATION DES VARIABLES NC
#
#------------------- POSITIONS ------------------------------------------
fmt  "X" 2 xabs         # XYZ en Absolue pour NC
fmt  "Y" 2 yabs
fmt  "Z" 2 zabs

fmt  "X" 11 Xinc        # XYZ en incremental pour NC
fmt  "Y" 11 Yinc
fmt  "Z" 11 Zinc

fmt  "X" 3 mr1$        # XYZ en incremental pour NC
fmt  "Y" 3 mr2$
fmt  "Z" 3 mr3$
fmt  "A" 3 mr4$
fmt  "C" 3 mr5$


Xinc = xabs
Yinc = yabs
Zinc = zabs
axeBi = axeB            # A incremental

fmt "px" 2 old_x        # ancien XYZ du NC
fmt "py" 2 old_y
fmt "Z" 2 old_z

fmt  "I" 2 iabs         # IJK centre des arcs pour NC en G90
fmt  "J" 2 jabs
fmt  "K" 2 kabs

fmt  "I" 2 iinc         # ijk centre des arcs pour NC en G91
fmt  "J" 2 jinc
fmt  "K" 2 kinc
fmt  "R" 3 rayon        # valeur de rayon de l'arc pour NC
fmt      1 cor_arc      # compensation sur les arc autorisee
#------------------- OUTILS ------------------------------------------
fmt      1 deg_debut
fmt      1 deg_outil
fmt      1 deg_4axe
fmt      1 deg_fin

fmt  "T" 4 outil_op         # numero outil pour Liste des Operations
fmt  "T" 4 old_outil_op

fmt  "T" 5 outil        # numero d'outil appele pour NC
fmt  "T" 5 outil_suivant    # numero de l'outil suivant pour NC
fmt     5 nbroutil      # nombre d'outil du changeur de la def machine
fmt  "T" 5 memo_t
fmt  "D" 4 correcteur_D     # Correcteur de Diamentre pour NC
fmt  "H" 4 correcteur_H     # Correcteur de Longueur pour NC
fmt  "H" 4 old_correcteur_H
fmt  "Casse outil" 4 casse_outil
fmt "soufflage =" 4 soufflage




fmt  "DIAM " 2 diam_outil   # diametre outil pour NC
fmt  "F" 4 avance       # avance pour NC
fmt  "E" 4 avance_retract
avance_retract : 0
fmt  "S" 4 ssa          # Vitesse de broche affiche

ssa = abs(ss$)          # vitesse de broche en valeur absolue

fmt  "S" 4 old_ss       # memo de la vitesse de broche precedente
fmt     4 lubrif        # gestion de la lubrification pour NC
fmt     3 type_comp     # type de correction
fmt "SUREP R " 8 surep          # Surep au rayon
fmt "SUREP Z " 8 surepl         # Surep en Z
fmt "SUREP 3D " 8 surep3d       # Surep en usinage 3D
surep3d = surep
fmt "R" 1 result        # resultat de calcul

fmt     5 prognosav     # Memo du Numero de programe
fmt     1 debut         # flag pour debut de programme
#------------------- NUMEROTATION ------------------------------------------
fmt  "N" 4 num          # numero de bloc sur ligne appel outil si pas de numerotation des lignes
fmt    1 old_op_id      # Memo de l'operation
fmt    1 last_op_id     # Derniere operation
num : 0
num = num + 1
old_op_id : -99999
fmt  "OPERATION #"  5 numop  # NUMERO D'OPERATION
#------------------- ORIGINES D'USINAGE ------------------------------------------
fmt  "G" 4 origine      # origine d'usinage G54 a G59 pour NC
fmt  "G54.1 P"  4 originebis # origine d'usinage G60 a G9999 pour NC
fmt  "G" 4 old_origine      # Stocage de la valeur precedente de origine d'usinage
#---------------------- SOUS PROG ------------------------------------
fmt "inc" 1 incremental     # mode incremental ou Absolue
fmt     1 memo_incremental  # memeo du mode incremental ou Absolue
fmt     1 inc_degage        # degagement machine en INCREMENTAL ou en ABSOLUE

fmt  "O" 6 debsousprog      # Numero du premier sous programe
fmt  "#100="  4 nprincipal  # memo du numero de ligne du prog principal
fmt  "X" 2 decX         # decalage d'origine en X pour G52
fmt  "Y" 2 decY         # decalage d'origine en Y pour G52
fmt  "Z" 2 decZ         # decalage d'origine en Z pour G52
fmt  "P" 5 subprognum       # numero du sous-programe pour l'appel
fmt  "O" 6 numsubprog       # Numero entete de sous-programe
fmt     5 nomsubprog        # Numero n'entete de sous-programe

fmt  "DEC" 2 decalage       # flag pour savoir si on a ecrit un G52
fmt      1 sous_prog_type   # type de merge des sous prog (0 apres prog principal 1 avant)
incremental : 0         # init en Absolue
decalage : 0

fmt  "transform" 2 transform

#------------------- PERCAGES ------------------------------------------
fmt  "Z" 2 profabs  # profondeur de percage en ABS
fmt  "Z" 2 profi    # profondeur de percage en INC
fmt  "R" 2 gardeabs # Garde pour percage en ABS
fmt  "R" 2 gardei   # Garde pour percage en INC
fmt  "F" 3 pas      # valeur calculee du pas pour taraudage rigide
fmt     2 typcycle  # variable mise a 1 lors des percage pour afficher l'intitule du cycle
fmt  "Q" 2 incrementQ#increment de debourrage ou brise copeaux
fmt  "D" 2 remonteD # remonte en brise copeaux
fmt  "Q" 3 retrait  # valeur de retrait du grain de la barre d'allsage
fmt  "P" 4 tempo
fmt      4 oldtempo 
tempo = dwell$*1000

fmt "Pe5x=" 4 percage5x
	
#-------------------- Axe A et B ------------------------------------------

fmt  3 useaxe           # flag pour utiliser le 4eme axe
fmt  "S" 2 sens         # pour inverser le sens de l'axe
fmt     1 bloque        # pour gestion M10 M11
fmt     1 use_bloque
fmt     1 old_rotaxis       # memo de rotaxis$

fmt "Sens" 2 sensA       # sens de rotation de A
fmt  "B" 2 epsi          # Delta de rotation de l'axe A
fmt  "B" 2 epsiA         # Delta de rotation de l'axe A
fmt  "B" 2 epsiB         # Delta de rotation de l'axe A
fmt  "Ntour" 2 nbrtour   # nombre de tour realise
fmt     3 tolquestion    # flag utilise pour poser la question de tolerance de developpe q'une fois
fmt "maxA" 1 axeBmax
fmt "minA" 1 axeBmin


fmt  "vx" 1 vx
fmt  "vy" 1 vy
fmt  "vz" 1 vz
fmt  "vx2" 1 vx2
fmt  "vy2" 1 vy2
fmt  "vz2" 1 vz2



fmt  "B" 1 axeB1
fmt  "B" 1 axeB2

fmt  "B" 1 delta_axeB1
fmt  "B" 1 axeB1_dep
fmt  "B" 1 old_axeB1

fmt "Deb5x=" 1 debutpmx  # flag debut prog pmx
srot_label : ""

axeB1_dep :  -999999



axeB     : 999          # Inint de B
old_axeB : 0.9999999        # Inint de old_axeB
nbrtour : 0         # Inint du nombre de tour realise
tolquestion : 0         # Inint de tolquestion
#vtol$      : 0.01


#----------------------Parametres de DEF MACHINE-------------------------------

fmt    1 type_composant     # type de composant
fmt    1 compt_axes_rot     # compteur d'axes rotatif
fmt    3 erreur         # numero d'erreur
fmt    3 testerreur4            # flag pour erreur 4
fmt    1 diviseur       # Axe de l'axe rotatif
fmt    1 old_syncaxis       # memo du numero de combinaison d'axes
fmt    1 nbr_combi      # Nombre de combinaison d'axes
fmt    1 palette        # flag pour machine avec palette
fmt    1 fmaxi          # avance maxi de la machine
fmt    1 fmini          # avance mini de la machine


write_ops    : 0     #Write NC operation information (True/False)
erreur : 0
nbr_combi : 0
compt_axes_rot : 0
palette : 1
#-----------------------------Liste des OUTILS----------------------------------------

fmt "T" 5 paramT1       # Ne outil
fmt   5 paramT2         # Type d'outil
fmt   5 paramT3         # Matiere de l'outil 1=Rapide 2=carbure 3=carbure revetu 4=cermet 5=borzon
fmt   5 paramT4         # Type de rayon de bout 0=aucun 1=torique 2=spherique
fmt "DIAM=" 3 paramT5   # Diametre
fmt "R=" 3 paramT6      # Rayon de bout
fmt   3 paramT7         # Nombre de filet par mm
fmt "A=" 3 paramT8  # Angle de bout
fmt   5 paramT9         # Ne de correcteur de rayon
fmt   5 paramT10    # Ne de correcteur de longeur
fmt   3 paramT11    # Avance travail
fmt   3 paramT12    # Avance plongee
fmt   3 paramT13    # Avance retraction
fmt   5 paramT14    # Vitesse de broche
fmt   5 paramT15    # Type de lubrification 0=arret 1=eau 2=air 3=broche 4=les 2
fmt   5 paramT16    " DENTS" # Nombre de dents



#-----------------------------------------------------
#   ZONE de FORMULES  si : uniquement au dedut si = mise a jour systematique
#

#tlchng_aft$ : 2     # Delay the tool change call until the first motion is read on all the NCI Gcode 1000, 1001, 1002 tool changes.
tlchng_aft$ : 1
get_1004$   : 1     # Find gcode 1004 with getnextop?
rpd_typ_v7$ : 0     # Use Version 7 style contour flags?
getnextop$  : 1     # autorise la commande nextop nextccomp etc
strtool_v7$ : 2     # autorise la lecture des commentaires de la bibiotheque outil
skp_lead_flgs$  : 0 # Do NOT use v9 style contour flags
ncldr$      : 20    # nbr de zero de queue utilises pour la fonction "fleader"
ldrcode$    : 65
nobrk$      : no$   # ne pas decomposer en xy pui z les mouvements en rapid
cc_1013$    : 1     # pour connaitre cc dans appel outil
opcode$     : 1
gcode$      : -1
progname$   : 1      # force le nom du nci en majuscule
#bldnxtool$  : 1
breakarcs$ : 90
#region simulation
fmt "la string commence a:" 4 conteur_string
fmt 1 simu
simu : 0
sextsub$ : ".ini"
snom : ""
snom_ini : ""
spathnc_original : ""
sous_chaine : "appdata\local\temp"
#sdllMachSim : "E:\projet VS2017\2019\Simulation_FICAM\Simulation_FICAM\x64\Release\Simulation_FICAM.dll" # pour debug cedric
sdllMachSim : "C:\Program Files\Mastercam 2021\Mastercam\chooks\Simulation_FICAM_M2021"
#sdll :"MachineSimulation\MachSim\convert_iso.dll"
psimulation
    spathnc_original = spathnc$
    conteur_string = scan(sous_chaine,spathnc_original)
    if st_str_ix$, simu = 1
    if simu = 1,
    [
        spathsub$ = spathpst$
        snamesub$ = snom_ini
        subout$ = 1
        snom = spathnc$ + snamenc$ + sextnc$
        "KEY=38226F5094I00C00A0000",e$
        "REP =", *snom, e$
        "USE_OTHER_NC_FILE = YES" ,e$
        "[SHIFT ORIGIN BETWEEN MACHSIM TO REALITY]" ,e$
        "X = 175" ,e$
        "Y = 210" ,e$
        "Z = 550" ,e$

        "[DOT TO DISPLAY MACHSIM]" ,e$
        "X = -175" ,e$
        "Y = -260" ,e$
        "Z = 550" ,e$

        "[MACHINE_DEF]" ,e$
        #;FANUC HEID ect...
        "CONTROL_TYPE = FANUC" ,e$
        #;radius ;delta_start_to_center ;delta_center_to_start; signed_radius
        "ARC_TYPE = delta_start_to_center",e$
        "COMMENT = ( |" ,e$
        ";VARIABLE = #" ,e$
        "FEED_MAX= 50000" ,e$
        "COORD_MACH = G53|G28" ,e$

        "[PLANE_TYPE]" ,e$

        #;PLANE_ON = (UPR|0|XYZ|0.|0.|ROTZ|SHIFTXabs|SHIFTYabs|SHIFTZabs|)|next_line|(UPR|1|XYZ|ROTX|0.|0.)|
        "PLANE_ON = G68.2|SHIFTXabs|SHIFTYabs|SHIFTZabs|ROTZ|ROTX|" ,e$
        "PLANE_OFF = G69" ,e$

        #";SHIFT_ON = CYCL DEF 7.0| POINT ZERO|next_line|CYCL |DEF |7.1|SHIFTXabs|next_line|CYCL |DEF |7.2| SHIFTYabs |next_line|CYCL |DEF |7.3| SHIFTZabs|" ,e$
        "SHIFT_ON = G52|SHIFTXabs|SHIFTYabs|SHIFTZabs|" ,e$
        ";SHIFT_OFF = G69 ",e$

        ";ROT_ON = G68|AXE|ROT|" ,e$
        ";ROT_OFF = G69" ,e$

        "RTCP_ON = G43.4" ,e$
        "RTCP_OFF = G49" ,e$

        ";TOOL_ON = G43" ,e$
        ";TOOL_OFF = G49 ",e$

        "[DRILL_CYCLE]" ,e$
        #; si on est sur un type CYCLE81 () siemens indiquer la position de la valeur dans le cycle ... pas besoin de definir pour HEID car toujour identique
        "DRILL_ON_CYCLE = YES" ,e$
        "CALL_CYCLE = G81|G83|G73|G74|G84|G82|G85" ,e$
        "SECU_PLANE_ABS = OLD_Z" ,e$
        ";SECU_PLANE_RELATIV = OLD_Z" ,e$
        ";PROF_RELATIV = Z" ,e$
        "PROF_ABS = Z" ,e$
        ";RETRACT_RELATIV = R" ,e$
        "RETRACT_ABS = R",e$
        "AVANCE = F" ,e$
        "PECK = Q X 1" ,e$
        "CYCLE_OFF = G80" ,e$

        "[NOT READ]" ,e$
        #"G0 X50 Y50" ,e$
        #"G0 G28 G91" ,e$

        "[MACRO] (attention pas MACHMOVE avec axes XYZABC)" ,e$

        "{M6}" ,e$
        "G0 G28 Z0" ,e$
        "G0 G28 X-350 Y-363.49 Z0" ,e$
        "G0 G28 X-350 Y-363.49 Z-204 ",e$
        "display_tool" ,e$
        "G0 G28 X-350 Z-204 ",e$
        "G0 G28 X-350 Z0" ,e$

        "{FIN}" ,e$
        subout$ = 0
    ]
fmt "X" 1 angle_autour_X_RUD
fmt "Y" 1 angle_autour_Y_RUD
fmt "Z" 1 angle_autour_Z_RUD
fmt "" 1 cos_angleY
fmt "" 1 tr_x
fmt "" 1 tr_y

fmt 1 m1_RUD
fmt 1 m2_RUD
fmt 1 m3_RUD
fmt 1 m4_RUD
fmt 1 m5_RUD
fmt 1 m6_RUD
fmt 1 m7_RUD
fmt 1 m8_RUD
fmt 1 m9_RUD

fmt 1 m1_RUDA
fmt 1 m2_RUDA
fmt 1 m3_RUDA
fmt 1 m4_RUDA
fmt 1 m5_RUDA
fmt 1 m6_RUDA
fmt 1 m7_RUDA
fmt 1 m8_RUDA
fmt 1 m9_RUDA

fmt 1 m1_RUDB
fmt 1 m2_RUDB
fmt 1 m3_RUDB
fmt 1 m4_RUDB
fmt 1 m5_RUDB
fmt 1 m6_RUDB
fmt 1 m7_RUDB
fmt 1 m8_RUDB
fmt 1 m9_RUDB

fmt 1 Lg_X
fmt 1 Lg_Y
fmt 1 Lg_Z
fmt 1 xplan
fmt 1 yplan
fmt 1 zplan
precal_new_matrice_RUD
    #vois comment le rud a tourner
    if t_wcs_m1$ <> 1 | t_wcs_m5$ <> 1 | t_wcs_m9$ <> 1,
    [
        angle_autour_Y_RUD = asin (t_wcs_m3$)
        cos_angleY = cos (angle_autour_Y_RUD)
            angle_autour_Y_RUD = angle_autour_Y_RUD *-1
            if cos_angleY > 0.005 ,
        [
            #3 angle autour de X
            tr_x = t_wcs_m9$ / cos_angleY
            tr_y = -t_wcs_m6$ / cos_angleY
            angle_autour_X_RUD = atan2 (tr_y,tr_x)

            angle_autour_X_RUD = angle_autour_X_RUD * -1
            #4 angle autour de Z
            tr_x = t_wcs_m1$ / cos_angleY
            tr_y = -t_wcs_m2$ / cos_angleY
            angle_autour_Z_RUD  = atan2 (tr_y,tr_x)
            angle_autour_Z_RUD = angle_autour_Z_RUD * -1
        ]
            else,
        [
            # angle autour de X
            angle_autour_X_RUD  = 0
            # angle autour de Z
            angle_autour_Z_RUD = atan2 (t_wcs_m4$,t_wcs_m5$)
            angle_autour_Z_RUD = angle_autour_Z_RUD * -1

        ]

        #tourne X autour Z :
        m1_RUDA = m2$  * sin(angle_autour_Z_RUD) + m1$  * cos(angle_autour_Z_RUD)
        m2_RUDA = m2$  * cos(angle_autour_Z_RUD) - m1$  * sin(angle_autour_Z_RUD)

        #tourne X autour Y :
        m3_RUDA = m1_RUDA * sin(angle_autour_Y_RUD) + m3$ * cos(angle_autour_Y_RUD)
        m1_RUDB = m1_RUDA * cos(angle_autour_Y_RUD) - m3$  * sin(angle_autour_Y_RUD)

        #tourne X autour X :
        m2_RUDB = m3_RUDA * sin(angle_autour_X_RUD) + m2_RUDA  * cos(angle_autour_X_RUD)
        m3_RUDB = m3_RUDA * cos(angle_autour_X_RUD) - m2_RUDA  * sin(angle_autour_X_RUD)

        #tourne Y autour Z :
        m4_RUDA = m5$  * sin(angle_autour_Z_RUD) + m4$  * cos(angle_autour_Z_RUD)
        m5_RUDA = m5$  * cos(angle_autour_Z_RUD) - m4$  * sin(angle_autour_Z_RUD)

        #tourne Y autour Y :
        m6_RUDA = m4_RUDA * sin(angle_autour_Y_RUD) + m6$ * cos(angle_autour_Y_RUD)
        m4_RUDB = m4_RUDA * cos(angle_autour_Y_RUD) - m6$  * sin(angle_autour_Y_RUD)

        #tourne Y autour X :
        m5_RUDB = m6_RUDA * sin(angle_autour_X_RUD) + m5_RUDA  * cos(angle_autour_X_RUD)
        m6_RUDB = m6_RUDA * cos(angle_autour_X_RUD) - m5_RUDA  * sin(angle_autour_X_RUD)

        #tourne Z autour Z :
        m7_RUDA = m8$  * sin(angle_autour_Z_RUD) + m7$  * cos(angle_autour_Z_RUD)
        m8_RUDA = m8$  * cos(angle_autour_Z_RUD) - m7$  * sin(angle_autour_Z_RUD)

        #tourne Z autour Y :
        m9_RUDA = m7_RUDA * sin(angle_autour_Y_RUD) + m9$ * cos(angle_autour_Y_RUD)
        m7_RUDB = m7_RUDA * cos(angle_autour_Y_RUD) - m9$  * sin(angle_autour_Y_RUD)

        #tourne Z autour X :
        m8_RUDB = m9_RUDA * sin(angle_autour_X_RUD) + m8_RUDA  * cos(angle_autour_X_RUD)
        m9_RUDB = m9_RUDA * cos(angle_autour_X_RUD) - m8_RUDA  * sin(angle_autour_X_RUD)

        Lg_X = sqrt(m1_RUDB^2+m2_RUDB^2+m3_RUDB^2)
        m1$ = m1_RUDB / Lg_X
        m2$ = m2_RUDB / Lg_X
        m3$ = m3_RUDB / Lg_X
        Lg_Y = sqrt(m4_RUDB^2+m5_RUDB^2+m6_RUDB^2)
        m4$ = m4_RUDB / Lg_Y
        m5$ = m5_RUDB / Lg_Y
        m6$ = m6_RUDB / Lg_Y
        Lg_Z = sqrt(m7_RUDB^2+m8_RUDB^2+m9_RUDB^2)
        m7$ = m7_RUDB / Lg_Z
        m8$ = m8_RUDB / Lg_Z
        m9$ = m9_RUDB / Lg_Z
        x1 = toy4$  * sin(angle_autour_Z_RUD) + tox4$ * cos(angle_autour_Z_RUD)
        y1 = toy4$  * cos(angle_autour_Z_RUD) - tox4$ * sin(angle_autour_Z_RUD)

        z1 = x1 * sin(angle_autour_Y_RUD) + toz4$ * cos(angle_autour_Y_RUD)
        xplan = x1 * cos(angle_autour_Y_RUD) - toz4$  * sin(angle_autour_Y_RUD)

        yplan = z1 * sin(angle_autour_X_RUD) + y1 * cos(angle_autour_X_RUD)
        zplan = z1 * cos(angle_autour_X_RUD) - y1 * sin(angle_autour_X_RUD)

        tox4$ = (xplan - t_orgin_x$)
        toy4$ = (yplan - t_orgin_y$)
        toz4$ = (zplan - t_orgin_z$)
    ]

ppost$       # traitement apres post pro pour effacer le fichier OPS et renommer le fichier NC

    if simu = 0,
    [
        sfileops= spathnci$ + snamenci$ + sops      # non du fichier ops
        result = remove (sfileops)          # effacer le fichier ops
        if use_progno = 1, result = remove (snom_numero)        #efface fichier en nom numero
        if use_progno = 1, result = rename (snom_nc, snom_numero)   #renomer fichier NC en nom numero
        if use_progno = 1, result = launch (seditor, snom_numero)   #lancer le blocnote
    ]
    if simu = 1,
    [
        #sdllMachSim = smc_shared_dir$ + sdll
        result = dll(sdllMachSim,spathnc$)
    ]
#endregion

#-----------------------------------------------------
#   DEFINITION DES STRING
#
sext$ : ".nc"

#--------- DEFINITION DES STRING -----------------------
svide : ""           # STRING Vide utilisee pour faire des comparaisons
space : " "       # STRING pour forcer un espace
sdcom   : "("         # STRING de debut de commentaire
sfcom   : ")"     # STRING de fin de commentaire
sg43 : "G43"      # STRING de prise de correction en Z
snomgroupe_op : ""       # STRING du nom du groupe d'operation
snomgroupe_op_old : ""   # STRING de l'ancien nom du groupe d'operation
smachine : ""        # STRING du nom de la machine
spalette : "PALETTE"  # STRING du nom palette
scomentsprog : ""        # STRING du commentaire pour le titre du sous prog
snom_nc : ""         # STRING de stockage du non du NC complet avec chemin et extesion style c:\cfao\prog-cn\TOTO.NC
snom_numero : ""     # STRING de stockage du non du NC sous forme O0123.nc avec chemin et extesion style c:\cfao\prog-cn\ous forme O0123.NC
spoint : "."      # STRING du POINT pour l'extesion (.NC)
stringo : ""         # STRING du O pour le non (O0123) en nom du Numero PRG
seditor : "notepad.exe"   # STRING du non de l'editeur pour les prog en nom du Numero PRG (avec chemenin complet si pas dans Windows)
sfileops : ""        # STRING du nom du fichier OPS
sops : ".ops"     # STRING de l'extention des fichier OPS
sfmax : "FMAX"        # STRING de la vitesse rapide
serreur2 : ""
#--------- DEFINITION DES TABLEAUX DE STRING -----------------------
# erreur
serr0   : "err0"
serr1   : "ERREUR - LA FONCTION Ecriture de l'information CN d'operation DOIT ETRE VALIDE DANS LA DEFINITION D'ARMOIRE"
serr2   : "ERREUR - CE POST PRO NE SUPPORTE Q'UN SEUL AXE ROTATIF - VERIFIEZ LA DEF MACHINE ET LA COMBINAISON D'AXE"
serr3   : "ERREUR - CE POST PRO NE SUPPORTE Q'UNE SEULE COMBINAISON D'AXE PAR PROGRAMME - VERIFIEZ LA COMBINAISON D'AXE DES OPERATIONS"
serr4   : "CORRECTION SUR ARC DETECTEE - Verifiez les entrees/sorties de l'operation "
serreur : ""
fstrsel serr0 erreur serreur 5 -1

#   Mode Absolue ou incremental
sinc00  : "G90"       # Mode Absolue
sinc01  : "G91"       # Mode incremental
sinc02 : ""
sinc_abs : ""
fstrsel sinc00 incremental sinc_abs 3 -1

#   Affectation de cote de correction outil G41 G42
sc00    : "G40"
sc01    : "G41"
sc02    : "G42"
scord : ""
fstrsel  sc00 cc_pos$ scord 3 -1

#   Affectation de G0 e G3 dans sgcode en fonction du GCODE
sg00    : "G0"       # Rapide
sg01    : "G1"       # travail
sg02    : "G2"       # arc horaire
sg03    : "G3"       # arc trigo
sq04    : "G4"       # tempo
sg05    : "G80"          # annulation Cycle Fixes
sgcode : ""

fstrsel  sg00 gcode$ sgcode 6 -1

#   Affectation des plans d'usinage pour
spl00    : "G17"     # plan XY
spl01    : "G19"     # plan YZ
spl02    : "G18"     # plan XZ
spl03 : ""
splcode : ""

fstrsel  spl00 plane$ splcode 4 -1

#   Blocage deblocage 4ieme Axe
sblo0   : ""            # pour pas de blocage ni deblocage
sblo1   : "M10"   # blocage axe A
sblo2   : "M11"   # deblocage axe A
sblo3   : ""            # pour Frein axe A
sbloque : ""

fstrsel sblo0 bloque sbloque 4 -1

#   Blocage deblocage 5ieme Axe
sbloB0   : ""            # pour pas de blocage ni deblocage
sbloB1   : "M68"   # blocage axe B
sbloB2   : "M69"   # deblocage axe B
sbloB3   : ""            # pour Frein axe B
sbloqueB : ""

fstrsel sbloB0 bloque sbloqueB 4 -1

fmt		4 spdlsel_M
fmt    4 spdlon 
#      Rotation broche chauffe
sm200    : "M04"
sm201    : "M05"
sm202    : "M03"

spdlon_chauffe : ""

spdlsel = fsg3(ss$)
#spdlsel = fsg3(ss)+(coolant*3)

fstrsel  sm200 spdlsel spdlon_chauffe 3 -1

#      Rotation broche chauffe
sm00    : "M4"
sm01    : "M5"
sm02    : "M3"

spdlon : ""

spdlsel_M = fsg3(ss$)  # preparation pour le M3
#spdlsel = fsg3(ss)+(coolant*3)

fstrsel  sm00 spdlsel_M spdlon 3 -1


#   Types d'outils
stypT00 : "RIEN"
stypT01 : "FORET A CENTRER"
stypT02 : "FORET A NOYER"
stypT03 : "FORET"
stypT04 : "TARAUD A DROITE"
stypT05 : "TARAUD A GAUCHE"
stypT06 : "ALESOIR"
stypT07 : "BARRE D'ALESAGE"
stypT08 : "FRAISE A LAMER"
stypT09 : "FRAISE A EBAVURER"
stypT10 : "FRAISE 2 TAILLES"
stypT11 : "FRAISE BOULE"
stypT12 : "FRAISE A CHANFREINER"
stypT13 : "TOURTEAU"
stypT14 : "FRAISE 3 TAILLES"
stypT15 : "FRAISE A RAYON"
stypT16 : "FRAISE QUEUE D'ARONDE"
stypT17 : "FRAISE CONIQUE"
stypT18 : "FRAISE SPHERIQUE"
stypT19 : "FRAISE TORIQUE"
stypT20 : "FRAISE FILLET"
stypT21 : "FRAISE AUTRE"
stypT22 : "FRAISE AUTRE"
stypT23 : "FRAISE AUTRE"
stypT24 : "FRAISE AUTRE"
stypT25 : "FRAISE AUTRE"



stypeT : ""
fstrsel stypT00 paramT2 stypeT 26 -1

#   Matiere des outils
smatT0  : "ARS"
smatT1  : "ARS"
smatT2  : "CARBURE"
smatT3  : "CARBURE PLAQUETTES"
smatT4  : "CERAMIQUE"
smatT5  : "BORZON"
smatT6  : "BORZON"
smatT7  : "BORZON"
smatT8  : "BORZON"
smatT9  : "BORZON"
smatT10 : "INCONNU"
smatT : ""
fstrsel smatT0 paramT3 smatT 11 -1

# Table de l'affichage du type de corection

stc0   : "CORRECTION AUCUNE"
stc1   : "CORRECTION ARMOIRE DROITE"
stc2   : "CORRECTION ARMOIRE GAUCHE"
stc3   : "CORRECTION ORDINATEUR DROITE"
stc4   : "CORRECTION ORDINATEUR GAUCHE"
stc5   : "CORRECTION USURE DROITE"
stc6   : "CORRECTION USURE GAUCHE"
stc7   : "CORRECTION USURE INVERSE DROITE"
stc8   : "CORRECTION USURE INVERSE GAUCHE"

stype_comp : ""

fstrsel  stc0 type_comp stype_comp 9 -1


#-----------------------------------------------------
#   Tables de parametres
#
fprmtbl 2    1          # lecture des parametres de surep pour surfacage
        12068  surepl       # surep en Z

fprmtbl 1    2          # lecture des parametres de surep pour contour et 3D
        10010    surep      # surep R
        10068    surepl     # surep Z

fprmtbl 18000   4           # Lecture des Param de def armoire
        18171   write_ops   # Autoriser l'ecriture de l'information CN d'operation
        18458   texte       # Nombre de caracteres pour les commentaires
        18713   sous_prog_type  # type de merge des sous prog (0 apres prog principal 1 avant)
        18705   cor_arc     # compesation sur les arcs autorisee

#------------- Bloc de definition des Questions du post pro -----------------
#   Question 1
#
oui : 1
fq 1 oui "CREER L'ENTETE DU PROGRAMME //progno$//      0 pour NON - 1 pour OUI"

#   Question 2
#
sclient : ""
fq 2 sclient "CLIENT"

#   Question 3
#
srepere : ""
fq 3 srepere "DESIGNATION PIECE"

#   Question 4
#
sindice : ""
fq 4 sindice "INDICE"

#   Question 5
#
numerote : 1
fq 5 numerote "NUMEROTER LES LIGNES DU PROGRAMME ?            0 pour NON - 1 pour OUI"

#   Question 6
#
fq 6 progno$ "Numero de Prog SVP ?"

#   Question 7
#
fmt "Cont" 2 continue
fq 7 continue "Angle A hors limite , continuer ? 1 = non 0 = oui"

#   Question 8
#
fq 8 vtol$    "TOLERANCE CORDALE POUR DEVELOPPE"

#   Question 10
#
fq 10 progno$ "Numero de programme //progno$// existant, ENTREZ UN NOUVEAU NUMERO"

#   Question 11
#
fmt 2 remplace
remplace : 1

fq 11 remplace "Numero de programme //progno$// existant, LE REMPLACER ?      0 pour NON - 1 pour OUI"


snumop : ""
fq 12 snumop "NUMERO OPERATION ?"

stypeop : ""
fq 13 stypeop "TYPE D'OPERATION ?"


fq 14 xdebut "X Approche 5axes continus"


fq 15 ydebut "Y Approche 5axes continus"

fmt 1 prep_out
prep_out : 0
fq 17 prep_out "preparer l'outil suivant ? 0=non 1=oui"


fq 20 mr1$ "Decalage en X pour le G10 P2 L1 ?"
fq 21 mr2$ "Decalage en Y pour le G10 P2 L1 ?"
fq 22 mr3$ "Decalage en Z pour le G10 P2 L1 ?"
fq 23 mr4$ "Decalage en A pour le G10 P2 L1 ?"
fq 24 mr5$ "Decalage en B pour le G10 P2 L1 ?"

fmt "" 4 sous_prog
sous_prog : 0
fq 25 sous_prog "Code M en fin de programme 1 = M99, 0 = M30 )"

fmt 2 useorigine

fq 9 useorigine "Origine 0=non 1=oui 2=G10"

fq 16 numorigine "Numero d'origine pour G10 Px ?"
fmt "P" 5 numorigine
numorigine : 1


pdebug      # pour activer les infos de debug pst

        err_file$ = 4
        fastmode$ = 0
        bug2$ = 60


pinfos      # affichage d'infos

        #*tlchng_aft$, "--------------", e$
        #*workofs$, e$
        #*sub_trnstyp$, e$
        #*sub_trnmthd$, e$
        #*usecandrill$, e$
        #*usecanpeck$, e$
        #*usecanchip$, e$
        #*usecantap$, e$
        #*usecanbore1$, e$
        #*usecanbore2$, e$
        #*usecanmisc1$, e$
        #*usecanmisc2$, e$
        #*sous_prog_type, "----", e$

#---------------------------------------------------------------------------
# reglage ugv (G05P2)


fmt "old mi8" 4 ancien_mi8

pugvoff
            !mi8$, !ancien_mi8
           if ancien_mi8 <> 0, n$, "G5 P0 (DESACTIVER UGV)", e$



pugvon

         !mi8$, !ancien_mi8
         if opcode$ = 3, mi8$ = 0
        if mi8$ <> 0, n$, "G5 P2 (ACTIVER UGV)", e$
        ancien_mi8 = mi8$


#---------------- BLOCS DE PRE TRAITEMENT POST PRO ---------------------------------
#
pprep$      # affectation des variables avant debut traitememt post pro
    rotaxtyp$ = 3

#---------------- BLOCS DE DEF MACHINE ET DEF ARMOIRE ---------------------------------
#

pmachineinfo$    # lecture des parametre de def armoire et def machine

    #"-------------------pmachineinfo$", e$
    #~prmcode$, "=", sparameter$, e$        # pour afficher tous les parametres

    #if prmcode$ = 18171, *prmcode$, "ecriture ops =", sparameter$, e$
    #if prmcode$ = 18458, "nombre de caracteres de commentaire",  sparameter$, e$
    #if prmcode$ = 19958, *prmcode$, "type de composant", "=", sparameter$, e$  # type de composant 5 = axe rotatif
    #if prmcode$ = 17399, *prmcode$, "AXE DE L'AXE ROTATIF", "=", sparameter$, e$   # AXE ROTATIF - +X=1,+Y=2,+Z=3,-X=7,-Y=8,-Z=9
    #if prmcode$ = 17402, *prmcode$, "sens de laxe", "=", sparameter$, e$       # sens de l'axe rotatif 0=trigo 1=horaire
    #if prmcode$ = 17401, *prmcode$, "position 0", "=", sparameter$, e$         # Position angle 0 deg  +X=1,+Y=2,+Z=3,-X=7,-Y=8,-Z=9
    #if prmcode$ = 17398, *prmcode$, "=", sparameter$, e$
    #if prmcode$ = 17201, *prmcode$, "nom de l'element =", sparameter$, e$
    #if prmcode$ = 17696, *prmcode$, "nom de la combinaison =", sparameter$, e$

    if prmcode$ = 17063, fmaxi = rpar(sparameter$, 1)           # avance maxi en G1
    if prmcode$ = 17062, fmini = rpar(sparameter$, 1)           # avance mini en G1



    if prmcode$ >= 18000 & prmcode$ < 19000, result = fprm(18000)   #Lecture de la table de parametre Control Definition

    if prmcode$ = 17012, snom_ini = sparameter$
    smachine = ucase (snom_ini)

    if prmcode$ = 17201,        [               # nom du composant
            if ucase(sparameter$) = spalette, palette = 1       # si c'est une palette, activer la gestion de palette

                        ]

    if prmcode$ = 19958,        [               # type de composant
            type_composant = rpar(sparameter$, 1)
            if type_composant = 5,  [               # si c'est un axe rotatif
            useaxe = 1
            compt_axes_rot  = compt_axes_rot + 1            # compter le nombre d'axes rotatif
                        ]
                        ]

   # if prmcode$ = 17399,    [                   #AXE ROTATIF - +X=1,+Y=2,+Z=3,-X=7,-Y=8,-Z=9
    #        diviseur = rpar(sparameter$, 1)
    #        if diviseur > 3, diviseur = diviseur - 6        #ne garder que x y z
     #               ]

    if prmcode$ = 17402,    [                   # sens de l'axe rotatif 0=trigo 1=horaire
            sens = rpar(sparameter$, 1)
        if sens = 0, sens = 1                   # variable sens pour le post pro
        else, sens = -1
                ]

      if prmcode$ = 17598,      [               # nombre d'outils du changeur de la def machine
        nbroutil = rpar(sparameter$, 1)
                        ]

      if prmcode$ = 17397,      [               # Nom de l'axe rotatif (ABC)
    srot_label = sparameter$
            ]

plireaxes   # Lecture des parametres de la combinaison d'axes uniquement
        #"plireaxes", syncaxis$, e$

    if syncaxis$ <> old_syncaxis, [
    compt_axes_rot = 0
    erreur = 0
        ]


    rd_mch_ent_no$ = syncaxis$      # pour avoir les infos de la conbinaison d'axe utilisee
    #rd_mch_ent_no$ = -2            # forcer la lecture de toute la def machine -1 que la combinaison d'axe -2 que la base machine 0
    #rd_cd$                 # lecture de la def armoire
    rd_md$                  # lecture de la def machine


        result = nwadrs(srot_label, axeB)   # affectation du nom de l'axe rotatif en ABS
        result = nwadrs(srot_label, axeBi)  # affectation du nom de l'axe rotatif en INC
        result = nwadrs(srot_label, old_axeB2)  # affectation du nom de l'axe rotatif pour  retour en butte
    #ptestmachine
    old_syncaxis = syncaxis$

#---------------- BLOCS DE LECTURE DES PARAMETRES ---------------------------------
#

pparameter$  # lecture des parametres d'operation
    #"------------------------------------------------pparameter$", e$
    #~prmcode$, "=", sparameter$, e$                # pour afficher tous les parametres



    if opcode$ <> 19, result = fprm (1)                 # lecture des parametres de surep pour surfacage
    if opcode$ = 19, result = fprm (2)                  # lecture des parametres de surep pour contour et 3D

    if prmcode$ = 20004, paramT1 = rpar(sparameter$, 16)        # lecture des parametres d'outil
    if prmcode$ = 20018, snomgroupe_op = ucase (sparameter$)    # Lecture du nom de groupe d'usinage

    #if prmcode$ = 15166,  "--------------15166--------------", sparameter$, e$
    #if prmcode$ = 15181,  "--------------15181--------------", sparameter$, e$
    #if prmcode$ = 15370,  "--------------15370--------------", sparameter$, e$
    #if prmcode$ = 15239, sparameter$, e$


pwrttparam$  # lecture des parametres d'outils

        #*nbr_combi, "-------------pwrttparam--------", e$
        if syncaxis$ <> old_syncaxis, nbr_combi = nbr_combi + 1
        old_syncaxis = syncaxis$

    #~prmcode$, "=", sparameter$, e$        # pour afficher tous les parametres

           if prmcode$ = 20004, paramT1 = rpar(sparameter$, 16)




#---------------- BLOCS DE TRAITEMENT DES SOUS PROG EN Z ---------------------------------

psub_call_s$       # appel sous prog en Z

    #"--------appel sous prog en Z---------", *sub_sec_no$, e$
        !sub_prg_no$                # mise a jour du numero interne de sous prog en Z
        subprognum = debsousprog + sub_prg_no$  # affectation du numero de sous prog en Z
        nprincipal = n$  + seqinc$      # memo du numero de ligne pour le rappel dans le sous-programme

         # if sub_sec_no$ > 1 | sub_sec_no$ < 1,   [    # call suivant

        #*nprincipal, e$            # affecation du parametre CN pour memo du numero de ligne
        n$, "M98", subprognum, e$       # appel du sous prog

          #  ]


        nprincipal = n$             # memo du numero de ligne pour le prog principal



psub_st_s$    # ecriture de l'entete de sous prog en Z


        !sub_prg_no$                # mise a jour du numero interne de sous prog en Z
        numsubprog = debsousprog + sub_prg_no$  # affectation du numero de sous prog en Z
        nomsubprog = numsubprog                 # affectation du nom de sous prog en Z
        memo_incremental = incremental          # memorisation du mode ABS INC Actuel
        incremental = sub_inc$          # Sous prog en incremental ou absolue


    if incremental = 1, p_casse_modalite    # casser la modalite xyz pour les sous prog en relatif
    p_casse_modalite_avance         # casser la modalite le l'avance pour les sous prog

        if numsprog = 0, omitseq$ = 1       # pas du numero de ligne pour les sous prog

        if texte <> 0,   [          # entete avec commentaires


                if scomentsprog <> svide, *numsubprog, sdcom, spaces$ = 0, scomentsprog, sfcom, spaces$ = old_spaces, e$
                 else, *numsubprog, e$

                                ]


        else,       [               # entete sans commentaires
                *numsubprog,  e$
                    ]

        n$, *sinc_abs, e$                 # ecrire si sous prog en ABS ou INC
    gcode$ = 5      # pour forcer l'ecriture de code G du premier bloc du sous prog
        !gcode$

psub_end_s$    # fin sous prog en Z


        incremental = 0         # rappel du mode INC ABS precedent
        n$, *sinc_abs, e$

        #n, "M99", "P#100", e$              # fermeture de sous prog
        n$, "M99", e$                   # fermeture de sous prog
    space, e$                   # sauter une ligne
       # omitseq$ = old_omitseq
        n$ = nprincipal                 # recuperation du numero de ligne pour prog principal

#-------------------------BLOCS DE TRAITEMENT DES SOUS PROG EN TRANSFORMER ---------------------------


pmirroir    # pour usinage transformer en mirroir

protation    # pour usinage transformer en rotation
        "protation"
pechelle    # pour usinage transformer en echelle


ptranslation    # pour usinage transformer en translation

        #n$, "-------------------------------------", *sub_trnmthd$, e$


    if sub_trnmthd$ = 2, [              # translation en coordonnees

         n$, "(translate  coordinate)", e$


        prapid$



                        ]



    if sub_trnmthd$ = 1, [              # translation de l'origine du plan uniquement

        n$, "(translate tool plane origine only)", e$


        memo_incremental = incremental
        incremental = 0

            decX = sub_trnsx$
            decY = sub_trnsy$
            decZ = sub_trnsz$

            if decX <> 0 | decY <> 0 | decZ <> 0, [
            if decalage = 1, panulldecalageg52              # annuler les decalages d'origine
            decX = sub_trnsx$
            decY = sub_trnsy$
            decZ = sub_trnsz$
            n$, sinc_abs, "G52", *decX, *decY, *decZ, e$            # ecriture des valeur de decalage d'origine
            decalage = 1                            # memo de mise en place de decalage pour l'annuler
        p_casse_modalite                # pour forcer le rappel des coordonees apres changement d'origine
        prapid$
                             ]

            incremental= memo_incremental
                n$, sinc_abs, e$
                    ]

    if sub_trnmthd$ = 0, [              # translation du plan d'usinage uniquement

        n$, "(translate tool plane ----> must use new workofs$)", e$

       # poriusi
        #p_casse_modalite               # pour forcer le rappel des coordonees apres changement d'origine
        prapid$

        ]

psub_call_mm$     # appel sous prog en transformation pour outils multiples


        #"appel sous prog en transformation pour outils multiples", e


        !main_prg_no$                    # mise a jour du numero interne de sous prog en transformation pour outils multiples
        subprognum = debsousprog + main_prg_no$ +100   # affectation du numero de sous prog

        if sub_trnstyp$ = 0, pmirroir       # si on fait du mirroir
        if sub_trnstyp$ = 1, protation      # si on fait de la rotation
        if sub_trnstyp$ = 2, pechelle       # si on fait de l'echelle
        if sub_trnstyp$ = 3, ptranslation       # si on fait de la translation aller avant dans bloc ecriture decalage orignie

        nprincipal = n$  + seqinc$      # memo du numero de ligne pour le rappel dans le sous-programme

        #*nprincipal, e$            # affecation du parametre CN pour memo du numero de ligne
        n$, "M98", subprognum, e$       # appel du sous prog

        nprincipal = n$             # memo du numero de ligne pour le prog principal


      # n, "(PASSE ", sub_sec_no, "SUR ", sub_totl_no, ")", e


          #  "Subprogram number ", sub_op_id, e
          #  "Actual operation ID", sub_grp_id, e
          #  "Transform/non-transform indicator", sub_ref_id, e
          #  "Iteration counter", sub_sec_no, e
          #  "Total number of instances", sub_totl_no, e






psub_call_m$   # appel sous prog en transformation pour outil unique

       # "appel sous prog en transformation pour outil unique", e$

        #main_prg_no$, sub_prg_no$, sub_ref_id$, sub_op_id$, sub_grp_id$, sub_trns_id$, sub_sec_no$, sub_totl_no$, sub_chn_no$, sub_inc$, e
        #*main_prg_no$, e


        !main_prg_no$               # mise a jour du numero interne de sous prog en transformation pour outils multiples
        subprognum = debsousprog + main_prg_no$ +100   # affectation du numero de sous prog


        if sub_trnstyp$ = 0, pmirroir       # si on fait du mirroir
        if sub_trnstyp$ = 1, protation      # si on fait de la rotation
        if sub_trnstyp$ = 2, pechelle       # si on fait de l'echelle
        if sub_trnstyp$ = 3, ptranslation   # si on fait de la translation aller avant dans bloc ecriture decalage orignie

        nprincipal = n$  + seqinc$      # memo du numero de ligne pour le rappel dans le sous-programme

        #*nprincipal, e$            # affecation du parametre CN pour memo du numero de ligne
        n$, "M98", subprognum, e$       # appel du sous prog

        nprincipal = n$             # memo du numero de ligne pour le prog principal


      # n, "(PASSE ", sub_sec_no, "SUR ", sub_totl_no, ")", e


          #  "Subprogram number ", sub_op_id, e
          #  "Actual operation ID", sub_grp_id, e
          #  "Transform/non-transform indicator", sub_ref_id, e
          #  "Iteration counter", sub_sec_no, e
          #  "Total number of instances", sub_totl_no, e


psub_end_m_r$    # bloc system non explique dans doc des PST (a voir)

        #"-------------------------------------------", "psub_end_m_r$", "******",*incremental, e$ e$


psub_st_m$    # entete sous prog en transformation


        !main_prg_no$                   # mise a jour du numero interne de sous prog en transformation pour outils multiples
        numsubprog = debsousprog + main_prg_no$ +100    # affectation du numero de sous prog
        nomsubprog = numsubprog                 # affectation du nom de sous prog en Z
        memo_incremental = incremental          # memorisation du mode ABS INC Actuel
        incremental = sub_inc$          # Sous prog en incremental ou absolue


    if incremental = 1, p_casse_modalite    # casser la modalite pour les sous prog en relatif
    p_casse_modalite_avance         # casser la modalite le l'avance pour les sous prog

        if numsprog = 0, omitseq$ = 1       # pas du numero de ligne pour les sous prog
        if texte <> 0,   [          # entete avec commentaires


                if scomentsprog <> svide, *numsubprog, sdcom, spaces$ = 0, scomentsprog, sfcom, spaces$ = old_spaces, e$
                 else, *numsubprog, e$

                ]


        else,       [               # entete sans commentaires
                *numsubprog,  e$
                    ]

        n$, *sinc_abs, e$           # ecrire si sous prog en ABS ou INC
    gcode$ = 5              # pour forcer l'ecriture de code G du premier bloc du sous prog
        !gcode$

             #sub_op_id, sub_prg_no, e


psub_end_m$   # fin sous prog en transformation


        incremental = 0         # rappel du mode INC ABS precedent
        n$, *sinc_abs, e$

        #n, "M99", "P#100", e$              # fermeture de sous prog
        n$, "M99", e$                   # fermeture de sous prog
    space, e$                   # sauter une ligne
        omitseq$ = old_omitseq
        n$ = nprincipal                 # recuperation du numero de ligne pour prog principal




#------------------- GESTION DES COMMENTAIRES ---------------------------------------
#
pcomment$   # Gestion des commentaires dans le prog

        if entete = 0,  pcomment2   # commentaires des usinages
        else,       pcomment3   # commentaires d'entete de prog

pcomment_end$   # post traitement des commentaires

        if entete = 1, comm_cnt$ = old_comm_cnt         # pour pouvoir relire les commentaires apres appel de comment dans pheader


scommentaire : ""

contient_string : 0

pcomment2       #Affichage des commentaire des usinages

    #contient_string = scan(sous_chaine,scomm$)
    #if st_str_ix$, scomm$ = brksps(14,scomm$)

    scomm$ = ucase (scomm$)                             # focer en majuscules
    scomentsprog = svide                                # mise a zero du commentaire de sous prog

    if texte <> 0, [

        if numcoment = 0, omitseq$ = 1                      # si pas de numero de bloc pour commentaires enlever les numeros de bloc
            if debut = 1, [
        # if gcode$ = 1051, n$, sdcom, spaces$ = 0, scomm$, sfcom, spaces$ = old_spaces, e$         # Nom Machine
        if gcode$ = 1053, n$, sdcom, spaces$ = 0, scomm$, sfcom, spaces$ = old_spaces, e$               # Nom du Groupe Machine
        if gcode$ = 1052, n$, sdcom, spaces$ = 0, scomm$, sfcom, spaces$ = old_spaces, e$               # Commentaire de groupe Machine
        #if gcode$ = 1054, n$, sdcom, spaces$ = 0, scomm$, sfcom, spaces$ = old_spaces, e$              # Descripteur de fichier
                    ]
        if gcode$ = 1005, n$, sdcom, spaces$ = 0, scomm$, sfcom, spaces$ = old_spaces, e$               # Usinage commentaire - en commentaire
        if gcode$ = 1007, n$, sdcom, spaces$ = 0, scomm$, sfcom, spaces$ = old_spaces               # Entree Manuelle - en commentaire avec le mouvement sans e$
        if gcode$ = 1008, n$, sdcom, spaces$ = 0, scomm$, sfcom, spaces$ = old_spaces, e$               # Commentaire d'operation
        if gcode$ = 1008, scomentsprog = scomm$

        omitseq$ = old_omitseq                          # rappel des numero de bloc

                ]

    if gcode$ = 1006, n$, scomm$, e$                        # Usinage commentaire - en code
    if gcode$ = 1026, scomm$                            # Entree Manuelle - en code avec le mouvement sans e$

pcomment3   # Affichage des commentaires d'entete de prog

        if gcode$ = 1054, [
            scomm$ = ucase (scomm$)
            n$, sdcom, spaces$ = 0, scomm$, sfcom, spaces$ = old_spaces, e$                 # Descripteur de fichier

                ]
        old_comm_cnt = comm_cnt$



pnomgroupe  # Affichage du nom du groupe d'operation

    if snomgroupe_op <> svide & texte <> 0 & snomgroupe_op <> snomgroupe_op_old & info_groupe = 1, [

        if numcoment = 0, omitseq$ = 1                      # si pas de numero de bloc pour commentaires enlever les numeros de bloc
        n$, sdcom, spaces$ = 0, "*", snomgroupe_op, "*", sfcom, spaces$ = old_spaces, e$                # nom du groupe d'operation
#       space, e$

        omitseq$ = old_omitseq                          # rappel des numero de bloc
            snomgroupe_op_old = snomgroupe_op                   # memo du nom du groupe d'operation
                        ]

fmt 1 old_xform_opid
pnumop      # numerotation des operations post-processees
    !old_op_id , !old_xform_opid
    if op_id$ <> old_op_id | old_xform_opid <> xform_op_id$,
    [
        numop = numop + 1
        n$, "(", *numop, ")", e$
    ]

#------------------- 5 Axes continue en fonctions 5 Axes ---------------------------------------
#
paxeB   # Affichage de l'axe A



        nbrtour = int (axeB / 360) * sens

    if incremental = 0, axeB, !axeBi
    if incremental = 1, !axeB, axeBi

        old_axeB = axeB

praz_axe  # cycle de deroulement de l'axe A ou B si buttee

        n$, sdcom,"Arriver en bute axe tournant",sfcom,e$
        gcode$ = 0
        n$, sgcode, "G91", smodedeg, sdegageZ, e$  # degager en Z
        n$, "G90", e$
        # vx = u$ - x$
        # vy = v$ - y$
        # vz = w$ - z$
       # if diviseur = 1, axeB1 = atan2(vy,vz) # on tourne autour de x
       # if diviseur = 2, axeB1 = atan2(vx,vz) # on tourne autour de Y


       #axeB = axeB1 * sens
        axeB1_dep = axeB1

        n$, sdcom,"RAZ axe tournant",sfcom,e$

        n$, *old_axeB2, e$
        gcode$ = 1
        n$, sgcode, old_z, e$
        n$, sdcom,"Reprise usinage",sfcom,e$
        #delta_axeB1 = 0
        old_axeB1 = old_axeB2

        #"voir dans praz =",*delta_axeB1, *old_axeB1,*axeB1, *axeB, *axeB1_dep, e$
        pcalculpmx



pcalculpmx  # Calacul de l'axe A x y z
    #   "voir en 1 =",*delta_axeB1, *old_axeB1,*axeB1, *axeB, *axeB1_dep, e$

    vx = u$ - x$
    vy = v$ - y$
    vz = w$ - z$

    if diviseur = 1, axeB1 = atan2(vy,vz) # on tourne autour de x
    if diviseur = 2, axeB1 = atan2(vx,vz) # on tourne autour de Y
    #"voir en 2 =",*delta_axeB1, *old_axeB1,*axeB1, *axeB, *axeB1_dep, e$
    if axeB1 >  180, axeB2 = 360 - axeB1
    if axeB1 <= 180, axeB2 = axeB1 * -1

    delta_axeB1 = axeB1 - old_axeB1
    #"voir en 3 =",*delta_axeB1, *old_axeB1,*axeB1, *axeB, *axeB1_dep, e$

    if delta_axeB1 >  180, delta_axeB1 = delta_axeB1 - 360 # on calcul le nombre de tour et retranche 360e par tour en moins
    if delta_axeB1 <  -180,delta_axeB1 = delta_axeB1 + 360 # on calcul le nombre de tour et ajoute 360e par tour en plus

    axeB1_dep = axeB1_dep + delta_axeB1
    old_axeB1 = axeB1
    axeB = axeB1_dep * sens
    #"voir en 4 =",*delta_axeB1, *old_axeB1,*axeB1, *axeB, *axeB1_dep, e$

    if diviseur = 1, [          # on tourne autour de x
    xabs = x$
    yabs = z$*sin(axeB2) + y$*cos(axeB2)
    zabs = z$*cos(axeB2) - y$*sin(axeB2)
            ]

    if diviseur = 2, [          # on tourne autour de Y
    xabs = z$*sin(axeB2) + x$*cos(axeB2)
    yabs = y$
    zabs = z$*cos(axeB2) - x$*sin(axeB2)
            ]





#------------------- 4 Axes continue en substitution d'axe ---------------------------------------
#

plinarc  # Convertir les G2 G3 en G1

        linarc$ = 1
        if tolquestion <> 1, q8
        tolquestion = 1


p_Apos  # calcul de l'axe A en substitution

        @x$, @y$

        if diviseur = 1, axeB = (y$ * 360 / (pi$ * rotdia$)) * sens   # pour 4eme axe autour de X (substituer Y)
        if diviseur = 2, axeB = (x$ * 360 / (pi$ * rotdia$)) * sens   # pour 4eme axe autour de Y (substituer X)

        p_zdev          # calcul du Z en substitution

p_zdev  # calcul du Z en substitution

    @z$, @rotdia$
    zabs  = z$ +(rotdia$ /2)    # Z pour continue substitutuion en ABS


p_Apos_affiche  # affichage de l'angle au chg outil nul pour continue





           if useaxe <> 0, [

            @old_axeB, @axeB
            epsi = old_axeB - axeB
            epsi = abs(epsi)
                #"---------p_Apos_affiche-------", ee

           if epsi <> 0,    [
            pdegage4axes, e$
         bloque = 2
         if use_bloque = 0, bloque = 0
            n$, *sbloque, e$
            n$, *sbloqueB, e$
            if incremental = 0, n$, sgcode, sinc_abs, poriusi, *axeB, !axeBi, *sbloque, e$, n$, *sbloqueB, e$ #
            else, n$, sgcode, sinc_abs, !axeB, *axeBi, *sbloque, e$, n$, *sbloqueB, e$ #poriusi,
                ]
            ]

        old_axeB = axeB








#   Gestion de la valeur de l'avance pour l'afficher
#
pfr     # avance travail


        @cc_computer$, @cc_pos$                 # mise e jour des variables

        if cc_pos$ = 0  & cc_computer$ = 0,   type_comp = 0 #AUCUNE

        if cc_pos$ = 2  & cc_computer$ = 0,   type_comp = 1 #ARMOIRE DROITE
        if cc_pos$ = 1  & cc_computer$ = 0,   type_comp = 2 #ARMOIRE GAUCHE

        if cc_pos$ = 0  & cc_computer$ = 42,  type_comp = 3 #ORDINATEUR DROITE
        if cc_pos$ = 0  & cc_computer$ = 41,  type_comp = 4 #ORDINATEUR GAUCHE

    if cc_pos$ = 2  & cc_computer$ = 42,  type_comp = 5 #USURE DROITE
    if cc_pos$ = 1  & cc_computer$ = 41,  type_comp = 6 #USURE GAUCHE

    if cc_pos$ = 1  & cc_computer$ = 42,  type_comp = 7 #USURE INVERSE DROITE
    if cc_pos$ = 2  & cc_computer$ = 41,  type_comp = 8 #USURE INVERSE GAUCHE



    if gcode$ <> 0, [   # Avance travail
        @fr_pos$
        @fmini
        @fmaxi
        avance = fr_pos$    # affectation de l'avance

        if avance_arc <> 0, [   # acivation de l'avance optimisee sur arc  (option PST)

        # arc horaire correction a gauche
        if gcode$ = 2 & (type_comp = 6 | type_comp = 4 | type_comp = 8), if (arcrad$ - tldia$/2) > 0, avance =(arcrad$*fr_pos$)/(arcrad$ - tldia$/2)
        # arc trigo correction a gauche
        if gcode$ = 3 & (type_comp = 6 | type_comp = 4 | type_comp = 8), avance =(arcrad$*fr_pos$)/(tldia$/2 + arcrad$)

        # arc horaire correction a droite
        if gcode$ = 2 & (type_comp = 5 | type_comp = 3 | type_comp = 7), if (arcrad$ - tldia$/2) > 0, avance =(arcrad$*fr_pos$)/(arcrad$ -tldia$/2)
        # arc trigo correction a droite
        if gcode$ = 3 & (type_comp = 5 | type_comp = 3 | type_comp = 7), avance =(arcrad$*fr_pos$)/(tldia$/2 +arcrad$)

        # control en foction de l'operation (par mi10$)
        # que ralentir (mi10$ = 1)
        if avance > fr_pos$ & mi10$ = 1, avance = fr_pos$
        # que accelerer (mi10$ = 2)
        if avance < fr_pos$ & mi10$ = 2, avance = fr_pos$
        # pas d'optimisation (mi10$ = 0)
        if mi10$ = 0, avance = fr_pos$

        # test des avances en fonction des limites de la def machine
        if avance < fmini, avance = fmini
        if avance > fmaxi, avance = fmaxi

                ]

            avance
    result = newfs (4, avance)  # affectation en format modal
            ]

    if gcode$ = 0,  [   # Avance rapide

            ]

pavanceperce    # Avance en percage

    p_casse_modalite_avance             # pour forcer l'affichage de l'avance
    pfr                     # Affichage de l'avance


#   Gestion de la correction outil et du numero de corecteur
#
pcorh       # Correction de longueur

        if correcteur_H <> old_correcteur_H, sg43, *correcteur_H
        old_correcteur_H = correcteur_H



pcord_old


    if opcode$ < 16 | opcode$ > 18, [

    if cc$ = 140, cc$ = 40

         if cc$ <> 0, scord
                    ]

        else, [
        if cend$ = 1 & cc_pos$ <> 0, cc$ = 40

         if cc$ <> 0, scord

        cc$ = 0


        ]

#   Gestion de la correction outil et du numero de corecteur
#
pcord

        #

    if opcode$ < 16 | opcode$ > 18, [   # pour 3 axes

    if cc$ = 140, cc$ = 40
        #" on y est" , e$
        @cc$,@cc_pos$
         if cc$ <> 0, *scord
                    ]

        else, [                 # pour 4 axes pmx
        if cend$ = 1 & cc_pos$ <> 0, cc$ = 40

         if cc$ <> 0, scord

        cc$ = 0

        ]

   # if cc$ <> 0, if gcode$ = 2 | gcode$ =3, if cor_arc = 0, erreur = 4, perreur

pcancelcc$  # Annulation de correction de rayon



#   Gestion lubrif -0 arret -1 axe outil -2 buse -3 les deux separe du M3 M4
#
fmt 1 typ_lub
fmt 1 lub
fmt 1 old_coolant

plubrifon
    !coolant$
	if coolant$ = 0 | cantext$ = 0, typ_lub = 0
	if coolant$ = 1 | cantext$ = 50, typ_lub = 1
	if coolant$ = 2 | cantext$ = 52, typ_lub = 2
	if coolant$ = 3 | cantext$ = 54, typ_lub = 3	
    if lub = 0 |(old_coolant <> typ_lub),	
	[
		if typ_lub = 0, "M9" ,e$
		if typ_lub = 1, "M8" ,e$
		if typ_lub = 2, "M51" ,e$
		if typ_lub = 3, "M8 M51", e$

	]
    lub = 1
	old_coolant = typ_lub



plubrifoff
        
    !coolant$
    if coolant$ = 0 , n$, "M9", e$
    if coolant$ = 1 , n$, "M9", e$
    if coolant$ = 2 , n$, "M9", e$
    if coolant$ = 3 , n$, "9" ,e$ 
    lub = 0
	typ_lub = 0
	old_coolant = 0



#   Initialisation de la machine
#
pintcn  #   Initialisation de la machine

        gcode$ = 0
        n$, *sgcode, *sinc_abs, "G40", "G80", e$    # init CN
#        space, e$                          # Sauter une ligne


#   Gestion du degagement de la machine au debut de prog
#
pdegage_debut       #   Gestion du degagement de la machine au debut de prog

    if deg_debut <> 0, [

    memo_gcode = gcode$         # memo du gcode precedent
    gcode$ = 0              # Degagement en Rapide
        @incremental
        memo_incremental = incremental      # memo du mode actuel G90 G91
        incremental = inc_degage        # passage en mode 90 ou 90 pour degagement


    if deg_debut >= 1, [            # si degager en Z
        if sdegageZ <> svide, n$, sgcode, "G90", smodedeg, sdegageZ, e$  # degager en Z
                ]

    if deg_debut = 2 | deg_debut = 4, [             # si degager en Z et X
    if sdegageX <> svide, n$, sgcode, "G90", smodedeg, sdegageY, e$  # degager en X
            ]
    if deg_debut = 3 | deg_debut = 4, [             # si degager en Z et Y
    if sdegageX <> svide, n$, sgcode, "G90", smodedeg, sdegageX, e$  # degager en Y
            ]
    if deg_debut = 5, [             # si degager en Z etXY
    if sdegageX <> svide & sdegageY <> svide, n$, sgcode, "G90", smodedeg, sdegageX, sdegageY, e$    # degager en X Y
            ]


    gcode$ = memo_gcode         # rappel du gcode precedent
        incremental = memo_incremental                                                                  # Rappel du mode actuel G90 G91
       # @incremental                                                                                   # mise a jour
       # if sdegageZ <> svide | sdegageX <> svide | sdegageY <> svide, n$, sinc_abs, e$
       # !incremental

            ]



#   Gestion du degagement de la machine avant appel outil
#
pdegage     #   Gestion du degagement de la machine avant appel outil

    if deg_outil <> 0, [

    memo_gcode = gcode$         # memo du gcode precedent
    gcode$ = 0              # Degagement en Rapide
        @incremental
        memo_incremental = incremental      # memo du mode actuel G90 G91
        incremental = inc_degage        # passage en mode 90 ou 90 pour degagement

    if deg_outil >= 1, [            # si degager en Z
        if sdegageZ <> svide, n$, sgcode, "G90", smodedeg, sdegageZ, e$  # degager en Z
                ]

    if deg_outil = 2 | deg_outil = 4, [             # si degager en Z et X
    if sdegageX <> svide, n$, sgcode, "G90", smodedeg, sdegageX, e$  # degager en X
            ]
    if deg_outil = 3 | deg_outil = 4, [             # si degager en Z et Y
    if sdegageX <> svide, n$, sgcode, "G90", smodedeg, sdegageY, e$  # degager en Y
            ]
    if deg_outil = 5, [             # si degager en Z etXY
    if sdegageX <> svide & sdegageY <> svide, n$, sgcode, e$, n$, "G90", smodedeg, sdegageX, sdegageY, e$, n$, "G40", e$    # degager en X Y  n$, "G49", e$,
            ]

    gcode$ = memo_gcode         # rappel du gcode precedent
        incremental = memo_incremental                                                                  # Rappel du mode actuel G90 G91
        #@incremental                                                                                   # mise a jour
        #if sdegageZ <> svide | sdegageX <> svide | sdegageY <> svide, n$, sinc_abs, e$
        #!incremental

            ]

#   Gestion du degagement de la machine fin de prog
#
pdegage_fin #   Gestion du degagement de la machine fin de prog

   if deg_fin <> 0, [
    memo_gcode = gcode$         # memo du gcode precedent
    gcode$ = 0              # Degagement en Rapide
        @incremental                # mise a jour
        memo_incremental = incremental          # memo du mode actuel G90 G91
        incremental = inc_degage        # passage en mode 90 ou 90 pour degagement


    if deg_fin >= 1 & deg_fin < 6, [                # si degager en Z
        if sdegageZ <> svide, n$, sgcode, "G90", smodedeg, sdegageZ, e$  # degager en Z
                ]

    if deg_fin = 2 | deg_fin = 4, [             # si degager en Z et X
    if sdegageX <> svide, n$, sgcode, "G90", smodedeg, sdegageY, e$  # degager en X
            ]
    if deg_fin = 3 | deg_fin = 4 | deg_fin = 6, [               # si degager en Z et Y
    if sdegageY <> svide, n$, sgcode, "G90", smodedeg, sdegageX, e$  # degager en Y
            ]
    if deg_fin = 5, [               # si degager en Z etXY
    if sdegageX <> svide & sdegageY <> svide, n$, sgcode, "G90", smodedeg, sdegageX, sdegageY, e$, n$, "G40", e$    # degager en X Y n$, "G49", e$,
            ]

    gcode$ = memo_gcode         # rappel du gcode precedent
        incremental = memo_incremental                                                                  # Rappel du mode actuel G90 G91
        @incremental                                                                                    # mise a jour
        if sdegageZ <> svide | sdegageX <> svide | sdegageY <> svide, n$, sinc_abs, e$
        !incremental
                ]



#   Gestion du degagement de la machine avant rotation plateau
#
pdegage4axes        #   Gestion du degagement de la machine avant rotation plateau

   if deg_4axe <> 0, [

    if mi1$ = 0, [

    memo_gcode = gcode$         # memo du gcode precedent
    gcode$ = 0              # Degagement en Rapide
        @incremental
        memo_incremental = incremental          # memo du mode actuel G90 G91
        incremental = inc_degage            # passage en mode 90 ou 90 pour degagement


    p_casse_modalite            # casser la modalite pour rappel des XYZ

    if deg_4axe >= 1, [             # si degager en Z
        if sdegageZ <> svide, n$, "G49", e$, n$, sgcode, "G90", smodedeg, sdegageZ, e$  # degager en Z
                ]

    if deg_4axe = 2 | deg_4axe = 4, [               # si degager en Z et X
    if sdegageX <> svide, n$, sgcode, "G90", smodedeg, sdegageX, e$  # degager en X
            ]
    if deg_4axe = 3 | deg_4axe = 4, [               # si degager en Z et Y
    if sdegageY <> svide, n$, sgcode, "G90", smodedeg, sdegageY, e$  # degager en Y
            ]
    if deg_4axe = 5, [              # si degager en Z etXY
    if sdegageX <> svide & sdegageY <> svide, n$, sgcode, "G90", smodedeg, sdegageX, sdegageY, e$    # degager en X Y
            ]

    gcode$ = memo_gcode         # rappel du gcode precedent
        incremental = memo_incremental          # Rappel du mode actuel G90 G91
        @incremental                # mise a jour
        n$, sinc_abs, e$
            ]

                ]


#   Gestion des Origine d'usinages G54 a G59
#
poriusi         # gestion origine
    if useorigine <> 2,
        [
        if use_origine = 1,  # on ecrit que G54.1 Pxx
        [
        if workofs$ <=0, workofs$ = 1        #  afficher de G54 meme si non remplis
        originebis = workofs$              # origine
        if originebis <> old_origine,
            [                # si changement d'origine
            p_casse_modalite                # pour forcer le rappel des coordonees apres changement d'origine
            *originebis               # pour origine > 59
            old_origine = originebis               # memo de l'origine affichee
            ]
        ]
        else,
        [
        if workofs$ >=0,# ne pas afficher de G54 si le decalage < 0
             [
             #if workofs$ <= 54, workofs$ = 54
             origine = 54 + workofs$                 # origine de  54 a 59
             originebis = origine - 59               # origine > 59
             if origine <> old_origine,
                 [                # si changement d'origine
                 p_casse_modalite                # pour forcer le rappel des coordonees apres changement d'origine
                 if origine <=59, *origine           # pour origine de 54 a 59
                 else, *originebis               # pour origine > 59
                 old_origine = origine               # memo de l'origine affichee
                ]
            ]
        ]
    ]
    else,
    [
    origine = numorigine + 53
    @numorigine
    if origine <> old_origine,
                 [                # si changement d'origine
                 p_casse_modalite                # pour forcer le rappel des coordonees apres changement d'origine
                 *origine           # pour origine de 54 a 59
                                # memo de l'origine affichee
                ]

    ]
    old_origine = origine
#   Gestion des G54 a 59 pour changement outil mul
#
poriusinul
    if useorigine <> 2,
        [

        if use_origine = 1,  # on ecrit que G54.1 Pxx
        [
        if workofs$ >=0, workofs$ = 1        #  afficher de G54 meme si non remplis
        originebis = workofs$              # origine
        if originebis <> old_origine,
            [                # si changement d'origine
            p_casse_modalite                # pour forcer le rappel des coordonees apres changement d'origine
            *originebis               # pour origine > 59
            old_origine = originebis               # memo de l'origine affichee
            ]
        ]
        else,
        [

    if workofs$ >=0, [                  # ne pas afficher de G54 si le decalage < 0
    #if workofs$ <= 54, workofs$ = 54
    origine = 54 + workofs$                 # origine de  54 a 59
    originebis = origine - 59               # origine > 59
        if sub_trnmthd$ = 1, old_origine = origine
        if origine <> old_origine, [                # si changement d'origine
        p_casse_modalite                # pour forcer le rappel des coordonees apres changement d'origine

        if origine <=59, *origine           # pour origine de 54 a 59
            else, *originebis               # pour origine > 59

        old_origine = origine               # memo de l'origine affichee

        ]
         ]
        ]
    ]
    else,
    [
    #"voir" , *old_origine, *origine, e$
    origine = numorigine + 53
    @numorigine
    if origine <> old_origine,
                 [                # si changement d'origine
                 p_casse_modalite                # pour forcer le rappel des coordonees apres changement d'origine
                 *origine           # pour origine de 54 a 59
                 old_origine = origine               # memo de l'origine affichee
                ]

    ]
#   Gestion des gammes de vitesse de broche
#
pgamme

    @ssa
    #if ssa < 1500, "M38"
    #else, "M39"


#----------------- BLOCS D'AFFICHAGES DES ENTETES ET APPEL OUTLIS -----------------


pentete     # QUESTION POUR L'ENTETE
            #q2, q3, q4, q12, q13

        sclient = ucase (sclient)
        srepere = ucase (srepere)
        smcname$ = ucase (smcname$)
        sindice = ucase (sindice)
        snumop = ucase (snumop)
        stypeop = ucase (stypeop)

        spaces$ = 0

        #   "(", 35, " LAUK ", 35,")", e$
         #  "(", 35, " CLIENT ", sclient, " ", 35,")", e$
        #   "(", 35, " DESIGNATION PIECE ", srepere, " ", 35,")", e$
        #   "(", 35, " REFERENCE ", smcname$, " ", 35,")", e$
        #   "(", 35, " INDICE DU PLAN ", sindice, " ", 35,")", e$
        #   "(", 35, " MACHINE ", snamepst$, " ", 35,")", e$
        #   "(", 35, " NUMERO OPERATION ", snumop, " ", 35,")", e$
        #   "(", 35, " TYPE D'OPERATION ", stypeop, " ", 35,")", e$
        #   "(", 35, " NUMERO FICHIER PROGRAMME ", 35, ")", e$
        #   "(", 35, " DATE DE CREATION ", date$, " ", 35,")", e$
        #   "(", 35, " DATE DE MODIFICATION ", 35, ")", e$
         #  "(", 35, " OUTIL POCHE ", 35, ")", e$
         #  "(", 35, " NUMERO CASIER OUTILLAGE ", 35,")", e$
        #   "(", 35, " REFERENCE OUTILLAGE ", 35, ") ", e$

    spaces$ = 1


subprg$    : yes$
mergesub$  : 0
extprg$ : 1

pheader$     # ENTETE DE PROGRAMME

    rd_md$                      # lire la definition machine
    psimulation
    texte = 255
    q17
    #useaxe = 0
    rd_mch_ent_no$ = -1         # pour lire les info de toute la machine
    rd_md$                      # lire la definition machine
    rd_mch_ent_no$ = 0          # pour lire les info de base de la machine
    rd_md$                      # lire la definition machine
    compt_axes_rot = 0          # pour remetre a zero le nombre d'axe rotatif avant la lecture de la conbinasin d'axe
    if simu = 1,
    [
        subout$ = 1
        snom = spathnc$ + snamenc$ + sextnc$
        *snom,e$
        subout$ = 0
    ]

    if omitseq$ = 1, numcoment = 0      # si pas de numero de bloc ne pas numeroter les commentaires
        debut = 1                           # flag pour debut de prog
        old_omitseq = omitseq$          # memo du mode de numerotation de ligne
        old_spaces = spaces$            # memo du nombre d'espaces
        old_linarc = linarc$                # memo de la decomposition des arcs

        smcpath$ = ucase (smcpath$)     # convertir en MAJUSCULES les noms
        smcname$ = ucase (smcname$)
        smcext$ = ucase(smcext$)
        snamepst$ = ucase (snamepst$)
        snamenc$ = ucase (snamenc$)
        smachine = ucase (smachine)

       # while progno$ = 0, q6           # verifier le numero de prog
        if use_progno = 1, [            # si on sauve sous la forme 00123.NC
        pnom_nc             # Generation des noms du fichier NC
        ptest_nom           # Tester si prog O0123.NC existe
                ]

         prognosav = progno$            # memo du numero de prog
         debsousprog = progno$      # memo du num de premier sous prog

        # q5                  # nureroter les lignes ?
        if numerote=0, omitseq$ = 1

        pentete


    #---------------------- Debut de prog -----------------------

        #"%", e$
        if texte <> 0,      [                           # Si la machine accepte les commentaires

        if numcoment = 0, omitseq$ = 1                      # si pas de numero de bloc pour commentaires enlever les numeros de bloc

           # progno$, sdcom, spaces$ = 0,  snamenc$, sfcom, spaces$ = old_spaces, e$                 # Nom du prog iso
            "O",no_spc$, snamenc$ , sdcom, spaces$ = 0,  smcname$, sfcom, spaces$ = old_spaces, e$
            if entete = 1, pentete                          # faire l'entete de prog

           n$, sdcom, spaces$ = 0, "POST-PRO FICAM", sfcom, spaces$ = old_spaces, e$                   # FICAM
           n$, sdcom, spaces$ = 0, "MACHINE - ",smachine, sfcom, spaces$ = old_spaces, e$              # nom de la machine
           n$, sdcom, spaces$ = 0, "DESSIN MASTERCAM - ", smcname$, sfcom, spaces$ = old_spaces, e$            # nom du fichier MCX
           n$, sdcom, spaces$ = 0, "PROG-CN DU ", date$, " A ", time$, sfcom, spaces$ = old_spaces, e$     # date du traitement post-pro
                              # Sauter une ligne
           if tooltable$ <> 0, n$, sdcom, spaces$ = 0, "LISTE DES OUTILS UTILISES", sfcom, spaces$ = old_spaces, e$    # pour liste des outils

        omitseq$ = old_omitseq                          # rappel des numero de bloc
                ]

        else, progno$, e$                               # Si la machine n'accepte pas les commentaires, ne mettre que le numero

        #q14, q15


psof0$       # DEBUT DE PROGRAMME pour T=0

       psof$
pinfoutil       # infos sur l'outil

        if info_outil = 1,  [                           # si affichage des infos outil
                strtool$ = ucase (strtool$)             # convertir en MAJUSCULES le nom outil

            if numcoment = 0, omitseq$ = 1              # si pas de numero de bloc pour commentaires enlever les numeros de bloc

            if strtool$ <> svide,   n$, sdcom, spaces$ = 0, paramT1, space, strtool$, space, stypeT, space,paramT5, space, paramT16, ptypeBoutT, pangleT, space, smatT, sfcom, spaces$ = old_spaces, e$
            else,           n$, sdcom, spaces$ = 0, paramT1, space, stypeT, space,paramT5, space, paramT16, ptypeBoutT, pangleT, space, smatT, sfcom, spaces$ = old_spaces, e$

            omitseq$ = old_omitseq                  # rappel des numero de bloc
                    ]

pappel_outil    # ecriture de l'appel outil pour psof et ptlchg



    pnomgroupe                                  # Nom du groupe d'operation
    comment$                                    # commentaires d'operation
             !tool_typ$

    if tool_typ$ = 5, ss$ = (abs(ss$))*-1       # si taraud e gauche inverser le sens de broche






    paffiche_outil

        if texte <> 0, pinfoutil
        if texte <> 0, paramcomp                        # afficher le type de compensation
        if texte <> 0, paramsurep                       # afficher les surepaisseur
        n$, plubrifon, e$
        if mi7$, n$ , *mi7$, e$
            plane$ = 0                  # pour focer le rappel G17 G18 G19
        cc_pos$ = 0
    #n$, "M01", e$
    if mi6$ = 1, n$, "M39", e$


    if useorigine > 0, n$, *scord, "G80", poriusi, *sinc_abs, *splcode, e$
        else, n$, *scord, "G80", *sinc_abs, *splcode, e$

    n$, *ssa, pgamme, *spdlon_chauffe, e$       # vitesse de broche
                               # lubrif
        #n$, "M01", e$
        space, e$                              # Sauter une ligne
        debut = 0
        gcode$ = 5
        !gcode$

poutil  # appel outil sans outil suivant

    outil = t$


    if omitseq$ = 1, num, "M6", *outil, e$
    if omitseq$ = 0, n$,  "M6", *outil, e$

    #if omitseq$ = 1, num, *outil, *correcteur_D, "M6", e$
    #if omitseq$ = 0, n$,  *outil, *correcteur_D, "M6", e$

poutil_suivant  # appel outil avec outil suivant

        if outil_apres = 0, [       # flag pour la position d'appel de l'outil suivant
            outil = t$
            outil_suivant = next_tool$
            n$,  *outil_suivant, e$
                        ]

paffiche_outil  # affichage du numero d'outil

#     Debut de programme pour outil

        if bldnxtool$ = 1,
                        [
                        if op_id$ <> last_op_id & t$ <> next_tool$, poutil , [if prep_out = 1,poutil_suivant]  # appel outil avec outil suivant juste apres
                        if op_id$ <> last_op_id & t$ = next_tool$, poutil  # appel outil sans outil suivant
                        if op_id$ = last_op_id & t$ <> first_tool$, poutil , [if prep_out = 1,poutil_suivant]  # appel outil avec outil suivant juste apres
                        if op_id$ = last_op_id & t$ = first_tool$, poutil       # appel outil sans outil suivant
                        ]


        if bldnxtool$ = 0,   poutil                     # appel outil sans outil suivant

pattribut_correct   # attribut des correcteur fixe pour D et H


                    if D_et_H_cor,correcteur_D = D_et_H_cor, correcteur_H = D_et_H_cor
                    else,
                        [
                            correcteur_D = tloffno$ #+ nbroutil
                            correcteur_H = tlngno$
                        #if cc_pos$ > 0  & cc_computer$ = 0,   correcteur_D = 5   #ARMOIRE
                        #else, correcteur_D = 1  # usure ou ordi
                        #correcteur_H = 1
                        ]


paffiche_outil_suivant  # affichage de l'outil suivant ou non

    outil = t$
    outil_suivant = next_tool$

        if bldnxtool$ = 1 & outil_apres = 1,   [

                if op_id$ <> last_op_id & t$ <> next_tool$, outil_suivant   # appel outil suivant
                if op_id$ = last_op_id & t$ <> first_tool$, outil_suivant   # appel outil  suivant

                    ]

pcasse_outil  # test casse outil
               if test_outil > 0,
                [
                if casse_outil <> 0, n$, "G65 P9220", e$
                ]
#     Debut de programme pour outil
#
psof$        # DEBUT DE PROGRAMME
    if simu = 1,precal_new_matrice_RUD
        q9
        debutpmx = 1

        " ", e$
        " ",e$
        if entete = 1, pentete                          # faire l'entete de prog
        pinfos
        memo_t = t$
        useaxe = 1
        if tooltable$ <> 0 & texte <> 0, [      # Si liste des outils et textes supportes
        if numcoment = 0, omitseq$ = 1  # Si pas de numero sur les commentaires
         omitseq$ = old_omitseq
                        ]

        gcode$ = 0
        plane$ = 3                  # pour focer le rappel G17 G18 G19
        old_origine = -9999             # pour forcer l'affichage du G54 au chg outil
        old_correcteur_H = -99999           # pour forcer l'appel du G43
        incremental = 0                 # Travail en Absolue
#       pintcn                      # Initialisation de la machine
        incremental = 2                 # pour re forcer l'affichage du mode Absolue
        !incremental
        incremental = 0
        if opcode$ = 16, percage5x = 1
        else, percage5x = 0
        pdegage_debut                           # Degagement de la Machine au debut de prog
        casse_outil = mi3$

        #if mr1$ = 0, q20
        #if mr2$ = 0, q21
        #if mr3$ = 0, q22
        n$,"G69",sinc_abs, e$
        if useorigine = 2,
        [
        q16
        n$,"G10 L2", *numorigine , mr1$, mr2$,mr3$,mr4$, mr5$ , e$
        ]
        #n$, "M133", e$
        n$, "G94", e$


#   space, e$                   # sauter une ligne
         pattribut_correct

        pappel_outil                        # APPEL OUTIL
         pnumop                      # compteur d'operation
        old_op_id = op_id$
        !old_op_id
        if mi4$ <> 0, n$ ,"M50", e$ , soufflage = 1
        else,  soufflage = 0

        n$, "G61.1", e$
        n$, "G94", e$
        #n$, "G5.4 Q1", e$
        #n$, "G5.1 Q1 R5", e$
        #x$ = xr$
        #y$ = yr$
        #z$ = zr$
        pcalxyz
       # pugvon
        pplacement_cn                   # AFFICHAGE DES MOUVEMENTS MACHINE
        if nextop$ = 11 & opcode$ <> 16, pcalAB, xabs = x$, yabs = y$, zabs = z$, pmx_debut
        #pugvon
        old_xform_opid = xform_op_id$
      old_tox4 = tox4$
      old_toy4 = toy4$
      old_toz4 = toz4$


pplacement_cn   # AFFICHAGE DES MOUVEMENTS MACHINE
        chgtl = 1
        @rotaxis$                   # mise a jour du type de substitution d'axe

        if nextop$ = 11,    [           # si  4 axes avec fonction 5 axes

        gcode$ = 0                      # Force le gcode a 0 pour faire un G0 apres



        axeB = 0
        axeB1_dep = 0
        old_axeB1 = 0
        debutpmx = 1                # flag pour faire l'appel outil
        cc$ = cc_pos$ + 40
                        ]


    if nextop$ <> 11,           [   # utilisation en positionne ou substitution
        gcode$ = 0                              # Force le gcode a 0 pour faire un G0 apres
       if rotaxis$ = 0,    [           # 3 axes +  positionne
        prot1                                   # calcul axes A et B rotation plateau
        old_axeB =  -99999                          # pour forcer l'affichage



        if percage5x <> 1,  prot2 , pcalxyz                                    # affichage de l'angle au chg outil # on ne bouge pas si percage 5x car on le fera dans le percage
        else,
        [
             pmx_pre_5x
            zabs = z2
        ]

        if useorigine > 0, n$, *sgcode, poriusi, sinc_abs, *xabs, *yabs, paffiche_outil_suivant, e$ #ssa, pgamme, *spdlon, e$ #
             else, n$, *sgcode, sinc_abs, *xabs, *yabs, paffiche_outil_suivant, e$
        n$,  sg43, *zabs, *correcteur_H,*correcteur_D, e$
        #if opcode$ <> 3, n$, "G121 R8", e$


                        ]

   if rotaxis$ <> 0,    [           # utilisation en substitution

        plinarc
                p_Apos
                bloque = 2
                if use_bloque = 0, bloque = 0
        if rotaxis$ = 1,  xabs = 0                  # diviseur tourne autour de Y (X sbstitue)
        if rotaxis$ = 2,  yabs = 0                  # diviseur tourne autour de X (Y sbstitue)

        #n$, "M01", e$
        if useorigine > 0, n$, *sgcode, poriusi, sinc_abs, *sbloque, *axeB, e$ #
                 else, n$, *sgcode, sinc_abs, *sbloque, *axeB, e$
        n$, sgcode, sinc_abs, *xabs, *yabs, paffiche_outil_suivant, e$ # ssa, pgamme, *spdlon, e$
        n$, sg43, *zabs, *correcteur_H,*correcteur_D, e$

        n$, *ssa, pgamme, *spdlon_chauffe, e$       # vitesse de broche

                        ]

    p_modal                                 # affectation en format modal
        !x$, !y$, !z$, !xabs, !yabs, !zabs, !Xinc, !Yinc, !Zinc, !axeB, !axeBi  # mise e jour des positions affichees

                            ]






   old_correcteur_H = correcteur_H  # memeo du correcteur de longeur
   old_ss = ss$             # memo de la vitesse de broche
   old_op_id = op_id$           # memo du numero d'operation
   old_rotaxis = rotaxis$       # memo du type de substitution
   old_x = xabs             # memo X Y Z
   old_y = yabs
   old_z = zabs


  c_mmlt$           # truc qui doit servire pour usinage transforme
  c_msng$


        if casse_outil <> 0, casse_outil = mi3$


ptlchg0$     # CHANGEMENT D'OUTIL NUL
    if simu = 1,precal_new_matrice_RUD
                if soufflage = 1 & mi4$ = 0, n$, "M9", e$, soufflage = 0
                #"voir x y z= ", *x$," ", *y$," ", *z$," ", e$
                pattribut_correct
                #"voir = ", debutpmx , *op_id$, *old_op_id,  e$
                gcode$ = 0
                if debutpmx = 0 & op_id$ <> old_op_id, # on viens de fair du 5 axes continue
                    [
                    old_correcteur_H = 9999
                    !old_correcteur_H
                    debutpmx = 1
                    n$, "G40", e$
                    n$, srtcpoff, e$
                    pdegage4axes        # Degagement machine avant la rotation
                    if nextop$ = 11 & opcode$ <> 16,
                        [
                         axeB = 0
                         axeC = 0
                         Nb_tour = 0
                         n$, sgcode, axeB, axeC, e$
                         old_axeB = axeB         # memo de la position de l'axe A affiche
                         old_axeC = axeC         # memo de la position de l'axe A affiche
                         @old_axeB, @old_axeC
                        ]
                ]
                else, if nextop$ = 11 & opcode$ <> 16 & op_id$ <> old_op_id, pdegage4axes, n$, splaninc_off ,e$


                pnumop                      # compteur d'operation
                if subout$ = 0, omitseq$ = old_omitseq
                memo_incremental = incremental              # memo du mode ABS INC actuel
                if subout$ = 0, incremental = 0         # pour forcer le mode Absolue
                @rotaxis$, @old_rotaxis             # mise a jour
                linarc$ = old_linarc                    # pour activer les G2 G3
                typcycle = 0                    # variable mise a 1 lors des percage pour afficher l'intitule du cycle
                pnomgroupe                  # Nom du groupe d'operation
                comment$                    # commentaires d'operation
                if texte <> 0, paramcomp            # afficher le type de compensation
                if texte <> 0, paramsurep           # afficher les surepaisseur
                if tool_typ$ = 5, ss$ = (abs(ss$))*-1       # si tataud e gauche inverser le sens de broche
                if ss$ <> old_ss, n$, ssa, pgamme, *spdlon_chauffe, e$  # si changement de vitesse de broche l'afficher
                if opcode$ = 16, percage5x = 1
                else, percage5x = 0


            if nextop$ = 11 & percage5x = 0 ,
                            [       # si  4 axes avec fonction 5 axes
                                if op_id$ <> old_op_id,
                                    [
                                    old_axeB1 = 0
                                    axeB1_dep = 0.
                                    cc$ = cc_pos$ + 40
                                   n$, poriusinul, "e$          # affichage de l'origine d'usinage"
#CNC<<ORIGINAL>>                                   n$, poriusinul, "e$          # affichage de l'origine d'usinage
#CNC<<MSG-ERREUR(2530)>> Les guillemets de la chaine ne correspondent pas
                                    ]
                                 else,
                                    [
                                    gcode$ = 0
                                    pmx$
                                 #"voir les base dans ptlchg0$", *x$, " ", *y$," ", *z$, " ", *u$, " ", *v$, " ", *w$, vx, vy, vz, e$
                                 ]


                            ]
        else,
                [     # utilisation en positionne ou substitution
                if percage5x = 1,
                                [
                                n$,splaninc_off, e$
                                pdegage4axes        # Degagement machine avant la rotation de l'axe A
                                n$, poriusinul, e$          # affichage de l'origine d'usinage
                                pmx_pre_5x
                                zabs = z2
                                n$, *sgcode, sinc_abs, *xabs, *yabs, e$ #ssa, pgamme, *spdlon, e$
                                n$,  *zabs, plubrifon, e$
                                if mi7$, n$ , *mi7$, e$
                                ]
                else,
                                [
                                if useorigine <> 0, poriusinul, e$
                                x$ = nextx$
                                y$ = nexty$
                                z$ = nextz$
                                pcalxyz
                                if rotaxis$ = 0,
                                        [              # 3 axes + diviser en positionne
                                        prot1                   # calcul rotation plateau
                                        prot3
                                        if op_id$ = old_op_id,
                                                    [
                                                    pcalxyz
                                                    n$, sgcode, sinc_abs, xabs, yabs, zabs, e$

                                                    ]
                                        ]
                                ]
                ]

        if rotaxis$ <> 0 & old_rotaxis = 0,
                    [      # si on passe de positionne a continue
                    plinarc                             # Convertir les G2 G3 en G1
                    p_Apos                              # calcul de l'axe A en substitution
                    if rotaxis$ = 1,  xabs = 0                  # diviseur tourne autour de Y (X sbstitue)
                    if rotaxis$ = 2,  yabs = 0                  # diviseur tourne autour de X (Y sbstitue)
                    p_Apos_affiche                          # affichage de l'angle au chg outil nul pour continue
                    n$, sgcode, sinc_abs, xabs, yabs, !Xinc, !Yinc, e$ #poriusinul,
                    n$, sgcode, sinc_abs, sg43, zabs, *correcteur_H,*correcteur_D, !Zinc, e$
                    p_modal                                 # affectation en format modal
                    !x$, !y$, !z$, !xabs, !yabs, !zabs, !Xinc, !Yinc, !Zinc, !axeB, !axeBi  # mise e jour des positions affichees
                    old_correcteur_H = correcteur_H                    # memo du correcteur de longeur
                     ]
        if rotaxis$ <> 0 & old_rotaxis <> 0,
                    [      # si on passe de positionne a continue
                    plinarc                             # Convertir les G2 G3 en G1
                    p_Apos
                    p_Apos                              # calcul de l'axe A en substitution
                    if rotaxis$ = 1,  xabs = 0                  # diviseur tourne autour de Y (X sbstitue)
                    if rotaxis$ = 2,  yabs = 0                  # diviseur tourne autour de X (Y sbstitue)
                    p_Apos_affiche                          # affichage de l'angle au chg outil nul pour continue
                    ]





   incremental = memo_incremental   # rappel du mode incremental ou absolue precedent
   old_ss = ss$             # memo de la vitesse de broche

   old_op_id = op_id$           # memo du numero d'operation
    old_xform_opid = xform_op_id$
   !old_op_id
   old_rotaxis = rotaxis$       # memo du type de substitution
   old_x = xabs             # memo X Y Z
   old_y = yabs
   old_z = zabs
   chgtl = 0
   old_tox4 = tox4$
   old_toy4 = toy4$
   old_toz4 = toz4$

   c_mmlt$              # Appel sous prog multi outils
   c_msng$              # Appel sous prog mono outil

   if casse_outil <> 0, casse_outil = mi3$


ptlchg0_end$

        #"--------------- fin ptlchg0_end$", e$


panulldecalageg52

        memo_incremental = incremental
        incremental = 0

        decX = 0
        decY = 0
        decZ =0

            n$, sinc_abs, "G52", *decX, *decY, *decZ, e$

        decalage = 0
        incremental = memo_incremental


fmt "" 4 sav_ss

ptlchg$      # CHANGEMENT D'OUTIL
    if simu = 1,precal_new_matrice_RUD
            if soufflage = 1,  n$, "M9", e$, soufflage = 0

            pattribut_correct
            if debutpmx = 0,
                [
                    n$, "G40", e$
                    n$, srtcpoff, e$  # on viens de fair du 5 axes continue
                    pdegage4axes        # Degagement machine avant la rotation
                         axeB = 0
                         axeC = 0
                         Nb_tour = 0
                         n$, sgcode, axeB, axeC, e$
                         old_axeB = axeB         # memo de la position de l'axe A affiche
                         old_axeC = axeC         # memo de la position de l'axe A affiche
                         @old_axeB, @old_axeC
                    ]
          debutpmx = 1


            plubrifoff                  # arret lubriff
            # n$, "G120", e$
            sav_ss = ss$
            ss$ = 0
            n$, *spdlon, e$ # arret broche
            ss$ = sav_ss
    n$, splaninc_off, e$
    pugvoff
    if decalage = 1, panulldecalageg52      # annuler les decalages d'origine
    pinfos
    if nbrtour <> 0,    [           # pour remise a zero du diviseur
        old_axeB = 0
        axeB = 0
        nbrtour = 0
                ]

    p_casse_modalite_avance             # pour rappel de l'avance sur le premier G1

    plane$ = 3                  # pour focer le rappel G17 G18 G19
    !plane$

    memo_incremental = incremental          # memo du mode incremental
        incremental = 2                 # pour re forcer l'affichage du mode Absolue
    !incremental
    incremental = 0                 # pour forcer le mode Absolue

    old_origine = -9999             # pour forcer l'affichage du G54 au chg outil
    old_correcteur_H = -99999           # pour forcer l'appel du G43
    linarc$ = old_linarc                    # pour activer les G2 G3
    typcycle = 0                    # variable mise a 1 lors des percage pour afficher l'intitule du cycle
    pdegage                             # Degagement de la Machine
    if casse_outil > 0, pcasse_outil
    if opcode$ = 16, percage5x = 1
        else, percage5x = 0
#   space, e$                   # Sauter une ligne
        casse_outil = mi3$
        pappel_outil                        # APPEL OUTIL
        pnumop                      # compteur d'operation
        old_op_id = op_id$
        old_xform_opid = xform_op_id$
        !old_op_id


      # n$, "M01", e$

        if mi4$ <> 0, n$ ,"M50", e$ , soufflage = 1
        else,  soufflage = 0
       # n$, "G5.4 Q1", e$, n$, "G5.1 Q1 R5", e$

       n$, "G61.1", e$
       n$, "G94", e$

        #x$ = nextx$
        #y$ = nexty$
        #z$ = nextz$
        pcalxyz
        pplacement_cn                   # AFFICHAGE DES MOUVEMENTS MACHINE
        incremental = memo_incremental          # pour revenir au mode precedent

        if nextop$ = 11 & opcode$ <> 16,pcalAB, xabs = x$, yabs = y$, zabs = z$, pmx_debut

       casse_outil = mi3$
        old_op_id = op_id$
        !old_op_id
        pugvon

      old_tox4 = tox4$
      old_toy4 = toy4$
      old_toz4 = toz4$





peof0$

           peof$

pdecharge_outil     # Dechargement de l'outil en broche

    #if t$ <> memo_t, [
    #   outil = memo_t
    #   n$, "M6", *outil, e$
    #       ]

    if t$ <> 0, [
        outil = 0
        n$, "M6", *outil, e$
            ]

peof$
        #"voir debutpmx", *debutpmx ,e$
        if debutpmx = 0, n$, srtcpoff, e$  # on viens de fair du 5 axes continue

    pugvoff
    plubrifoff                  # Arret lubriff
    n$, "M5", e$                   # Arret broche
    n$, "G49", e$
    if decalage = 1, panulldecalageg52      # Annuler les decalages d'origine
        gcode$ = 0                      # Force le gcode a 0 pour faire un G0 apres
        incremental = 2                 # pour re forcer l'affichage du mode Absolue
        !incremental
        incremental = 0                 # pour forcer le mode Absolue
    #pdecharge_outil                    # Dechargement de l'outil en broche
    n$, splaninc_off, e$
    pdegage_fin                 # Degagement de la machine fin de prog

        if useaxe <> 0 & old_axeB <> 0 | old_axeC <> 0,
         [      # Remise a 0 de l'axe A si pas a Zero
        axeB = 0                # A = 0
        axeC = 0                # A = 0

            bloque = 2          # deblocage des freins
            if use_bloque = 0, bloque = 0
            n$, *sbloque, e$
            n$, *sbloqueB, e$
            if mi2$ = 0, bloque = 1         # preparer le blocage de l'axe A
            if use_bloque = 0, bloque = 0
            n$, sgcode, sinc_abs, *axeB, *axeC, e$ #poriusi,
            n$, *sbloque, e$     # bloquer l'axe A                   # affichage de l'angle
            n$, *sbloqueB, e$
                ]


    plane$ = 3                  # pour focer le rappel G17 G18 G19
#   !plane$
    plane$ = 0

    casse_outil = mi3$
        old_op_id = op_id$
        !old_op_id


    comment$                    # commentaires d'operation
    pcasse_outil

    #n$, "M01", e$
    #n$, "M6 T20", e$
    #n$, "M140", e$
    #if palette = 1, n$, "M98", "P1", e$  #
    #n$, "", e$
    #n$, "", e$
    #n$, "", e$
    n$, "G0 G90 G53 A0 C0", e$
    n$, "P1005 M98", e$
    q25
    if sous_prog = 1, n$, "M99", e$                   # fin de prog et rembobine au debut
    else, n$, "M30", e$                   # fin de prog et rembobine au debut

#   space, e$                   # Sauter une ligne

    #subout$ = 0                 # Ecriture dan le NC
    #mergeext$                      # Merge les sous prog
    mergeaux$                   # merge les sous prog en Z
    #mergesub$                   # merge les sous prog en transform

    #clearext$                  # Effacer les sous prog
    #clearsub$
    clearaux$

   # "%", e$                     # fin de fichier


#----------------CORPS DU CODE ISO G1 G2 G3 G0 -------------------------
pcalxyz  # calcul des x y et z
            xabs = y$ * sin(tourne) + x$ * cos(tourne)
            yabs = y$ * cos(tourne) - x$ * sin(tourne)
            zabs = z$



plrapid     # Ligne en rapide
            #x$=xnci$
            #y$=ynci$
            #z$=znci$
       if percage5x <> 1 ,pcalxyz

       if nextccomp$ = 2 | nextccomp$ = 3, n$, correcteur_D, e$
           if cc_pos$ <> 0 & nextop$ > 0, n$, correcteur_D, e$
           n$, `sgcode, sinc_abs, pcorh, pxyz, e$
           #n$, spdlon, e$


pdwl_spd$

	
	if tempo <> 0 ,
	[
	"G4", tempo,e$ 
	]
	
	
	
	

pltravail    # Ligne en travail
		
	

        pcalxyz
       if nextccomp$ = 2 | nextccomp$ = 3, n$, correcteur_D, e$
           if cc_pos$ <> 0, n$, correcteur_D, e$
	
    if cc$ = 41 | cc$ = 42, n$, *sgcode, sinc_abs, pcord, correcteur_D, pcorh, pxyz, *pfr, ssa, spdlon, plubrifon,!tempo ,e$ 
        else,           n$,  `sgcode, sinc_abs, pcord, pcorh, pxyz, *pfr, ssa, spdlon, plubrifon,!tempo ,e$ 
         #n$, spdlon, e$


prapid$      # Ligne en rapide
            !x$, !y$, !z$
            #x$=xnci$
            #y$=ynci$
            z$=znci$
        #"voir dans prapid$ ", *x$," ", *y$," ", *z$, " ", *xnci$, " ", *ynci$, " ", *znci$,  e$
        if gcode$ = 0, plrapid
        else, pltravail



pzrapid$     # Ligne Z en rapide
            !x$, !y$, !z$
            x$=xnci$
            y$=ynci$
            #z$=znci$
        #"voir dans prapid$ ", *x$," ", *y$," ", *z$, " ", *xnci$, " ", *ynci$, " ", *znci$,  e$
        if gcode$ = 0, plrapid
        else, pltravail



plin$        # Ligne travail
        !x$, !y$, !z$

    if gcode$ = 0, plrapid
        else, pltravail

pz$      # z en avance TRAVAIL
        #"------PZ----", e$
        !x$, !y$, !z$

    if gcode$ = 0, plrapid
        else, pltravail

p_modal     # affectation en format modal X Y Z A garde profondeur ABS ET INC
        #"p_modal"

            result = newfs (2, xabs)
            result = newfs (11, Xinc)
            result = newfs (2, yabs)
            result = newfs (11, Yinc)
            result = newfs (2, zabs)
            result = newfs (11, Zinc)

            result = newfs (2, axeB)
            result = newfs (11, axeBi)

            result = newfs (2, profabs)
            result = newfs (2, profi)
            result = newfs (2, gardeabs)
            result = newfs (2, gardei)


pcir$        # Circulaire
            p_modal     #affectation en format modal
            pcalxyz
             n$, spdlon, e$
            #"----------------", *arctype$,"---------------", e$
           if arctype$ >= 5, pcir_r, e$    # en R
           else, pcir_ij, e$           # en IJ



p_casse_modalite_avance # casser la modalite de l'avance

            result = newfs (5, avance)

p_casse_modalite    # pour casser la modalite de Xabs et Xinc Yabs et Yinc Zabs et Zinc

            p_casse_modalite_X
            p_casse_modalite_Y
            p_casse_modalite_Z
            p_casse_modalite_A


p_casse_modalite_X  # pour casser la modalite de Xabs et Xinc

            result = newfs (3, xabs)
            result = newfs (12, Xinc)

p_casse_modalite_Y  # pour casser la modalite de Yabs et Yinc

            result = newfs (3, yabs)
            result = newfs (12, Yinc)


p_casse_modalite_Z  # pour casser la modalite de Zabs et Zinc

            result = newfs (3, zabs)
            result = newfs (12, Zinc)

p_casse_modalite_A  # pour casser la modalite de Zabs et Zinc

            result = newfs (3, axeB)
            result = newfs (12, axeBi)


p_casse_modalite_perce  # pour casser la modalite de profabs et profi gardeabs gardei

            result = newfs (3, profabs)
            result = newfs (3, profi)

            result = newfs (3, gardeabs)
            result = newfs (3, gardei)


pcir_r      # Circulaire G2 G3 G17 G18 G19 en R

        @plane$
        if arctype$ = 5, rayon = arcrad$            # pour Rayon
        if arctype$ = 6 & abs(sweep$) < 180, rayon = arcrad$    # pour Rayon signe
        if arctype$ = 6 & abs(sweep$) >=180, rayon = -arcrad$   # pour Rayon signe


        if plane$ = 0, p_casse_modalite_X, p_casse_modalite_Y
        if plane$ = 2, p_casse_modalite_X, p_casse_modalite_Z
        if plane$ = 1, p_casse_modalite_Y, p_casse_modalite_Z

        if plane$ = 0, n$, splcode, sinc_abs, *sgcode, pcord, pxyz, rayon, pfr   # plan XY
        if plane$ = 2, n$, splcode, sinc_abs, *sgcode, pcord, pxyz, rayon, pfr   # plan XZ
        if plane$ = 1, n$, splcode, sinc_abs, *sgcode, pcord, pxyz, rayon, pfr   # plan YZ

pcir_ij     # Circulaire G2 G3 G17 G18 G19 en IJ

        @plane$
        if plane$ = 0, p_casse_modalite_X, p_casse_modalite_Y
        if plane$ = 2, p_casse_modalite_X, p_casse_modalite_Z
        if plane$ = 1, p_casse_modalite_Y, p_casse_modalite_Z

        if plane$ = 0, n$, splcode, sinc_abs, *sgcode, pcord, pxyz, pijk, pfr
        if plane$ = 2, n$, splcode, sinc_abs, *sgcode, pcord, pxyz, pijk, pfr
        if plane$ = 1, n$, splcode, sinc_abs, *sgcode, pcord, pxyz, pijk, pfr



pxyz        # ecriture des x, y, z en abs ou incremental pour corp ISO

    pxyz_new
    p_modal     # affectation en format modal

        !x$, !y$, !z$   # mise a jour xyz

        old_x = xabs    # memo des anciennes positions
        old_y = yabs
        old_z = zabs


pxyz_new    # ecriture des positions X Y Z et A pour substitution

    if rotaxis$ = 0,    [    # XYZ CLASIQUE 3 axes (+ positionne)

        if incremental = 0, xabs, yabs, zabs, !Xinc, !Yinc, !Zinc
        else,           !xabs, !yabs, !zabs, Xinc, Yinc, Zinc

                ]

    if rotaxis$ <> 0, [    # SUBSTITUTION
            p_Apos                              # Calcul de l'axe A
        if rotaxis$ = 1,  xabs = 0                  # diviseur tourne autour de Y (X sbstitue)
        if rotaxis$ = 2,  yabs = 0                  # diviseur tourne autour de X (Y sbstitue)

            if incremental = 0,     xabs, yabs, axeB, zabs, !Xinc, !Yinc, !axeBi, !Zinc
            else,           !xabs, !yabs, !axeB, !zabs, Xinc, Yinc, axeBi, Zinc

        old_axeB  = axeB                            # memo de l'axe A
        nbrtour = int (axeB / 360)                      # calcul du nombre de tours
            ]





pijk        # ecriture des IJK pour G90 G91


        !i$, !j$, !k$


        if arctype$ = 1, [   # pour centre en absolue en G90

            iabs = j$*sin(tourne) + i$*cos(tourne)
            jabs = j$*cos(tourne) - i$*sin(tourne)
            kabs = k$


    iinc = i$ - prv_x$
    jinc = j$ - prv_y$
    kinc = k$ - prv_z$
            ]

        else,       [     # pour centre en relatif en G90
            iabs = j$*sin(tourne) + i$*cos(tourne)
            jabs = j$*cos(tourne) - i$*sin(tourne)
            kabs = k$
            iinc = i$
            jinc = j$
            kinc = k$
            ]

        if incremental = 0 & plane$ = 0, *iabs, *jabs, !iinc, !jinc, !kinc
        if incremental = 0 & plane$ = 2, *iabs, *kabs, !iinc, !jinc, !kinc
        if incremental = 0 & plane$ = 1, *jabs, *kabs, !iinc, !jinc, !kinc

        if incremental = 1 & plane$ = 0, !iabs, !jabs, *iinc, *jinc, !kinc
        if incremental = 1 & plane$ = 2, !iabs, !kabs, *iinc, !jinc, *kinc
        if incremental = 1 & plane$ = 1, !jabs, !kabs, !iinc, *jinc, *kinc



#-------------------------------------------------------------------------
#------------------- 5 Axes positionne ---------------------------------------
#
# #CNC<<DEPLACEMENT>>
 #CNC<<DEPLACEMENT>>
#CNC<<MSG-ERREUR(2573)>> Le commentaire ne doit pas etre avec le type d'entete, Commentaremonte d'une ligne
#[STARTBIN]

# MSG for CNC Software => PP from Ficam office french Mastercam dealer only for custumer FICAM ! +33 (0)2 37 26 28 10 e.dauviliers@ficam.com call me before extract_bin
prot0$  #   Tool plan view matrix du gcode 1014


prot$






pcalangleb  # sortie des solutions angle pour C

            axeC = (atan2(m1$,m3$))
            "voir axeC solution 1 =", *axeC, e$
            axeC = (atan2(-m1$,m3$))
            "voir axeC solution 2 =", *axeC, e$
            axeC = (atan2(m1$,-m3$))
            "voir axeC solution 3 =", *axeC, e$
            axeC = (atan2(-m1$,-m3$))
            "voir axeC solution 4 =", *axeC, e$
            axeC = (atan2(m3$,m1$))
            "voir axeC solution 5 =", *axeC, e$
            axeC = (atan2(-m3$,m1$))
            "voir axeC solution 6 =", *axeC, e$
            axeC = (atan2(m3$,-m1$))
            "voir axeC solution 7 =", *axeC, e$
            axeC = (atan2(-m3$,-m1$))


fmt "Base_a=" 1 base_a
fmt "Base_b=" 1 base_b
fmt "Base_c=" 1 base_c



pcalangle  # sortie des solutions angle pour C
            base_a = m7$   # a remplacer pour touver angle voulu
            base_b = m8$
            base_c = m9$


            axeC = (atan2(base_a,base_b))
            "voir axeC solution 1 =", *axeC, e$
            axeC = (atan2(-base_a,base_b))
            "voir axeC solution 2 =", *axeC, e$
            axeC = (atan2(base_a,-base_b))
            "voir axeC solution 3 =", *axeC, e$
            axeC = (atan2(-base_a,-base_b))
            "voir axeC solution 4 =", *axeC, e$
            axeC = (atan2(base_b,base_a))
            "voir axeC solution 5 =", *axeC, e$
            axeC = (atan2(-base_b,base_a))
            "voir axeC solution 6 =", *axeC, e$
            axeC = (atan2(base_b,-base_a))
            "voir axeC solution 7 =", *axeC, e$
            axeC = (atan2(-base_b,-base_a))
            "voir axeC solution 8 =", *axeC, e$

            axeC = (atan2(base_a,base_c))
            "voir axeC solution 9 =", *axeC, e$
            axeC = (atan2(-base_a,base_c))
            "voir axeC solution 10 =", *axeC, e$
            axeC = (atan2(base_a,-base_c))
            "voir axeC solution 11 =", *axeC, e$
            axeC = (atan2(-base_a,-base_c))
            "voir axeC solution 12 =", *axeC, e$
            axeC = (atan2(base_c,base_a))
            "voir axeC solution 13 =", *axeC, e$
            axeC = (atan2(-base_c,base_a))
            "voir axeC solution 14 =", *axeC, e$
            axeC = (atan2(base_c,-base_a))
            "voir axeC solution 15 =", *axeC, e$
            axeC = (atan2(-base_c,-base_a))
            "voir axeC solution 16 =", *axeC, e$

            axeC = (atan2(base_b,base_c))
            "voir axeC solution 17 =", *axeC, e$
            axeC = (atan2(-base_b,base_c))
            "voir axeC solution 18 =", *axeC, e$
            axeC = (atan2(base_b,-base_c))
            "voir axeC solution 19 =", *axeC, e$
            axeC = (atan2(-base_b,-base_c))
            "voir axeC solution 20 =", *axeC, e$
            axeC = (atan2(base_c,base_b))
            "voir axeC solution 21 =", *axeC, e$
            axeC = (atan2(-base_c,base_b))
            "voir axeC solution 22 =", *axeC, e$
            axeC = (atan2(base_c,-base_b))
            "voir axeC solution 23 =", *axeC, e$
            axeC = (atan2(-base_c,-base_b))
            "voir axeC solution 24 =", *axeC, e$




prot1    # calcul des axes en positionner

       # " voir la matrice = ",e$, *m1$,*m2$,*m3$,e$,*m4$,*m5$,*m6$,e$,*m7$,*m8$,*m9$, e$
        #"-----------------", delta_transfer_z, e
        @old_axeC, @nbrtour
        #pcalangle
        if m1$ =1 & m5$ = 1 & m9$ =1 , axeC = 0
        else,
        [
        if polarite = -1, axeC = (atan2(m8$,m7$)-90), axeCpur = (atan2(m8$,m7$)-90)
        else, axeC = (atan2(m8$,m7$)-90), axeCpur = (atan2(m8$,m7$)-90)

        #if polarite = -1, axeC = (atan2(m8$,-m7$)), axeCpur = (atan2(m8$,-m7$))
        #else, axeC = (atan2(-m8$,m7$)), axeCpur = (atan2(-m8$,m7$))
        ]

        if m9$ <> 1, axeB = acos(m9$) * polarite
        else, axeB = 0
        if axeB < axeBmin, axeB = axeB + 360
        if axeB > axeBmax, axeB = axeB - 360
        if axeB < axeBmin |  axeB > axeBmax,
        [
         q7
         sdcom, spaces$ = 0," Butte A OP=", op_id$, "outil = ", *t$, sfcom,e$
        ]
        if continue <> 0, exitpost$
        #  optimisation pour aller au plus court "
        epsi = axeC - old_axeC                      # variation angulaire
        sensA = 0
        if epsi > 0, sensA = 1                      # sens de la variation
        if epsi < 0, sensA =  -1
        epsi = abs(epsi)
        @epsi, @sensA                           # mise a jour
        if epsi > 180,  [                   # optimisation de l'angle
        axeC = axeC - (360 * sensA)
        epsi = axeC - old_axeC
        sensA = 0
        if epsi > 0, sensA = 1
        if epsi < 0, sensA = -1
                        ]
        nbrtour = int (axeC / 360)
        #"voir", *m2$, *m5$, e$
        #pcalangle
        if m9$ <> 1,
        [
        if polarite = -1, tourne = ((atan2(m6$,-m3$)) * -1) -90
        else, tourne = ((atan2(m6$,-m3$)) * -1) -90
        ]

        else, tourne = 0
        #"voir tourne = ", *tourne, e$
        #if m1$ = 1 & m5$ = 1 & m9$ = 1, tourne = 0
        #if axeB = 90, tourne = 0
        #tourne = 0
        # dev en attente si besoin
        #if axeB <> 0,  tourneC = (atan2(-m8$,m7$))  # modif idem
        #else, tourneC = atan2(m2$,m1$)
        #ydec = (toz4$*sin(tourneC) + toy4$*cos(tourneC))* -1
        #xdec = (toz4$*cos(tourneC) - toy4$*sin(tourneC))
        #zdec = tox4$
        if axeC > 360 , axeC = axeC - 360
        if axeC < -360 , axeC = axeC + 360
        xdec = tox4$
        ydec = toy4$
        zdec = toz4$


        #"Voir les resultats ", " axeB =", *axeB, " axeC =", *axeC, " tourne = ", *tourne, e$

plimite

        @axeC

        if axeC > 360, axeC = axeC - 360


prot2   # affichage de l'angle au chg outil pour positionne
            @old_axeB, @axeB        # mise a jour
            @old_axeC, @axeC        # mise a jour
        @nextop$


    if nextop$ <> 11, [
            epsi = old_axeB - axeB  # regarder si on tourne sur A
            epsiA = abs(epsi)
            epsi = old_axeC - axeC  # regarder si on tourne sur B
            epsiB = abs(epsi)

            if epsiA <> 0 | epsiB <> 0 ,
                [       # si ca tourne
            bloque = 2          # deblocage des freins
            if use_bloque = 0, bloque = 0
            n$, *sbloque, e$
            n$, *sbloqueB, e$
            if mi2$ = 0, bloque = 1         # preparer le blocage de l'axe A
            if use_bloque = 0, bloque = 0
            plimite
            if useorigine > 0, n$, sgcode, sinc_abs, poriusi, *axeB, *axeC, e$ #
                    else, n$, sgcode, sinc_abs, *axeB, *axeC, e$
            axeB_rot = axeB
            axeC_rot = axeC #+ 90
            !axeB_rot, !axeC_rot
           # n$, "G49", e$
            pugvon
            old_correcteur_H = 9999
            !old_correcteur_H
            n$, splaninc_on, xdec, ydec, zdec, axeC_rot, axeB_rot , e$ # *tourne   axeC_rot,"K-90.",
            if mi5$ <> 1, n$, "G53.1", e$
            n$, *sbloque, e$     # bloquer l'axe A
            n$, *sbloqueB, e$
                ]
                ]


        old_axeB = axeB         # memo de la position de l'axe A affiche
        old_axeC = axeC         # memo de la position de l'axe A affiche



prot3   # affichage de l'angle au chg outil nul pour positionne



            @old_axeB, @axeB        # mise a jour
            @old_axeC, @axeC        # mise a jour

            epsi = old_axeB - axeB  # regarder si on tourne sur A
            epsiA = abs(epsi)
            epsi = old_axeC - axeC  # regarder si on tourne sur B
            epsiB = abs(epsi)


            if epsiA <> 0 | epsiB <> 0 | old_tox4 <> tox4$ | old_toy4 <> toy4$ | old_toz4 <> toz4$,
               [       # si ca tourne ou le decalage change
            n$,splaninc_off, e$
            pdegage4axes        # Degagement machine avant la rotation de l'axe A

            bloque = 2          # deblocage de l'axe A
            if use_bloque = 0, bloque = 0
            n$, *sbloque, e$
            n$, *sbloqueB, e$
            if mi2$ = 0, bloque = 1         # preparer le blocage de l'axe A
            if use_bloque = 0, bloque = 0
            plimite
            if useorigine > 0, n$, sgcode, sinc_abs, poriusi, *axeB, *axeC !axeBi, e$ #
                      else, n$, sgcode, sinc_abs, *axeB, *axeC !axeBi, e$
            axeB_rot = axeB
           axeC_rot = axeC #+ 90
           !axeB_rot, !axeC_rot
            # n$, "G49", e$
            old_correcteur_H = 9999
            !old_correcteur_H
            n$, splaninc_on, xdec, ydec, zdec, axeC_rot, axeB_rot , e$ # *tourne   axeC_rot,"K-90.",
            if mi5$ <> 1, n$, "G53.1", e$
            n$, *sbloque, e$     # bloquer l'axe A
            n$, *sbloqueB, e$

            if incremental = 0,
                    [           # Rappel des positions XYZ avant le degagement
                    pcalxyz
                    n$, sgcode, sinc_abs, xabs, yabs, e$
                    n$, pcorh, sgcode, zabs, e$
                    ]
               ]
          else,
                [

                pcalxyz
                #"voir=", *x$, *y$, *z$, *znci$, e$
                n$, sgcode, sinc_abs, xabs, yabs, e$
                n$, sgcode, zabs, e$
                ]

       old_axeB = axeB         # memo de la position de l'axe A affiche
       old_axeC = axeC         # memo de la position de l'axe A affiche

pcalAB   # calcul des angle a et b en 5 axes continue gcode = 11 et percage 5 axes
            #"voir=", *x$, *y$, *z$, *u$, *v$, *w$, e$
            vx = u$ - x$
            vy = v$ - y$
            vz = w$ - z$
           longvec=sqrt(vx * vx + vy * vy + vz * vz)
           vx2 = (vx/longvec)
           vy2 = (vy/longvec)
           vz2 = (vz/longvec)
           #"voir Vy2=", *vy2, e$
           if polarite = -1, axeC = (atan2(-vx2,vy2))
           else, axeC = (atan2(-vx2,vy2))

          # if polarite = -1, axeC = (atan2(vy2,-vx2))
          # else, axeC = (atan2(-vy2,vx2))


           #if mi4$ = 1, axeB = axeB + 180
           #new_vz2 =   vx2 * sin(axeC) + vz2 * cos(axeC)
            #"voir vz   ",new_vz2, e$
           if vz2 < 0.99999, axeB = acos(vz2) * polarite
           else, axeB = 0
           if axeB < axeBmin, axeB = axeB + 360
           if axeB > axeBmax, axeB = axeB - 360
           if axeB < axeBmin |  axeB > axeBmax,
                [
                q7
                sdcom, spaces$ = 0," Butte A OP=", op_id$, "outil = ", *t$, sfcom,e$
                ]
           if continue <> 0, exitpost$


         @old_axeC, @nbrtour

        #"voir axeB =", *axeB, e$
        #pcalangle
        #if axeB <> -90,  axeC = (atan2(vx2,vz2))
        #else, axeC = (atan2(vx2,vz2))
        #  compteur de tour

         epsi = (axeC + Nb_tour) - old_axeC
         if epsi > 180, Nb_tour  = Nb_tour - 360    # ajout de 360 deg
         if epsi < -180, Nb_tour = Nb_tour + 360    # retrait de 360 deg
         #" voir valeur epsi=", *epsi, " Nb_tour =", *Nb_tour, "axeC =",*axeC, old_axeC, e$
         axeC = axeC + Nb_tour


pmx0$       # pre output pmx
            #"voir les base dans pmx0$", *x$, " ", *y$," ", *z$, " ", *u$, " ", *v$, " ", *w$, vx, vy, vz, e$

            if fr$ = -2, gcode$ = 0
            else, gcode$ = 1


pmx2$     # 1 er mouv 5 axes
#CNC<<ECHEC>>pmx2$     # 1 er mouv 5 axes
#CNC<<MSG-ERREUR(3407)>> La variable, bloc PP ou mot-clé n'est plus supporté
#CNC<<ECHEC>>pmx2$     # 1 er mouv 5 axes
#CNC<<MSG-ERREUR(3407)>> La variable, bloc PP ou mot clef n'est plus supporté
#CNC<<ECHEC>>pmx2$     # 1 er mouv 5 axes
#CNC<<MSG-ERREUR(3159)>> La variable, bloc PP ou mot clef n'est plus supporté
#CNC<<ECHEC>>pmx2$     # 1 er mouv 5 axes
#CNC<<MSG-ERREUR(3151)>> La variable, bloc PP ou mot clef n'est plus support�
#CNC<<ECHEC>>pmx2$     # 1 er mouv 5 axes
#CNC<<MSG -ERREUR(3140)>> The variable, postblock, or other keyword is no longer supported
            #"voir les base dans pmx2$", *x$, " ", *y$," ", *z$, " ", *u$, " ", *v$, " ", *w$, vx, vy, vz, e$
           if opcode$ = 16, ex$
           pmx$


pmx$        # Gestion 4 axes continue avec fonction 5 axes
           # "voir les base dans pmx$", *x$, " ", *y$," ", *z$, " ", *u$, " ", *v$, " ", *w$, *vx, *vy, *vz, e$
           # " on est en 5 axes ", e$
            if percage5x = 1, "on sort du cycle", ex$   # on passe par la dans le cas d'un percage 5 axes sans changement outil
            pcalAB  # calcul des angle a et b

            if debutpmx = 1, pmx_debut# premier mouvement
            else,
            [
            xabs = x$
            yabs = y$
            zabs = z$
            if fr$ =  -2, gcode$ = 0
            else, gcode$ = 1
            if gcode$ = 0,
              [
              n$, sinc_abs, *sgcode, pxyz, axeB, axeC, e$
              ]
              else,
              [
              n$, sinc_abs, sgcode, pxyz, axeB, axeC, pfr, e$
              ]
            ]

        debutpmx = 0
        old_axeC = axeC
        old_axeB = axeB
        old_x = xabs
        old_y = yabs
        old_z = zabs

pmx_debut
           #"voir les base", x$, " ", y$," ", z$, u$, v$, w$, vx, vy, vz, e$
           gcode$ = 0


            pmx_pre_5x  # ecriture d'un placement avant enclanchement 5 axes
            #n$, "attention debut pmx", e$
            #n$, sinc_abs, *sgcode , *xabs, *yabs, e$
            #n$, sg43,*zabs, *correcteur_H, plubrifon, e$


            xabs = x$
            yabs = y$
            zabs = z$


            bloque = 2
            if use_bloque = 0, bloque = 0
            n$, *sbloque, e$
            n$, *sbloqueB, e$
            gcode$ = 0
            n$, "G69", e$
            #n$, "G49", e$
            n$, sinc_abs, *sgcode , *xdebut, *ydebut, e$
            #n$ "attention fin debut pmx", e$


            n$, sinc_abs, *sgcode , *srtcpon, *correcteur_H, *xabs, *yabs,*zabs, *axeB, *axeC, plubrifon e$
            if mi7$, n$ , *mi7$, e$

            !x$, !y$, !z$, !xr$, !yr$, !zr$
            p_modal

    old_correcteur_H = correcteur_H     # memo du correcteur de longeur
    debutpmx = 0

pmx_end$
            #"voir les base dans pmx_end$", x$, " ", y$," ", z$, u$, v$, w$, vx, vy, vz, e$


#----------- PREPARATION DU PERCAGE 5 AXES ----------------

fmt "L" 1 longvec
fmt "X1=" 1 x1
fmt "z2=" 3 z2
fmt "Y1=" 3 y1
fmt "Z1=" 3 z1
fmt "U1=" 1 u1
fmt "W2=" 3 w2
fmt "V1=" 3 v1
fmt "W1=" 3 w1
fmt "chgtl" 4 chgtl


pmx_pre_5x    # 5 axes continue  definition des rotations et modification des coordonee pour pre placement avant 5 axes continue
            #"voir x y z= ", *x$," ", *y$," ", *z$," ", *u$," ", *v$," ", *w$, e$
            vx = u$ - x$
            vy = v$ - y$
            vz = w$ - z$
            pcalAB
            prot2
            old_axeC = axeC
            old_axeB = axeB

            !old_axeB,
            x1 =   x$ * cos(axeC) - z$ * sin(axeC)
            z1 =   x$ * sin(axeC) + z$ * cos(axeC)
            z2 =  z1 * cos(axeB) - y$ * sin(axeB)
            y1 =  z1 * sin(axeB) + y$ * cos(axeB)
            u1 =   u$ * cos(axeC) - w$ * sin(axeC)
            w1 =   u$ * sin(axeC) + w$ * cos(axeC)
            w2 =  w1 * cos(axeB) - v$ * sin(axeB)
            v1 =  w1 * sin(axeB) + v$ * cos(axeB)
            xabs = u1
            yabs = v1
            zabs = z2 + ( depth$ * -1 + initht$ )
             chgtl = 0
             old_x = xabs
             old_y = yabs
             old_z = zabs


pdril5x    # placement pour percage 5 axes entre continue  definition des rotations et modification des coordonee pour pre placement avant 5 axes continue
            vx = u$ - x$
            vy = v$ - y$
            vz = w$ - z$
            pcalAB
            #prot2
            old_axeC = axeC
            old_axeB = axeB

            !old_axeB,
            x1 =   x$ * cos(axeC) - z$ * sin(axeC)
            z1 =   x$ * sin(axeC) + z$ * cos(axeC)
            z2 =  z1 * cos(axeB) - y$ * sin(axeB)
            y1 =  z1 * sin(axeB) + y$ * cos(axeB)
            u1 =   u$ * cos(axeC) - w$ * sin(axeC)
            w1 =   u$ * sin(axeC) + w$ * cos(axeC)
            w2 =  w1 * cos(axeB) - v$ * sin(axeB)
            v1 =  w1 * sin(axeB) + v$ * cos(axeB)
            xabs = u1
            yabs = v1
            zabs = z2 + ( depth$ * -1 + initht$ )
            zgarde = z2 + ( depth$ * -1 + refht$ )
            gardeabs = z2 + ((depth$ * -1) + refht$ )
            profabs = z2
             chgtl = 0
             old_x = xabs
             old_y = yabs
             old_z = zabs


pplacement_drill5x  # placement au dessus du point en percage 5 axes entre  plusieur percages
            vx = u$ - x$
            vy = v$ - y$
            vz = w$ - z$
            pcalAB
            bloque = 2          # deblocage des freins
            if use_bloque = 0, bloque = 0
             pdegage4axes        # Degagement machine avant la rotation de l'axe A
            n$, *sbloque, e$
            n$, *sbloqueB, e$
            if mi2$ = 0, bloque = 1         # preparer le blocage de l'axe A
            if use_bloque = 0, bloque = 0

            axeB_rot = axeB
            axeC_rot = axeC #+ 90
            gcode$ = 0
            #xabs = u$
            #yabs = v$
            #zabs = w$
            # n$, "G49", e$
            old_correcteur_H = 9999
            !old_correcteur_H
            n$, *sgcode, sinc_abs, *axeB, *axeC, e$ #ssa, pgamme, *spdlon, e$
            n$, splaninc_on, xdec, ydec, zdec, axeC_rot, axeB_rot , e$ # *tourne   axeC_rot,"K-90.",
            if mi5$ <> 1, n$, "G53.1", e$
            n$, *sbloque, e$     # bloquer l'axe A
            n$, *sbloqueB, e$

            old_axeB = axeB         # memo de la position de l'axe A affiche
            old_axeC = axeC         # memo de la position de l'axe A affiche


            !old_axeB,
            x1 =   x$ * cos(axeC) - z$ * sin(axeC)
            z1 =   x$ * sin(axeC) + z$ * cos(axeC)
            z2 =  z1 * cos(axeB) - y$ * sin(axeB)
            y1 =  z1 * sin(axeB) + y$ * cos(axeB)
            u1 =   u$ * cos(axeC) - w$ * sin(axeC)
            w1 =   u$ * sin(axeC) + w$ * cos(axeC)
            w2 =  w1 * cos(axeB) - v$ * sin(axeB)
            v1 =  w1 * sin(axeB) + v$ * cos(axeB)
            xabs = u1
            yabs = v1
            zabs = z2 + ( depth$ * -1 + initht$ )
             chgtl = 0
             old_x = xabs
             old_y = yabs
             old_z = zabs

                    #zabs = z2
                    gcode$ = 0
                    #n$, *sgcode, sinc_abs, *xabs, *yabs, *zabs,  e$ #ssa, pgamme, *spdlon, e$
                     n$, *sgcode, sinc_abs, *xabs, *yabs, e$ #ssa, pgamme, *spdlon, e$
                     n$, pcorh, *zabs, e$
                    #n$,  *zabs, plubrifon, e$



#[ENDBIN]



pdrill$      # Cycle de percage G81 G82
            #" voir les z$ ", *z$," ",  *depth$," ", *initht$ ," ", *zdrl$, " ", *refht$, e$

        if texte <> 0, [
        if numcoment = 0, omitseq$ = 1
        if typcycle = 0 & dwell$ = 0,  n$, sdcom, spaces$ = 0, "POINTAGE-PERCAGE", sfcom, spaces$ = old_spaces, e$
        if typcycle = 0 & dwell$ <> 0, n$, sdcom, spaces$ = 0, "POINTAGE-PERCAGE-TEMPO", sfcom, spaces$ = old_spaces, e$
        omitseq$ = old_omitseq

            ]


    typcycle = 1

    gcode$ =0
    if percage5x = 1,
    [
     pdril5x
     n$, `sgcode, sinc_abs, pcorh, *zgarde, e$
    ]
    else,
    [
    n$, `sgcode, sinc_abs, pcorh, *initht$, e$
    z$ =  initht$
    ]

    gcode$ = 81

    p_casse_modalite        # casser la modalite de xy
    p_casse_modalite_perce      # casser la modalite de la garde et la prof

        if dwell$ = 0, n$, sinc_abs, "G81", ppercexy, pavanceperce, e$
        else, n$, sinc_abs, "G82", ppercexy, pavanceperce, *tempo, e$


ppeck$      # Cycle de debourrage G83
        #"voir x y z= ", *x$," ", *y$," ", *z$," ", *u$," ", *v$," ", *w$, e$

        if texte <> 0, [
        if numcoment = 0, omitseq$ = 1
        if typcycle = 0, n$, sdcom, spaces$ = 0, "DEBOURRAGE", sfcom, spaces$ = old_spaces, e$
        omitseq$ = old_omitseq
            ]
    typcycle = 1

    gcode$ =0
    if percage5x = 1,
    [
     pdril5x
     n$, `sgcode, sinc_abs, pcorh, *zgarde, e$
    ]
    else,
    [
    n$, `sgcode, sinc_abs, pcorh, *initht$, e$
    z$ =  initht$
    ]

    gcode$ = 81

    p_casse_modalite        # casser la modalite de xyzra
    p_casse_modalite_perce      # casser la modalite de la garde et la prof
    incrementQ = peck1$
    n$, sinc_abs, "G83", ppercexy, *incrementQ, pavanceperce, e$


pchpbrk$    # Cycle de brise copeaux G73

        if texte <> 0, [
        if numcoment = 0, omitseq$ = 1
        if typcycle = 0,  n$, sdcom, spaces$ = 0, "BRISE COPEAUX", sfcom, spaces$ = old_spaces, e$
        omitseq$ = old_omitseq
            ]
    typcycle = 1

    gcode$ =0
    if percage5x = 1,
    [
     pdril5x
     n$, `sgcode, sinc_abs, pcorh, *zgarde, e$
    ]
    else,
    [
    n$, `sgcode, sinc_abs, pcorh, *initht$, e$
    z$ =  initht$
    ]

    gcode$ = 81

    p_casse_modalite        # casser la modalite de xyzra
    p_casse_modalite_perce      # casser la modalite de la garde et la prof
    incrementQ = peck1$
    incrementQ = retr$
    remonteD = peckclr$
    n$, sinc_abs, "G73", ppercexy, *incrementQ, remonteD, pavanceperce, e$



ptap$       # Cycle de taraudage G84

        if texte <> 0, [
        if numcoment = 0, omitseq$ = 1
        if typcycle = 0,  n$, sdcom, spaces$ = 0, "TARAUDAGE", sfcom, spaces$ = old_spaces, e$
        omitseq$ = old_omitseq
            ]
    typcycle = 1

    gcode$ =0
    if percage5x = 1,
    [
     pdril5x
     n$, `sgcode, sinc_abs, pcorh, *zgarde, e$
    ]
    else,
    [
    n$, `sgcode, sinc_abs, pcorh, *initht$, e$
    z$ =  initht$
    ]

    gcode$ = 81

    p_casse_modalite        # casser la modalite de xyzra
    p_casse_modalite_perce      # casser la modalite de la garde et la prof


           if tldia$ = 3, pas = 0.5
           if tldia$ = 4, pas = 0.7
           if tldia$ = 5, pas = 0.8
           if tldia$ = 6, pas = 1
           if tldia$ = 8, pas = 1.25
           if tldia$ = 10, pas = 1.5
           if tldia$ = 12, pas = 1.75
           if tldia$ = 14, pas = 2
           if tldia$ = 16, pas = 2

             if n_tap_thds$ <> 0, pas = n_tap_thds$

             if tool_typ$ = 5, ss$ = (abs(ss$))*-1
             pas = pas #* abs(ss$)

    incrementQ = peck1$

      #  if tool_typ$ = 5, n$, "M4", *ssa, e$
      #     else, n$, "M3", *ssa, e$
         if tool_typ$ = 4, [

       if peck1$ = 0,  n$, sinc_abs, "G84", ppercexy, *pas, e$
    else, n$, sinc_abs, "G84", ppercexy, *incrementQ, *pas, e$
            ]

    if tool_typ$ = 5, [
       if peck1$ = 0,  n$, sinc_abs, "G74", ppercexy, *pas, e$
    else, n$, sinc_abs, "G74", ppercexy, *incrementQ, *pas, e$
            ]


pbore1$     # Cycle d'alesage G85
        avance_retract = peck1$
        if texte <> 0, [
        if numcoment = 0, omitseq$ = 1
        if typcycle = 0, n$, sdcom, spaces$ = 0, "ALESAGE", sfcom, spaces$ = old_spaces, e$
        omitseq$ = old_omitseq
                ]

    typcycle = 1

    gcode$ =0
    if percage5x = 1,
    [
     pdril5x
     n$, `sgcode, sinc_abs, pcorh, *zgarde, e$
    ]
    else,
    [
    n$, `sgcode, sinc_abs, pcorh, *initht$, e$
    z$ =  initht$
    ]

    gcode$ = 81

    p_casse_modalite        # casser la modalite de xyzra
    p_casse_modalite_perce      # casser la modalite de la garde et la prof

           n$, sinc_abs, "G85", ppercexy, pavanceperce,
           if avance_retract <> 0, *avance_retract
           e$


p_bore2     # Cycle d'alesage G86

        if texte <> 0, [
        if numcoment = 0, omitseq$ = 1
        if typcycle = 0, n$, sdcom, spaces$ = 0, "ALESAGE BARE", sfcom, spaces$ = old_spaces, e$
        omitseq$ = old_omitseq
                ]
    typcycle = 1

    gcode$ =0
    if percage5x = 1,
    [
     pdril5x
     n$, `sgcode, sinc_abs, pcorh, *zgarde, e$
    ]
    else,
    [
    n$, `sgcode, sinc_abs, pcorh, *initht$, e$
    z$ =  initht$
    ]

    gcode$ = 81

    p_casse_modalite        # casser la modalite de xyzra
    p_casse_modalite_perce      # casser la modalite de la garde et la prof

           n$, sinc_abs, "G86", ppercexy, pavanceperce, e$



pbore2$     # Cycle d'alesage indexe G75

        if texte <> 0, [
        if numcoment = 0, omitseq$ = 1
        if typcycle = 0, n$, sdcom, spaces$ = 0, "ALESAGE INDEXE", sfcom, spaces$ = old_spaces, e$
        omitseq$ = old_omitseq
                ]
    typcycle = 1

    gcode$ =0
    if percage5x = 1,
    [
     pdril5x
     n$, `sgcode, sinc_abs, pcorh, *zgarde, e$
    ]
    else,
    [
    n$, `sgcode, sinc_abs, pcorh, *initht$, e$
    z$ =  initht$
    ]

    gcode$ = 81

    p_casse_modalite        # casser la modalite de xyzra
    p_casse_modalite_perce      # casser la modalite de la garde et la prof

       if shftdrl$ = 0, shftdrl$ = 0.1
       if shftdrl$ <0, shftdrl$ = shftdrl$ *  -1
    retrait = shftdrl$

           n$, sinc_abs, "G75", ppercexy, *retrait, pavanceperce, e$


pmisc1$     # Cycle


pmisc2$     # Cycle


pdrill_2$   # Percage suivant

           if percage5x <> 1, phole, e$
           else,
           [
            pcanceldc$
            n$, splaninc_off, e$
            p_casse_modalite
            pplacement_drill5x
            pdrill$

           ]

ppeck_2$    # Canned Peck Drill Cycle
            #"voir dans ppeck 2 x y z = ", *x$," ", *y$," ", *z$," ", *u$," ", *v$," ", *w$, e$
            if percage5x <> 1, phole, e$
            else,
            [
            pcanceldc$
            n$, splaninc_off, e$
            p_casse_modalite
            pplacement_drill5x
            ppeck$
            ]


pchpbrk_2$  # Canned Chip Break Cycle

           if percage5x <> 1, phole, e$
            else,
            [
            pcanceldc$
            n$, splaninc_off, e$
            p_casse_modalite
            pplacement_drill5x
            pchpbrk$
            ]
ptap_2$     # Canned Tap Cycle
            if percage5x <> 1, sinc_abs, ppercexy, e$
            else,
            [
            pcanceldc$
            n$, splaninc_off, e$
            p_casse_modalite
            pplacement_drill5x
            ptap$
            ]


pbore1_2$   # Canned Bore #1 Cycle

            if percage5x <> 1, phole, e$
            else,
            [
            pcanceldc$
            n$, splaninc_off, e$
            p_casse_modalite
            pplacement_drill5x
            pbore1$
            ]

pbore2_2$   # Canned Bore #2 Cycle

            if percage5x <> 1, phole, e$
            else,
            [
            pcanceldc$
            n$, splaninc_off, e$
            p_casse_modalite
            pplacement_drill5x
            pbore2$
            ]

pmisc1_2$   # Canned Misc #1 Cycle



pmisc2_2$   # Canned Misc #2 Cycle




ppercexy     # ecriture des x, y en abs ou incremental pour percage

            if percage5x <> 1,
            [
            pcalxyz
            if rotaxis$ = 0,
                  [   # XY CLASIQUE
            @depth$
            @refht$
            profabs = depth$
            profi = depth$ - refht$
            gardeabs = refht$
            gardei = refht$ - initht$
            !depth$
            !refht$
            if incremental = 0,  xabs, yabs, profabs, gardeabs, !Xinc, !Yinc, !profi, !gardei
            else,           !xabs, !yabs, !profabs, !gardeabs, Xinc, Yinc, profi, gardei
                    ]
           if rotaxis$ <> 0,
                     [    # SUBSTITUTION Y par A (diviseur tourne autour de X)
            p_Apos
            @depth$
            @refht$
            profabs = depth$ + (rotdia$/2)
            profi = depth$ - refht$
            gardeabs = refht$ + (rotdia$/2)
            gardei = refht$-initht$
            !depth$
            !refht$
             if incremental = 0, xabs, yabs, axeB, profabs, gardeabs, !Xinc, !Yinc, !axeBi, !profi, !gardei
             else, !xabs, !yabs, !axeB, !profabs, !gardeabs, Xinc, Yinc, axeBi, profi, gardei
            old_axeB  = axeB
            nbrtour = int (axeB / 360)
                     ]
            ]
           else,
           [
            xabs = x1
            yabs = y1
             xabs, yabs, profabs, gardeabs, !Xinc, !Yinc, !profi, !gardei
           ]



    p_modal     # afficher en format modal
        !x$, !y$    # mise a jour XY

        old_x = xabs
        old_y = yabs






phole       # trous suivants


         n$, sinc_abs, ppercexy, e$




pcanceldc$  # Anuulation de cyle fixe


    if percage5x <> 1,
    [
    z$ = initht$      # z au plan de secu
    profabs=  -99999    # raz des prof garde tempo
    gardeabs=  -99999
    tempo = 0
    !profabs
    !gardeabs
    !tempo

           if rotaxis$ = 0,  [   # XYZ CLASIQUE
        pcalxyz
                                ]
        else,
         [
        zabs = z$ + (rotdia$/2)
            ]
        gcode$ = 5    # choix du gcode pour ecrire G80
             if incremental = 0, n$, sinc_abs, *sgcode, *zabs, !Zinc, e$
             if incremental = 1, n$, sinc_abs, *sgcode, !zabs, Zinc, e$
        !z$      # Raz de Z
        old_z = zabs
    ]
    else,
    [
    zabs = z2 + ( depth$ * -1 + initht$ )
    profabs=  -99999    # raz des prof garde tempo
    gardeabs=  -99999
    tempo = 0
    !profabs
    !gardeabs
    !tempo
        gcode$ = 5    # choix du gcode pour ecrire G80
         n$, sinc_abs, *sgcode, *zabs, !Zinc, e$
        !z$      # Raz de Z
        old_z = zabs
    ]


#------------------Liste des OUTILS---------------------------------------------------

ptypeBoutT # afficher on non le rayon de bout
           if paramT4 <> 0, space, paramT6

pangleT    # afficher on non l'angle de l'outil
           if paramT2 = 3 | paramT2 = 12 | paramT2 = 2 | paramT2 = 17 | paramT2 = 9 | paramT2 = 4 | paramT2 = 5, space, paramT8




pwrtt$      # Lite des outil origine classic
            strtool$ = ucase(strtool$)
        if texte <> 0 & t$ > 0, [
            if numcoment = 0, omitseq$ = 1
            if strtool$ <> svide, n$, sdcom, spaces$ = 0, paramT1, space, strtool$, space, stypeT, space, paramT5, space, paramT16, ptypeBoutT, pangleT, space, smatT, sfcom, spaces$ = old_spaces, e$
            else, n$, sdcom, spaces$ = 0, paramT1, space, stypeT, space, paramT5, space, paramT16, ptypeBoutT, pangleT, space, smatT, sfcom, spaces$ = old_spaces, e$
            omitseq$ = old_omitseq
                ]

    last_op_id = op_id$





# -------------------------LECTURE DES PARAMETRES DE SUREP ET DE TYPE DE CORRECTION--------------------------------------------

paramcomp   # Type de correction d'outil au changement d'operation


    if info_corr = 1 & op_id$ <> old_op_id  & texte <> 0, [ # si afficher les infos de compesation et changement d'operation et texte supporte
        @cc_computer$, @cc_pos$                 # mise e jour des variables
        #cc_comp 41 42 0
        #cc_pos   1  2 0
        if cc_pos$ = 0  & cc_computer$ = 0,   type_comp = 0 #AUCUNE

        if cc_pos$ = 2  & cc_computer$ = 0,   type_comp = 1 #ARMOIRE DROITE
        if cc_pos$ = 1  & cc_computer$ = 0,   type_comp = 2 #ARMOIRE GAUCHE

        if cc_pos$ = 0  & cc_computer$ = 42,  type_comp = 3 #ORDINATEUR DROITE
        if cc_pos$ = 0  & cc_computer$ = 41,  type_comp = 4 #ORDINATEUR GAUCHE

    if cc_pos$ = 2  & cc_computer$ = 42,  type_comp = 5 #USURE DROITE
    if cc_pos$ = 1  & cc_computer$ = 41,  type_comp = 6 #USURE GAUCHE

    if cc_pos$ = 1  & cc_computer$ = 42,  type_comp = 7 #USURE INVERSE DROITE
    if cc_pos$ = 2  & cc_computer$ = 41,  type_comp = 8 #USURE INVERSE GAUCHE


        if opcode$ = 19, type_comp = 0              # mis sur aucune a la place d'ordinateur pour surfacage (bug)


    if numcoment = 0, omitseq$ = 1              # si pas de numero de bloc pour commentaires enlever les numeros de bloc
    if opcode$ <> 3, n$, sdcom, spaces$ = 0, stype_comp, sfcom, spaces$ = old_spaces, e$    # pour ne pas afficher les infos si percage

    omitseq$ = old_omitseq                  # rappel des numero de bloc

                                    ]


paramsurep  # Affichage des surep au changement d'operation

        if info_surep = 1 & op_id$ <> old_op_id  & texte <> 0, [    # si afficher les infos de compesation et changement d'operation et texte supporte


    if numcoment = 0, omitseq$ = 1                  # si pas de numero de bloc pour commentaires enlever les numeros de bloc
    # surep pour surfacage
        if opcode$ = 19, n$, sdcom, spaces$ = 0, *surepl, sfcom, spaces$ = old_spaces, e$
    # surep 2d
        if opcode$ <> 3 & opcode$ < 5  & opcode$ <> 19, n$, sdcom, spaces$ = 0, *surep, space, *surepl, sfcom, spaces$ = old_spaces, e$
    # surep 3d
        if opcode$ <> 3 & opcode$ >= 5 & opcode$ <> 19, n$, sdcom, spaces$ = 0, *surep3d, sfcom, spaces$ = old_spaces, e$

    omitseq$ = old_omitseq                      # rappel des numero de bloc
                                ]

ptestmachine    # verif de la def machine

        #*nbr_combi, "---------", e$
   # if nbr_combi > 1, erreur = 3        # le pst ne supporte q'une combinaison d'axe par programme
   # if compt_axes_rot > 1, erreur = 2       # le pst ne supporte q'un axe rotaif
    if write_ops = 0, erreur = 1        # Write NC Operation information MUST be enabled in CD
   # perreur

perreur

      !erreur
      !serreur


    if erreur <> 0, [

            if erreur = 4 & testerreur4 = 0, [
            serreur2 = serreur + no2str(numop)
            result = mprint(serreur2, 3)

            if result = 3, serreur2 , e$, exitpost$ # abandonner
            if result = 4, serreur2         # recommencer
            if result = 5,  testerreur4 = 1     # ignorer

                ]

        if erreur <> 4, [
            result = mprint(serreur, 2)
            exitpost$
            ]
            ]




#-------------------------- RENOMMER LE FICHIER NC EN FONCTION DU NUMERO DE PROGRAMME -------------------------



pnom_nc     # Generation des noms du fichier NC

        snom_nc = spathnc$+snamenc$+spoint+sextnc$             # Fichier NC en cours de creation sous forme toto.nc
        snom_numero = no2str (progno$)
        snom_numero = spathnc$+stringo+snom_numero+spoint+sextnc$     # nouveau non de fichier NC sous forme O0015.nc


ptest_nom   # test du non du fichier NC si O0123.NC

        if fexist (snom_numero), q11

        if remplace = 0, pchange_nom
        if remplace = 1, result = remove (snom_numero)

pchange_nom     # changer le numero de prog si fichier exite deja


        while fexist (snom_numero), [
            q10
            snom_numero = no2str (progno$)
            snom_numero = spathnc$+stringo+snom_numero+spoint+sextnc$
                        ]


[CTRL_TEXT_XML_BEGIN]  # Post text edits MUST be made with Control Definition Manager.
<?xml version="1.0" encoding="UTF-8"?>
<mp_xml_post_text xml:space="preserve">
	<control>
		<control_label>CTRL_MILL|MAZAK VARIAXIS I500 MATRIX NEXUS2</control_label>
		<language>fr-FR</language>
		<misc_integers>
			<misc_1>
				<text>Annuler le degagement en 5 axes 1=OUI 0=NON</text>
			</misc_1>
			<misc_2>
				<text>Ne pas bloquer le diviseur 1=OUI 0=NON</text>
			</misc_2>
			<misc_3>
				<text>Verifier casse outil 0=NON 1=OUI</text>
			</misc_3>
			<misc_4>
				<text>""</text>
			</misc_4>
			<misc_5>
				<text>Enlever le G53.1 sur cette op ?  1=oui</text>
			</misc_5>
			<misc_6>
				<text>""</text>
			</misc_6>
			<misc_7>
				<text>Tempo pour arrosage si 0 = sans</text>
			</misc_7>
			<misc_8>
				<text>activer G05P10000 0 = NON    1 = OUI</text>
			</misc_8>
			<misc_9>
				<text>""</text>
			</misc_9>
		</misc_integers>
		<misc_reals>
			<misc_1>
				<text>Origine G10 X=</text>
			</misc_1>
			<misc_2>
				<text>Origine G10 Y=</text>
			</misc_2>
			<misc_3>
				<text>Origine G10 Z=</text>
			</misc_3>
			<misc_4>
				<text>Origine G10 A=</text>
			</misc_4>
			<misc_5>
				<text>Origine G10 C=</text>
			</misc_5>
			<misc_6>
				<text>""</text>
			</misc_6>
			<misc_7>
				<text>""</text>
			</misc_7>
			<misc_8>
				<text>""</text>
			</misc_8>
			<misc_9>
				<text>""</text>
			</misc_9>
			<misc_10>
				<text>Ajuster les avances sur arc 0=NON 1=Ralentir 2=Accelerer 3=les Deux</text>
			</misc_10>
		</misc_reals>
		<simple_drill>
			<description>
				<text>Percage Lamage</text>
			</description>
			<feed_rate>
				<text>Avance</text>
			</feed_rate>
			<dwell>
				<text>Tempo.</text>
			</dwell>
			<clearance>
				<text>Plan de securite</text>
			</clearance>
			<retract>
				<text>Garde</text>
			</retract>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
			<shift>
				<text>""</text>
			</shift>
		</simple_drill>
		<peck_drill>
			<description>
				<text>Debourrage</text>
			</description>
			<feed_rate>
				<text>Avance</text>
			</feed_rate>
			<dwell>
				<text>Tempo.</text>
			</dwell>
			<clearance>
				<text>Plan de securite</text>
			</clearance>
			<retract>
				<text>Garde</text>
			</retract>
			<first_peck>
				<text>Inc Q</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
			<shift>
				<text>""</text>
			</shift>
		</peck_drill>
		<chip_break>
			<description>
				<text>Brise copeaux</text>
			</description>
			<feed_rate>
				<text>Avance</text>
			</feed_rate>
			<dwell>
				<text>Tempo.</text>
			</dwell>
			<clearance>
				<text>Plan de securite</text>
			</clearance>
			<retract>
				<text>Garde</text>
			</retract>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>Remonte D</text>
			</peck_clearance>
			<retract_amount>
				<text>Inc Q</text>
			</retract_amount>
			<shift>
				<text>""</text>
			</shift>
		</chip_break>
		<tap>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>Tempo.</text>
			</dwell>
			<clearance>
				<text>Plan de securite</text>
			</clearance>
			<retract>
				<text>Garde</text>
			</retract>
			<first_peck>
				<text>Inc Q</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
			<shift>
				<text>""</text>
			</shift>
		</tap>
		<bore1>
			<description>
				<text>Alesage</text>
			</description>
			<feed_rate>
				<text>Avance</text>
			</feed_rate>
			<dwell>
				<text>Tempo.</text>
			</dwell>
			<clearance>
				<text>Plan de securite</text>
			</clearance>
			<retract>
				<text>Garde</text>
			</retract>
			<first_peck>
				<text>Avance retraction</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
			<shift>
				<text>""</text>
			</shift>
		</bore1>
		<bore2>
			<description>
				<text>Alesage indexe</text>
			</description>
			<feed_rate>
				<text>Avance</text>
			</feed_rate>
			<dwell>
				<text>Tempo.</text>
			</dwell>
			<clearance>
				<text>Plan de securite</text>
			</clearance>
			<retract>
				<text>Garde</text>
			</retract>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</bore2>
		<misc1>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</misc1>
		<misc2>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</misc2>
		<drill_cycle_9>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</drill_cycle_9>
		<drill_cycle_10>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</drill_cycle_10>
		<drill_cycle_11>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</drill_cycle_11>
		<drill_cycle_12>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</drill_cycle_12>
		<drill_cycle_13>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</drill_cycle_13>
		<drill_cycle_14>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</drill_cycle_14>
		<drill_cycle_15>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</drill_cycle_15>
		<drill_cycle_16>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</drill_cycle_16>
		<drill_cycle_17>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</drill_cycle_17>
		<drill_cycle_18>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</drill_cycle_18>
		<drill_cycle_19>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</drill_cycle_19>
		<drill_cycle_20>
			<description>
				<text>""</text>
			</description>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>""</text>
			</dwell>
			<clearance>
				<text>""</text>
			</clearance>
			<retract>
				<text>""</text>
			</retract>
			<depth>
				<text>""</text>
			</depth>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
		</drill_cycle_20>
		<simple_drill_custom_parameters>
			<description>
				<text>Parametres de cycle special 1</text>
			</description>
		</simple_drill_custom_parameters>
		<peck_drill_custom_parameters>
			<description>
				<text>Parametres de cycle special 2</text>
			</description>
		</peck_drill_custom_parameters>
		<chip_break_drill_custom_parameters>
			<description>
				<text>Parametres de cycle special 3</text>
			</description>
		</chip_break_drill_custom_parameters>
		<tap_custom_parameters>
			<description>
				<text>Parametres de cycle special 4</text>
			</description>
		</tap_custom_parameters>
		<bore1_custom_parameters>
			<description>
				<text>Parametres de cycle special 5</text>
			</description>
		</bore1_custom_parameters>
		<bore2_custom_parameters>
			<description>
				<text>Parametres de cycle special 6</text>
			</description>
		</bore2_custom_parameters>
		<misc1_custom_parameters>
			<description>
				<text>Parametres de cycle special 7</text>
			</description>
		</misc1_custom_parameters>
		<misc2_custom_parameters>
			<description>
				<text>Parametres de cycle special 8</text>
			</description>
		</misc2_custom_parameters>
		<drill_cycle_9_custom_parameters>
			<description>
				<text>Parametres de cycle special 9</text>
			</description>
		</drill_cycle_9_custom_parameters>
		<drill_cycle_10_custom_parameters>
			<description>
				<text>Parametres de cycle special 10</text>
			</description>
		</drill_cycle_10_custom_parameters>
		<drill_cycle_11_custom_parameters>
			<description>
				<text>Parametres de cycle special 11</text>
			</description>
		</drill_cycle_11_custom_parameters>
		<drill_cycle_12_custom_parameters>
			<description>
				<text>Parametres de cycle special 12</text>
			</description>
		</drill_cycle_12_custom_parameters>
		<drill_cycle_13_custom_parameters>
			<description>
				<text>Parametres de cycle special 13</text>
			</description>
		</drill_cycle_13_custom_parameters>
		<drill_cycle_14_custom_parameters>
			<description>
				<text>Parametres de cycle special 14</text>
			</description>
		</drill_cycle_14_custom_parameters>
		<drill_cycle_15_custom_parameters>
			<description>
				<text>Parametres de cycle special 15</text>
			</description>
		</drill_cycle_15_custom_parameters>
		<drill_cycle_16_custom_parameters>
			<description>
				<text>Parametres de cycle special 16</text>
			</description>
		</drill_cycle_16_custom_parameters>
		<drill_cycle_17_custom_parameters>
			<description>
				<text>Parametres de cycle special 17</text>
			</description>
		</drill_cycle_17_custom_parameters>
		<drill_cycle_18_custom_parameters>
			<description>
				<text>Parametres de cycle special 18</text>
			</description>
		</drill_cycle_18_custom_parameters>
		<drill_cycle_19_custom_parameters>
			<description>
				<text>Parametres de cycle special 19</text>
			</description>
		</drill_cycle_19_custom_parameters>
		<drill_cycle_20_custom_parameters>
			<description>
				<text>Parametres de cycle special 20</text>
			</description>
		</drill_cycle_20_custom_parameters>
		<drill_cycle_descriptions>
			<simple_drill>
				<text>Pereage</text>
			</simple_drill>
			<peck_drill>
				<text>Debourrage</text>
			</peck_drill>
			<chip_break>
				<text>Brise copeaux</text>
			</chip_break>
			<tapping>
				<text>Taraudage</text>
			</tapping>
			<boring_1>
				<text>Alesage</text>
			</boring_1>
			<boring_2>
				<text>Alesage Indexe</text>
			</boring_2>
			<misc_drill_1>
				<text>""</text>
			</misc_drill_1>
			<misc_drill_2>
				<text>""</text>
			</misc_drill_2>
			<custom_drill_9>
				<text>""</text>
			</custom_drill_9>
			<custom_drill_10>
				<text>""</text>
			</custom_drill_10>
			<custom_drill_11>
				<text>""</text>
			</custom_drill_11>
			<custom_drill_12>
				<text>""</text>
			</custom_drill_12>
			<custom_drill_13>
				<text>""</text>
			</custom_drill_13>
			<custom_drill_14>
				<text>""</text>
			</custom_drill_14>
			<custom_drill_15>
				<text>""</text>
			</custom_drill_15>
			<custom_drill_16>
				<text>""</text>
			</custom_drill_16>
			<custom_drill_17>
				<text>""</text>
			</custom_drill_17>
			<custom_drill_18>
				<text>""</text>
			</custom_drill_18>
			<custom_drill_19>
				<text>""</text>
			</custom_drill_19>
			<custom_drill_20>
				<text>""</text>
			</custom_drill_20>
		</drill_cycle_descriptions>
		<canned_text>
			<canned_text_1>
				<text>""</text>
			</canned_text_1>
			<canned_text_2>
				<text>""</text>
			</canned_text_2>
			<canned_text_3>
				<text>""</text>
			</canned_text_3>
			<canned_text_4>
				<text>""</text>
			</canned_text_4>
			<canned_text_5>
				<text>""</text>
			</canned_text_5>
			<canned_text_6>
				<text>""</text>
			</canned_text_6>
			<canned_text_7>
				<text>""</text>
			</canned_text_7>
			<canned_text_8>
				<text>""</text>
			</canned_text_8>
			<canned_text_9>
				<text>""</text>
			</canned_text_9>
			<canned_text_10>
				<text>""</text>
			</canned_text_10>
		</canned_text>
	</control>
<control>
		<control_label>CTRL_MILL|MAZAK VARIAXIS J500 MATRIX NEXUS2</control_label>
		<language>fr-FR</language>
		<misc_integers>
			<misc_1>
				<text>Annuler le degagement en 5 axes 1=OUI 0=NON</text>
			</misc_1>
			<misc_2>
				<text>Ne pas bloquer le diviseur 1=OUI 0=NON</text>
			</misc_2>
			<misc_3>
				<text>Verifier casse outil 0=NON 1=OUI</text>
			</misc_3>
			<misc_4>
				<text>Soufllage M50 0=non 1=oui</text>
			</misc_4>
			<misc_5>
				<text>Enlever le G53.1 sur cette op? 1=OUI</text>
			</misc_5>
			<misc_6>
				<text>""</text>
			</misc_6>
			<misc_7>
				<text>Tempo pour arrosage si0=sans</text>
			</misc_7>
			<misc_8>
				<text>activer G05P10000 0=NON 1=OUI</text>
			</misc_8>
			<misc_9>
				<text>""</text>
			</misc_9>
		</misc_integers>
		<misc_reals>
			<misc_1>
				<text>Origine G10 X=</text>
			</misc_1>
			<misc_2>
				<text>Origine G10 Y=</text>
			</misc_2>
			<misc_3>
				<text>Origine G10 Z=</text>
			</misc_3>
			<misc_4>
				<text>Origine G10 A=</text>
			</misc_4>
			<misc_5>
				<text>Origine G10 C=</text>
			</misc_5>
			<misc_6>
				<text>""</text>
			</misc_6>
			<misc_7>
				<text>""</text>
			</misc_7>
			<misc_8>
				<text>""</text>
			</misc_8>
			<misc_9>
				<text>""</text>
			</misc_9>
			<misc_10>
				<text>Ajuster les avances sur arc 0=NON 1=Ralentir 2=accelerer 3=les deux</text>
			</misc_10>
		</misc_reals>
		<simple_drill>
			<description>
				<text>Percage Lamage</text>
			</description>
			<feed_rate>
				<text>Avance</text>
			</feed_rate>
			<dwell>
				<text>Tempo</text>
			</dwell>
			<clearance>
				<text>Plan de securite</text>
			</clearance>
			<retract>
				<text>Garde</text>
			</retract>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
			<shift>
				<text>""</text>
			</shift>
		</simple_drill>
		<peck_drill>
			<description>
				<text>Debourrage</text>
			</description>
			<feed_rate>
				<text>Avance</text>
			</feed_rate>
			<dwell>
				<text>Tempo</text>
			</dwell>
			<clearance>
				<text>Plan de securite</text>
			</clearance>
			<retract>
				<text>Garde</text>
			</retract>
			<first_peck>
				<text>Inc Q</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
			<shift>
				<text>""</text>
			</shift>
		</peck_drill>
		<chip_break>
			<description>
				<text>Brise copeaux</text>
			</description>
			<feed_rate>
				<text>Avance</text>
			</feed_rate>
			<dwell>
				<text>Tempo</text>
			</dwell>
			<clearance>
				<text>Plan de securite</text>
			</clearance>
			<retract>
				<text>Garde</text>
			</retract>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>Remonte D</text>
			</peck_clearance>
			<retract_amount>
				<text>Inc Q</text>
			</retract_amount>
			<shift>
				<text>""</text>
			</shift>
		</chip_break>
		<tap>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>Tempo</text>
			</dwell>
			<clearance>
				<text>Plan de securite</text>
			</clearance>
			<retract>
				<text>Garde</text>
			</retract>
			<first_peck>
				<text>Inc Q</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
			<shift>
				<text>""</text>
			</shift>
		</tap>
		<bore1>
			<description>
				<text>Alesage</text>
			</description>
			<feed_rate>
				<text>Avance</text>
			</feed_rate>
			<dwell>
				<text>Tempo</text>
			</dwell>
			<clearance>
				<text>Plan de securite</text>
			</clearance>
			<retract>
				<text>Garde</text>
			</retract>
			<first_peck>
				<text>Avance retractation</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
			<shift>
				<text>""</text>
			</shift>
		</bore1>
		<bore2>
			<description>
				<text>Alesage indexe</text>
			</description>
			<feed_rate>
				<text>Avance</text>
			</feed_rate>
			<dwell>
				<text>Tempo</text>
			</dwell>
			<clearance>
				<text>Plan de securite</text>
			</clearance>
			<retract>
				<text>Garde</text>
			</retract>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
			<shift>
				<text>""</text>
			</shift>
		</bore2>
		<drill_cycle_descriptions>
			<simple_drill>
				<text>Pereage</text>
			</simple_drill>
			<peck_drill>
				<text>Debourrage</text>
			</peck_drill>
			<chip_break>
				<text>Brise copeaux</text>
			</chip_break>
			<tapping>
				<text>Taraudage</text>
			</tapping>
			<boring_1>
				<text>Alesage</text>
			</boring_1>
			<boring_2>
				<text>Alesage Indexe</text>
			</boring_2>
		</drill_cycle_descriptions>
	</control>
	<control>
		<control_label>CTRL_MILL|MAZAK I-J500</control_label>
		<language>fr-FR</language>
		<misc_integers>
			<misc_1>
				<text>Annuler le degagement en 5 axes 1=OUI 0=NON</text>
			</misc_1>
			<misc_2>
				<text>Ne pas bloquer le diviseur 1=OUI 0=NON</text>
			</misc_2>
			<misc_3>
				<text>Verifier casse outil 0=NON 1=OUI</text>
			</misc_3>
			<misc_4>
				<text>Soufflage M50 0=NON 1=OUI</text>
			</misc_4>
			<misc_5>
				<text>Enlever le G53.1 sur cette op? 1=OUI</text>
			</misc_5>
			<misc_6>
				<text>""</text>
			</misc_6>
			<misc_7>
				<text>Tempo pour arrosation si0=sans</text>
			</misc_7>
			<misc_8>
				<text>activer G05P10000 0=NON 1=OUI</text>
			</misc_8>
			<misc_9>
				<text>""</text>
			</misc_9>
		</misc_integers>
		<misc_reals>
			<misc_1>
				<text>Origine G10 X=</text>
			</misc_1>
			<misc_2>
				<text>Origine G10 Y=</text>
			</misc_2>
			<misc_3>
				<text>Origine G10 Z=</text>
			</misc_3>
			<misc_4>
				<text>Origine G10 A=</text>
			</misc_4>
			<misc_5>
				<text>Origine G10 C=</text>
			</misc_5>
			<misc_6>
				<text>""</text>
			</misc_6>
			<misc_7>
				<text>""</text>
			</misc_7>
			<misc_8>
				<text>""</text>
			</misc_8>
			<misc_9>
				<text>""</text>
			</misc_9>
			<misc_10>
				<text>Ajuster les avances sur arc 0=NON 1=Ralentir 2=accelerer 3=les deux</text>
			</misc_10>
		</misc_reals>
		<simple_drill>
			<description>
				<text>Percage Lamage</text>
			</description>
			<feed_rate>
				<text>Avance</text>
			</feed_rate>
			<dwell>
				<text>Tempo</text>
			</dwell>
			<clearance>
				<text>Plan de securite</text>
			</clearance>
			<retract>
				<text>Garde</text>
			</retract>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
			<shift>
				<text>""</text>
			</shift>
		</simple_drill>
		<peck_drill>
			<description>
				<text>Debourrage</text>
			</description>
			<feed_rate>
				<text>Avance</text>
			</feed_rate>
			<dwell>
				<text>Tempo</text>
			</dwell>
			<clearance>
				<text>Plan de securite</text>
			</clearance>
			<retract>
				<text>Garde</text>
			</retract>
			<first_peck>
				<text>Inc Q</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
			<shift>
				<text>""</text>
			</shift>
		</peck_drill>
		<chip_break>
			<description>
				<text>Brise copeaux</text>
			</description>
			<feed_rate>
				<text>Avance</text>
			</feed_rate>
			<dwell>
				<text>Tempo</text>
			</dwell>
			<clearance>
				<text>Plan de securite</text>
			</clearance>
			<retract>
				<text>Garde</text>
			</retract>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>Remonte D</text>
			</peck_clearance>
			<retract_amount>
				<text>Inc Q</text>
			</retract_amount>
			<shift>
				<text>""</text>
			</shift>
		</chip_break>
		<tap>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>Tempo</text>
			</dwell>
			<clearance>
				<text>Plan de securite</text>
			</clearance>
			<retract>
				<text>Garde</text>
			</retract>
			<first_peck>
				<text>Inc Q</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
			<shift>
				<text>""</text>
			</shift>
		</tap>
		<bore1>
			<description>
				<text>Alesage</text>
			</description>
			<feed_rate>
				<text>Avance</text>
			</feed_rate>
			<dwell>
				<text>Tempo</text>
			</dwell>
			<clearance>
				<text>Plan de securite</text>
			</clearance>
			<retract>
				<text>Garde</text>
			</retract>
			<first_peck>
				<text>Avance retractation</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
			<shift>
				<text>""</text>
			</shift>
		</bore1>
		<bore2>
			<description>
				<text>Alesage indexe</text>
			</description>
			<feed_rate>
				<text>Avance</text>
			</feed_rate>
			<dwell>
				<text>Tempo</text>
			</dwell>
			<clearance>
				<text>Plan de securite</text>
			</clearance>
			<retract>
				<text>Garde</text>
			</retract>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
			<shift>
				<text>""</text>
			</shift>
		</bore2>
		<drill_cycle_descriptions>
			<simple_drill>
				<text>Percage</text>
			</simple_drill>
			<peck_drill>
				<text>Debbourage</text>
			</peck_drill>
			<chip_break>
				<text>Brise copo</text>
			</chip_break>
			<tapping>
				<text>Taraudage</text>
			</tapping>
			<boring_1>
				<text>Alesage</text>
			</boring_1>
			<boring_2>
				<text>Alesage Indexe</text>
			</boring_2>
		</drill_cycle_descriptions>
	</control>
	<control>
		<control_label>CTRL_MILL|MAZAK_VAR500</control_label>
		<language>fr-FR</language>
		<misc_integers>
			<misc_1>
				<text>Annuler le degagement en 5 axes 1=OUI 0=NON</text>
			</misc_1>
			<misc_2>
				<text>Ne pas bloquer le diviseur 1=OUI 0=NON</text>
			</misc_2>
			<misc_3>
				<text>Verifier casse outil 1=OUI 0=NON</text>
			</misc_3>
			<misc_4>
				<text>Soufflage M50 1=OUI 0=NON</text>
			</misc_4>
			<misc_5>
				<text>Enlever le G53.1 sur cette OP? 1=OUI</text>
			</misc_5>
			<misc_6>
				<text>""</text>
			</misc_6>
			<misc_7>
				<text>Tempo pour arrosage si 0=sans</text>
			</misc_7>
			<misc_8>
				<text>Activer G05P10000 1=OUI 0=NON</text>
			</misc_8>
			<misc_9>
				<text>""</text>
			</misc_9>
		</misc_integers>
		<misc_reals>
			<misc_1>
				<text>Origine G10 X=</text>
			</misc_1>
			<misc_2>
				<text>Origine G10 Y=</text>
			</misc_2>
			<misc_3>
				<text>Origine G10 Z=</text>
			</misc_3>
			<misc_4>
				<text>Origine G10 A=</text>
			</misc_4>
			<misc_5>
				<text>Origine G10 C=</text>
			</misc_5>
			<misc_6>
				<text>""</text>
			</misc_6>
			<misc_7>
				<text>""</text>
			</misc_7>
			<misc_8>
				<text>""</text>
			</misc_8>
			<misc_9>
				<text>""</text>
			</misc_9>
			<misc_10>
				<text>Ajuster les avacnces sur arcs 0=NON 1=Ralentir 2=accelerer et ralentir</text>
			</misc_10>
		</misc_reals>
		<simple_drill>
			<description>
				<text>Percage lamage</text>
			</description>
			<feed_rate>
				<text>Avance</text>
			</feed_rate>
			<dwell>
				<text>Tempo</text>
			</dwell>
			<clearance>
				<text>Plan de securite</text>
			</clearance>
			<retract>
				<text>Garde</text>
			</retract>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
			<shift>
				<text>""</text>
			</shift>
		</simple_drill>
		<peck_drill>
			<description>
				<text>Debourrage</text>
			</description>
			<feed_rate>
				<text>Avance</text>
			</feed_rate>
			<dwell>
				<text>Tempo</text>
			</dwell>
			<clearance>
				<text>Plan de securite</text>
			</clearance>
			<retract>
				<text>Garde</text>
			</retract>
			<first_peck>
				<text>Inc Q</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
			<shift>
				<text>""</text>
			</shift>
		</peck_drill>
		<chip_break>
			<description>
				<text>Brise copeaux</text>
			</description>
			<feed_rate>
				<text>Avance</text>
			</feed_rate>
			<dwell>
				<text>Tempo</text>
			</dwell>
			<clearance>
				<text>Plan de securite</text>
			</clearance>
			<retract>
				<text>Garde</text>
			</retract>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>Remonte D</text>
			</peck_clearance>
			<retract_amount>
				<text>Inc Q</text>
			</retract_amount>
			<shift>
				<text>""</text>
			</shift>
		</chip_break>
		<tap>
			<feed_rate>
				<text>""</text>
			</feed_rate>
			<dwell>
				<text>Tempo</text>
			</dwell>
			<clearance>
				<text>Plan de securite</text>
			</clearance>
			<retract>
				<text>Garde</text>
			</retract>
			<first_peck>
				<text>Inc Q</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
			<shift>
				<text>""</text>
			</shift>
		</tap>
		<bore1>
			<description>
				<text>Alesage</text>
			</description>
			<feed_rate>
				<text>Avance</text>
			</feed_rate>
			<dwell>
				<text>Tempo</text>
			</dwell>
			<clearance>
				<text>Plan de securite</text>
			</clearance>
			<retract>
				<text>Garde</text>
			</retract>
			<first_peck>
				<text>Avance retractation</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
			<shift>
				<text>""</text>
			</shift>
		</bore1>
		<bore2>
			<description>
				<text>Alesage indexe</text>
			</description>
			<feed_rate>
				<text>Avance</text>
			</feed_rate>
			<dwell>
				<text>Tempo</text>
			</dwell>
			<clearance>
				<text>Plan de securite</text>
			</clearance>
			<retract>
				<text>Garde</text>
			</retract>
			<first_peck>
				<text>""</text>
			</first_peck>
			<subsequent_peck>
				<text>""</text>
			</subsequent_peck>
			<peck_clearance>
				<text>""</text>
			</peck_clearance>
			<retract_amount>
				<text>""</text>
			</retract_amount>
			<shift>
				<text>""</text>
			</shift>
		</bore2>
	</control>
</mp_xml_post_text>
[CTRL_TEXT_XML_END]
